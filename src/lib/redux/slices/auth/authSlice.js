"use client";
/* Core */
import { createSlice } from "@reduxjs/toolkit";

/* Instruments */
// import {
// } from "./actions";

let storedDataString = null;
let data = null;

if (typeof window !== "undefined") {
  storedDataString = localStorage.getItem("authUser");
  data = storedDataString ? JSON.parse(storedDataString) : null;
}
// JSON.stringify(response.data)
const initialState = {
  walletAddress: (data?.walletAddress || ""),
  bitcoinWallet: (data?.bitcoinWallet || ""),
  webauthnData: ((data?.webauthnData && JSON.stringify(data?.webauthnData) )|| ""),
  email: (data?.email || ""),
  login: (data?.login || false),
  pos: (data?.pos || false),
  totalPasskey: (data?.totalPasskey || ""),
};

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginSet: (state, action) => {
      state.login = action.payload.login;
      state.email = action.payload.email;
      state.walletAddress = action.payload.walletAddress;
      state.bitcoinWallet = action.payload.bitcoinWallet;
      state.webauthnData = action.payload.webauthnData;
      state.pos = (action.payload.pos || false);
      state.totalPasskey = (action.payload.totalPasskey || 1);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => { },
});
export const { loginSet } = authSlice.actions;