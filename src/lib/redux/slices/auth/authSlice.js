"use client";
/* Core */
import { createSlice } from "@reduxjs/toolkit";

/* Instruments */
// import {
// } from "./actions";

let storedDataString = null;
let data = null;

if (typeof window !== "undefined") {
  storedDataString = localStorage.getItem("authUser");
  data = storedDataString ? JSON.parse(storedDataString) : null;
  if (data) {
    data.webauthKey = {
      ...data.webauthKey,
      pubX: BigInt(data.webauthKey.pubX),
      pubY: BigInt(data.webauthKey.pubY),
    }
  }
}
// JSON.stringify(response.data)
const initialState = {
  walletAddress: (data?.walletAddress || ""),
  webauthKey: (data?.webauthKey || ""),
  passkeyCred: "",
  username: (data?.username || ""),
  email: (data?.email || ""),
  id: (data?.id || ""),
  login: (data?.login || false),
  signer: ""
};

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginSet: (state, action) => {
      state.login = action.payload.login;
      state.username = action.payload.username;
      state.email = action.payload.email;
      state.walletAddress = action.payload.walletAddress;
      state.passkeyCred = action.payload.passkeyCred;
      state.webauthKey = action.payload.webauthKey;
      state.id = action.payload.id;
      state.signer = action.payload.signer;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => { },
});
export const { loginSet } = authSlice.actions;