{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  ChainToHexChainId,\n  type ConnectWalletParams,\n  type EVMChain,\n  EVMChains,\n  type EthereumWindowProvider,\n  WalletOption,\n  ensureEVMApiKeys,\n  filterSupportedChains,\n  prepareNetworkSwitch,\n  setRequestClientConfig,\n  switchEVMWalletNetwork,\n} from \"@swapkit/helpers\";\nimport type { NonETHToolbox } from \"@swapkit/toolbox-evm\";\nimport type { BrowserProvider, Eip1193Provider } from \"ethers\";\nimport { KernelEIP1193Provider } from \"@zerodev/sdk/providers\";\ndeclare const window: {\n  ethereum: EthereumWindowProvider;\n  trustwallet: EthereumWindowProvider;\n  coinbaseWalletExtension: EthereumWindowProvider;\n  braveSolana: any;\n} & Window;\n\nexport type EVMWalletOptions =\n  | WalletOption.BRAVE\n  | WalletOption.OKX_MOBILE\n  | WalletOption.METAMASK\n  | WalletOption.TRUSTWALLET_WEB\n  | WalletOption.COINBASE_WEB\n  | WalletOption.EIP6963;\n\nconst getWalletForType = (\n  walletType:\n    | WalletOption.BRAVE\n    | WalletOption.OKX_MOBILE\n    | WalletOption.METAMASK\n    | WalletOption.TRUSTWALLET_WEB\n    | WalletOption.COINBASE_WEB\n) => {\n  switch (walletType) {\n    case WalletOption.BRAVE:\n    case WalletOption.METAMASK:\n    case WalletOption.OKX_MOBILE:\n      return window.ethereum;\n    case WalletOption.COINBASE_WEB:\n      return window.coinbaseWalletExtension;\n    case WalletOption.TRUSTWALLET_WEB:\n      return window.trustwallet;\n  }\n};\n\nexport const getWeb3WalletMethods = async ({\n  ethereumWindowProvider,\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n  provider,\n}: {\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  chain: EVMChain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n  provider: BrowserProvider;\n}) => {\n  if (!ethereumWindowProvider)\n    throw new Error(\"Requested web3 wallet is not installed\");\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n  const keys = ensureEVMApiKeys({ chain, covalentApiKey, ethplorerApiKey });\n  const signer = await provider.getSigner();\n\n  const toolbox = getToolboxByChain(chain)({ ...keys, provider, signer });\n\n  if (chain !== Chain.Ethereum) {\n    const currentNetwork = await provider.getNetwork();\n    if (currentNetwork.chainId.toString() !== ChainToHexChainId[chain]) {\n      try {\n        await switchEVMWalletNetwork(\n          provider,\n          ChainToHexChainId[chain],\n          (toolbox as NonETHToolbox).getNetworkParams()\n        );\n      } catch (_error) {\n        throw new Error(`Failed to add/switch ${chain} network: ${chain}`);\n      }\n    }\n  }\n\n  return prepareNetworkSwitch<typeof toolbox>({\n    toolbox: { ...toolbox },\n    chainId: ChainToHexChainId[chain],\n    provider,\n  });\n};\n\nexport const getWalletMethods = async ({\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n  provider,\n}: {\n  chain: EVMChain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n  provider: BrowserProvider;\n}) => {\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n  const keys = ensureEVMApiKeys({ chain, covalentApiKey, ethplorerApiKey });\n  const signer = await provider.getSigner();\n\n  const toolbox = getToolboxByChain(chain)({ ...keys, provider, signer });\n\n  if (chain !== Chain.Ethereum) {\n    const currentNetwork = await provider.getNetwork();\n    if (currentNetwork.chainId.toString() !== ChainToHexChainId[chain]) {\n      try {\n        await switchEVMWalletNetwork(\n          provider,\n          ChainToHexChainId[chain],\n          (toolbox as NonETHToolbox).getNetworkParams()\n        );\n      } catch (_error) {\n        throw new Error(`Failed to add/switch ${chain} network: ${chain}`);\n      }\n    }\n  }\n\n  return prepareNetworkSwitch<typeof toolbox>({\n    toolbox: { ...toolbox },\n    chainId: ChainToHexChainId[chain],\n    provider,\n  });\n};\n\nfunction connectEVMWallet({\n  addChain,\n  config: { covalentApiKey, ethplorerApiKey, thorswapApiKey },\n}: ConnectWalletParams) {\n  return async function connectEVMWallet(\n    chains: Chain[],\n    walletType: EVMWalletOptions = WalletOption.METAMASK,\n    kernelProvider: KernelEIP1193Provider,\n    eip1193Provider?: Eip1193Provider\n  ) {\n    console.log(\"line-527\")\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const supportedChains = filterSupportedChains(\n      chains,\n      EVMChains,\n      walletType\n    );\n    const { getProvider } = await import(\"@swapkit/toolbox-evm\");\n    console.log(\"line-536\")\n    const { BrowserProvider } = await import(\"ethers\");\n    console.log(\"line-538\")\n\n    const ethersProvider = new BrowserProvider(kernelProvider);\n    const signer = await ethersProvider.getSigner();\n    const address = await signer.getAddress();\n    console.log(\"line-43\", signer, address);\n\n    const promises = supportedChains.map(async (chain) => {\n      const walletMethods = await getWalletMethods({\n        chain: chain as EVMChain,\n        ethplorerApiKey,\n        covalentApiKey,\n        provider: ethersProvider,\n      });\n\n      const getBalance = async (potentialScamFilter = true) =>\n        walletMethods.getBalance(\n          address,\n          potentialScamFilter,\n          getProvider(chain as EVMChain)\n        );\n      console.log(\"line-559\", getBalance);\n      const disconnect = () =>\n        ethersProvider.send(\"wallet_revokePermissions\", [\n          {\n            eth_accounts: {},\n          },\n        ]);\n\n      addChain({\n        ...walletMethods,\n        disconnect,\n        chain,\n        address,\n        getBalance,\n        balance: [],\n        walletType,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\nexport const evmWallet = { connectEVMWallet } as const;\n"
  ],
  "mappings": "+CAAA,gBACE,uBACA,eAGA,kBAEA,sBACA,2BACA,0BACA,4BACA,4BACA,yBAwCK,IAAM,EAAuB,OAClC,yBACA,QACA,iBACA,kBACA,cAOI,CACJ,IAAK,EACH,MAAM,IAAI,MAAM,wCAAwC,EAC1D,IAAQ,qBAAsB,KAAa,gCAErC,EAAO,EAAiB,CAAE,QAAO,iBAAgB,iBAAgB,CAAC,EAClE,EAAS,MAAM,EAAS,UAAU,EAElC,EAAU,EAAkB,CAAK,EAAE,IAAK,EAAM,WAAU,QAAO,CAAC,EAEtE,GAAI,IAAU,EAAM,UAElB,IADuB,MAAM,EAAS,WAAW,GAC9B,QAAQ,SAAS,IAAM,EAAkB,GAC1D,GAAI,CACF,MAAM,EACJ,EACA,EAAkB,GACjB,EAA0B,iBAAiB,CAC9C,QACO,EAAP,CACA,MAAM,IAAI,MAAM,wBAAwB,cAAkB,GAAO,GAKvE,OAAO,EAAqC,CAC1C,QAAS,IAAK,CAAQ,EACtB,QAAS,EAAkB,GAC3B,UACF,CAAC,GAGU,EAAmB,OAC9B,QACA,iBACA,kBACA,cAMI,CACJ,IAAQ,qBAAsB,KAAa,gCAErC,EAAO,EAAiB,CAAE,QAAO,iBAAgB,iBAAgB,CAAC,EAClE,EAAS,MAAM,EAAS,UAAU,EAElC,EAAU,EAAkB,CAAK,EAAE,IAAK,EAAM,WAAU,QAAO,CAAC,EAEtE,GAAI,IAAU,EAAM,UAElB,IADuB,MAAM,EAAS,WAAW,GAC9B,QAAQ,SAAS,IAAM,EAAkB,GAC1D,GAAI,CACF,MAAM,EACJ,EACA,EAAkB,GACjB,EAA0B,iBAAiB,CAC9C,QACO,EAAP,CACA,MAAM,IAAI,MAAM,wBAAwB,cAAkB,GAAO,GAKvE,OAAO,EAAqC,CAC1C,QAAS,IAAK,CAAQ,EACtB,QAAS,EAAkB,GAC3B,UACF,CAAC,GAGH,SAAS,CAAgB,EACvB,WACA,QAAU,iBAAgB,kBAAiB,mBACrB,CACtB,OAAO,eAAe,CAAgB,CACpC,EACA,EAA+B,EAAa,SAC5C,EACA,EACA,CACA,QAAQ,IAAI,UAAU,EACtB,EAAuB,CAAE,OAAQ,CAAe,CAAC,EAEjD,IAAM,EAAkB,EACtB,EACA,EACA,CACF,GACQ,eAAgB,KAAa,gCACrC,QAAQ,IAAI,UAAU,EACtB,IAAQ,mBAAoB,KAAa,+BACzC,QAAQ,IAAI,UAAU,EAEtB,IAAM,EAAiB,IAAI,EAAgB,CAAc,EACnD,EAAS,MAAM,EAAe,UAAU,EACxC,EAAU,MAAM,EAAO,WAAW,EACxC,QAAQ,IAAI,UAAW,EAAQ,CAAO,EAEtC,IAAM,EAAW,EAAgB,IAAI,MAAO,IAAU,CACpD,IAAM,EAAgB,MAAM,EAAiB,CAC3C,MAAO,EACP,kBACA,iBACA,SAAU,CACZ,CAAC,EAEK,EAAa,MAAO,EAAsB,KAC9C,EAAc,WACZ,EACA,EACA,EAAY,CAAiB,CAC/B,EACF,QAAQ,IAAI,WAAY,CAAU,EAQlC,EAAS,IACJ,EACH,WATiB,IACjB,EAAe,KAAK,2BAA4B,CAC9C,CACE,aAAc,CAAC,CACjB,CACF,CAAC,EAKD,QACA,UACA,aACA,QAAS,CAAC,EACV,YACF,CAAC,EACF,EAID,OAFA,MAAM,QAAQ,IAAI,CAAQ,EAEnB,IAGJ,IAAM,EAAY,CAAE,kBAAiB",
  "debugId": "9263763CA62004AE64756E2164756E21",
  "names": []
}