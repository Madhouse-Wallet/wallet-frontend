import"./chunk-6y0bdnsy.js";import{De as Q,Ke as K,Pe as A,qe as m,xe as v}from"./chunk-f1my8rj8.js";import{Te as f,Ye as g}from"./chunk-trjbmn7w.js";async function s({chain:C,derivationPath:H,provider:N}){let{AbstractSigner:O,Signature:W}=await import("./chunk-7gkkj4xs.js");class L extends O{address;chain;derivationPath;provider;constructor({chain:M,derivationPath:P,provider:S}){super(S);this.address="",this.chain=M,this.derivationPath=P,this.provider=S}getAddress=async()=>{if(!this.address){let{default:M}=await import("./chunk-2etgkvd2.js"),P=await M.ethereumGetAddress({path:K(this.derivationPath),showOnTrezor:!0});if(!P.success)throw new Q({errorKey:"wallet_trezor_failed_to_get_address",info:{...P,chain:this.chain,derivationPath:this.derivationPath}});this.address=P.payload.address}return this.address};signMessage=async(M)=>{let{default:P}=await import("./chunk-2etgkvd2.js"),S=await P.ethereumSignMessage({path:K(this.derivationPath),message:M});if(!S.success)throw new Q({errorKey:"wallet_trezor_failed_to_sign_transaction",info:{...S,message:M,chain:this.chain,derivationPath:this.derivationPath}});return S.payload.signature};signTypedData(){throw new Error("Not implemented")}signTransaction=async({to:M,gasLimit:P,value:S,data:d,nonce:l,maxFeePerGas:y,maxPriorityFeePerGas:F,gasPrice:G})=>{if(!M)throw new Q({errorKey:"wallet_missing_params",info:{to:M}});if(!P)throw new Q({errorKey:"wallet_missing_params",info:{gasLimit:P}});let x=y&&F;if(x&&!y)throw new Q({errorKey:"wallet_missing_params",info:{maxFeePerGas:y}});if(x&&!F)throw new Q({errorKey:"wallet_missing_params",info:{maxPriorityFeePerGas:F}});if(!(x||G))throw new Q({errorKey:"wallet_missing_params",info:{gasPrice:G}});let{default:p}=await import("./chunk-2etgkvd2.js"),{toHexString:T}=await import("./chunk-myh46j1s.js"),{Transaction:I}=await import("./chunk-7gkkj4xs.js"),Z=x?{maxFeePerGas:T(BigInt(y?.toString()||0)),maxPriorityFeePerGas:T(BigInt(F?.toString()||0))}:G&&{gasPrice:T(BigInt(G?.toString()||0))}||{gasPrice:"0x0"},$=T(BigInt(l||await this.provider.getTransactionCount(await this.getAddress(),"pending"))),_={chainId:Number.parseInt(m[this.chain]),to:M.toString(),value:T(BigInt(S?.toString()||0)),gasLimit:T(BigInt(P?.toString()||0)),nonce:$,data:d?.toString()||"0x",...Z},{success:z,payload:a}=await p.ethereumSignTransaction({path:K(this.derivationPath),transaction:_});if(!z)throw new Q({errorKey:"wallet_trezor_failed_to_sign_transaction",info:{...a,chain:this.chain,derivationPath:this.derivationPath}});let{r:E,s:Y,v:h}=a,u=W.from({r:E,s:Y,v:new A(BigInt(h)).getBaseValue("number")}),i=I.from({..._,nonce:Number.parseInt(_.nonce,16),type:x?2:0,signature:u}).serialized;if(!i)throw new Q({errorKey:"wallet_trezor_failed_to_sign_transaction",info:{chain:this.chain,derivationPath:this.derivationPath}});return i};connect=(M)=>{if(!M)throw new Q({errorKey:"wallet_provider_not_found",info:{wallet:v.TREZOR,chain:this.chain,derivationPath:this.derivationPath}});return new L({chain:this.chain,derivationPath:this.derivationPath,provider:M})}}return new L({chain:C,derivationPath:H,provider:N})}export{s as getEVMSigner};

//# debugId=EAAECD802322A26564756E2164756E21
