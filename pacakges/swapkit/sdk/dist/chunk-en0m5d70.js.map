{
  "version": 3,
  "sources": ["../../../../node_modules/cosmjs-types/utf8.js", "../../../../node_modules/cosmjs-types/varint.js", "../../../../node_modules/cosmjs-types/binary.js", "../../../../node_modules/cosmjs-types/helpers.js", "../../../../node_modules/cosmjs-types/cosmos/crypto/multisig/v1beta1/multisig.js", "../../../../node_modules/cosmjs-types/google/protobuf/any.js", "../../../../node_modules/cosmjs-types/cosmos/tx/signing/v1beta1/signing.js"],
  "sourcesContent": [
    "/* eslint-disable */\n/**\n * This file and any referenced files were automatically generated by @cosmology/telescope@1.0.7\n * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n * and run the transpile command or yarn proto command to regenerate this bundle.\n */\n// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utf8Write = exports.utf8Read = exports.utf8Length = void 0;\n/**\n * Calculates the UTF8 byte length of a string.\n * @param {string} string String\n * @returns {number} Byte length\n */\nfunction utf8Length(str) {\n    let len = 0, c = 0;\n    for (let i = 0; i < str.length; ++i) {\n        c = str.charCodeAt(i);\n        if (c < 128)\n            len += 1;\n        else if (c < 2048)\n            len += 2;\n        else if ((c & 0xfc00) === 0xd800 && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            ++i;\n            len += 4;\n        }\n        else\n            len += 3;\n    }\n    return len;\n}\nexports.utf8Length = utf8Length;\n/**\n * Reads UTF8 bytes as a string.\n * @param {Uint8Array} buffer Source buffer\n * @param {number} start Source start\n * @param {number} end Source end\n * @returns {string} String read\n */\nfunction utf8Read(buffer, start, end) {\n    const len = end - start;\n    if (len < 1)\n        return \"\";\n    const chunk = [];\n    let parts = [], i = 0, // char offset\n    t; // temporary\n    while (start < end) {\n        t = buffer[start++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = ((t & 31) << 6) | (buffer[start++] & 63);\n        else if (t > 239 && t < 365) {\n            t =\n                (((t & 7) << 18) |\n                    ((buffer[start++] & 63) << 12) |\n                    ((buffer[start++] & 63) << 6) |\n                    (buffer[start++] & 63)) -\n                    0x10000;\n            chunk[i++] = 0xd800 + (t >> 10);\n            chunk[i++] = 0xdc00 + (t & 1023);\n        }\n        else\n            chunk[i++] = ((t & 15) << 12) | ((buffer[start++] & 63) << 6) | (buffer[start++] & 63);\n        if (i > 8191) {\n            (parts || (parts = [])).push(String.fromCharCode(...chunk));\n            i = 0;\n        }\n    }\n    if (parts) {\n        if (i)\n            parts.push(String.fromCharCode(...chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return String.fromCharCode(...chunk.slice(0, i));\n}\nexports.utf8Read = utf8Read;\n/**\n * Writes a string as UTF8 bytes.\n * @param {string} string Source string\n * @param {Uint8Array} buffer Destination buffer\n * @param {number} offset Destination offset\n * @returns {number} Bytes written\n */\nfunction utf8Write(str, buffer, offset) {\n    const start = offset;\n    let c1, // character 1\n    c2; // character 2\n    for (let i = 0; i < str.length; ++i) {\n        c1 = str.charCodeAt(i);\n        if (c1 < 128) {\n            buffer[offset++] = c1;\n        }\n        else if (c1 < 2048) {\n            buffer[offset++] = (c1 >> 6) | 192;\n            buffer[offset++] = (c1 & 63) | 128;\n        }\n        else if ((c1 & 0xfc00) === 0xd800 && ((c2 = str.charCodeAt(i + 1)) & 0xfc00) === 0xdc00) {\n            c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);\n            ++i;\n            buffer[offset++] = (c1 >> 18) | 240;\n            buffer[offset++] = ((c1 >> 12) & 63) | 128;\n            buffer[offset++] = ((c1 >> 6) & 63) | 128;\n            buffer[offset++] = (c1 & 63) | 128;\n        }\n        else {\n            buffer[offset++] = (c1 >> 12) | 224;\n            buffer[offset++] = ((c1 >> 6) & 63) | 128;\n            buffer[offset++] = (c1 & 63) | 128;\n        }\n    }\n    return offset - start;\n}\nexports.utf8Write = utf8Write;\n//# sourceMappingURL=utf8.js.map",
    "\"use strict\";\n/* eslint-disable */\n/**\n * This file and any referenced files were automatically generated by @cosmology/telescope@1.0.7\n * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n * and run the transpile command or yarn proto command to regenerate this bundle.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.writeByte = exports.writeFixed32 = exports.int64Length = exports.writeVarint64 = exports.writeVarint32 = exports.readInt32 = exports.readUInt32 = exports.zzDecode = exports.zzEncode = exports.varint32read = exports.varint32write = exports.uInt64ToString = exports.int64ToString = exports.int64FromString = exports.varint64write = exports.varint64read = void 0;\n// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [1]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nfunction varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0f) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7f) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error(\"invalid varint\");\n}\nexports.varint64read = varint64read;\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nfunction varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !(shift >>> 7 == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0f) | ((hi & 0x07) << 4);\n    const hasMoreBits = !(hi >> 3 == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !(shift >>> 7 == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\nexports.varint64write = varint64write;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64FromString(dec) {\n    // Check for minus sign.\n    const minus = dec[0] === \"-\";\n    if (minus) {\n        dec = dec.slice(1);\n    }\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\n}\nexports.int64FromString = int64FromString;\n/**\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction int64ToString(lo, hi) {\n    let bits = newBits(lo, hi);\n    // If we're treating the input as a signed value and the high bit is set, do\n    // a manual two's complement conversion before the decimal conversion.\n    const negative = bits.hi & 0x80000000;\n    if (negative) {\n        bits = negate(bits.lo, bits.hi);\n    }\n    const result = uInt64ToString(bits.lo, bits.hi);\n    return negative ? \"-\" + result : result;\n}\nexports.int64ToString = int64ToString;\n/**\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\n * into a decimal string.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\n */\nfunction uInt64ToString(lo, hi) {\n    ({ lo, hi } = toUnsigned(lo, hi));\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\n    // highBits <= 0x1FFFFF can be safely expressed with a double and retain\n    // integer precision.\n    // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\n    if (hi <= 0x1fffff) {\n        return String(TWO_PWR_32_DBL * hi + lo);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    const low = lo & 0xffffff;\n    const mid = ((lo >>> 24) | (hi << 8)) & 0xffffff;\n    const high = (hi >> 16) & 0xffff;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + mid * 6777216 + high * 6710656;\n    let digitB = mid + high * 8147497;\n    let digitC = high * 2;\n    // Apply carries from A to B and from B to C.\n    const base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // If digitC is 0, then we should have returned in the trivial code path\n    // at the top for non-safe integers. Given this, we can assume both digitB\n    // and digitA need leading zeros.\n    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\n}\nexports.uInt64ToString = uInt64ToString;\nfunction toUnsigned(lo, hi) {\n    return { lo: lo >>> 0, hi: hi >>> 0 };\n}\nfunction newBits(lo, hi) {\n    return { lo: lo | 0, hi: hi | 0 };\n}\n/**\n * Returns two's compliment negation of input.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\n */\nfunction negate(lowBits, highBits) {\n    highBits = ~highBits;\n    if (lowBits) {\n        lowBits = ~lowBits + 1;\n    }\n    else {\n        // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\n        // adding 1 to that, results in 0x100000000, which leaves\n        // the low bits 0x0 and simply adds one to the high bits.\n        highBits += 1;\n    }\n    return newBits(lowBits, highBits);\n}\n/**\n * Returns decimal representation of digit1e7 with leading zeros.\n */\nconst decimalFrom1e7WithLeadingZeros = (digit1e7) => {\n    const partial = String(digit1e7);\n    return \"0000000\".slice(partial.length) + partial;\n};\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nfunction varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push((value & 127) | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\nexports.varint32write = varint32write;\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nfunction varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7f;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7f) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0f) << 28;\n    for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error(\"invalid varint\");\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\nexports.varint32read = varint32read;\n/**\n * encode zig zag\n */\nfunction zzEncode(lo, hi) {\n    let mask = hi >> 31;\n    hi = (((hi << 1) | (lo >>> 31)) ^ mask) >>> 0;\n    lo = ((lo << 1) ^ mask) >>> 0;\n    return [lo, hi];\n}\nexports.zzEncode = zzEncode;\n/**\n * decode zig zag\n */\nfunction zzDecode(lo, hi) {\n    let mask = -(lo & 1);\n    lo = (((lo >>> 1) | (hi << 31)) ^ mask) >>> 0;\n    hi = ((hi >>> 1) ^ mask) >>> 0;\n    return [lo, hi];\n}\nexports.zzDecode = zzDecode;\n/**\n * unsigned int32 without moving pos.\n */\nfunction readUInt32(buf, pos) {\n    return (buf[pos] | (buf[pos + 1] << 8) | (buf[pos + 2] << 16)) + buf[pos + 3] * 0x1000000;\n}\nexports.readUInt32 = readUInt32;\n/**\n * signed int32 without moving pos.\n */\nfunction readInt32(buf, pos) {\n    return (buf[pos] | (buf[pos + 1] << 8) | (buf[pos + 2] << 16)) + (buf[pos + 3] << 24);\n}\nexports.readInt32 = readInt32;\n/**\n * writing varint32 to pos\n */\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = (val & 127) | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\nexports.writeVarint32 = writeVarint32;\n/**\n * writing varint64 to pos\n */\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = (val.lo & 127) | 128;\n        val.lo = ((val.lo >>> 7) | (val.hi << 25)) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = (val.lo & 127) | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\nexports.writeVarint64 = writeVarint64;\nfunction int64Length(lo, hi) {\n    let part0 = lo, part1 = ((lo >>> 28) | (hi << 4)) >>> 0, part2 = hi >>> 24;\n    return part2 === 0\n        ? part1 === 0\n            ? part0 < 16384\n                ? part0 < 128\n                    ? 1\n                    : 2\n                : part0 < 2097152\n                    ? 3\n                    : 4\n            : part1 < 16384\n                ? part1 < 128\n                    ? 5\n                    : 6\n                : part1 < 2097152\n                    ? 7\n                    : 8\n        : part2 < 128\n            ? 9\n            : 10;\n}\nexports.int64Length = int64Length;\nfunction writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = (val >>> 8) & 255;\n    buf[pos + 2] = (val >>> 16) & 255;\n    buf[pos + 3] = val >>> 24;\n}\nexports.writeFixed32 = writeFixed32;\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\nexports.writeByte = writeByte;\n//# sourceMappingURL=varint.js.map",
    "\"use strict\";\n/* eslint-disable */\n/**\n * This file and any referenced files were automatically generated by @cosmology/telescope@1.0.7\n * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n * and run the transpile command or yarn proto command to regenerate this bundle.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BinaryWriter = exports.BinaryReader = exports.WireType = void 0;\n// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// ---\n// Code generated by the command line utilities is owned by the owner\n// of the input file used when generating it. This code is not\n// standalone and requires a support library to be linked with it. This\n// support library is itself covered by the above license.\nconst utf8_1 = require(\"./utf8\");\nconst varint_1 = require(\"./varint\");\nvar WireType;\n(function (WireType) {\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    WireType[WireType[\"Fixed64\"] = 1] = \"Fixed64\";\n    WireType[WireType[\"Bytes\"] = 2] = \"Bytes\";\n    WireType[WireType[\"Fixed32\"] = 5] = \"Fixed32\";\n})(WireType || (exports.WireType = WireType = {}));\nclass BinaryReader {\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    constructor(buf) {\n        this.buf = buf ? new Uint8Array(buf) : new Uint8Array(0);\n        this.pos = 0;\n        this.type = 0;\n        this.len = this.buf.length;\n    }\n    tag() {\n        const tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType, tag];\n    }\n    skip(length) {\n        if (typeof length === \"number\") {\n            if (this.pos + length > this.len)\n                throw indexOutOfRange(this, length);\n            this.pos += length;\n        }\n        else {\n            do {\n                if (this.pos >= this.len)\n                    throw indexOutOfRange(this);\n            } while (this.buf[this.pos++] & 128);\n        }\n        return this;\n    }\n    skipType(wireType) {\n        switch (wireType) {\n            case WireType.Varint:\n                this.skip();\n                break;\n            case WireType.Fixed64:\n                this.skip(8);\n                break;\n            case WireType.Bytes:\n                this.skip(this.uint32());\n                break;\n            case 3:\n                while ((wireType = this.uint32() & 7) !== 4) {\n                    this.skipType(wireType);\n                }\n                break;\n            case WireType.Fixed32:\n                this.skip(4);\n                break;\n            /* istanbul ignore next */\n            default:\n                throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n        }\n        return this;\n    }\n    uint32() {\n        return varint_1.varint32read.bind(this)();\n    }\n    int32() {\n        return this.uint32() | 0;\n    }\n    sint32() {\n        const num = this.uint32();\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n    }\n    fixed32() {\n        const val = (0, varint_1.readUInt32)(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    }\n    sfixed32() {\n        const val = (0, varint_1.readInt32)(this.buf, this.pos);\n        this.pos += 4;\n        return val;\n    }\n    int64() {\n        const [lo, hi] = varint_1.varint64read.bind(this)();\n        return BigInt((0, varint_1.int64ToString)(lo, hi));\n    }\n    uint64() {\n        const [lo, hi] = varint_1.varint64read.bind(this)();\n        return BigInt((0, varint_1.uInt64ToString)(lo, hi));\n    }\n    sint64() {\n        let [lo, hi] = varint_1.varint64read.bind(this)();\n        // zig zag\n        [lo, hi] = (0, varint_1.zzDecode)(lo, hi);\n        return BigInt((0, varint_1.int64ToString)(lo, hi));\n    }\n    fixed64() {\n        const lo = this.sfixed32();\n        const hi = this.sfixed32();\n        return BigInt((0, varint_1.uInt64ToString)(lo, hi));\n    }\n    sfixed64() {\n        const lo = this.sfixed32();\n        const hi = this.sfixed32();\n        return BigInt((0, varint_1.int64ToString)(lo, hi));\n    }\n    float() {\n        throw new Error(\"float not supported\");\n    }\n    double() {\n        throw new Error(\"double not supported\");\n    }\n    bool() {\n        const [lo, hi] = varint_1.varint64read.bind(this)();\n        return lo !== 0 || hi !== 0;\n    }\n    bytes() {\n        const len = this.uint32(), start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    string() {\n        const bytes = this.bytes();\n        return (0, utf8_1.utf8Read)(bytes, 0, bytes.length);\n    }\n}\nexports.BinaryReader = BinaryReader;\nclass Op {\n    constructor(fn, len, val) {\n        this.fn = fn;\n        this.len = len;\n        this.val = val;\n    }\n    proceed(buf, pos) {\n        if (this.fn) {\n            this.fn(this.val, buf, pos);\n        }\n    }\n}\nclass State {\n    constructor(writer) {\n        this.head = writer.head;\n        this.tail = writer.tail;\n        this.len = writer.len;\n        this.next = writer.states;\n    }\n}\nclass BinaryWriter {\n    constructor() {\n        this.len = 0;\n        // uint64 is the same with int64\n        this.uint64 = BinaryWriter.prototype.int64;\n        // sfixed64 is the same with fixed64\n        this.sfixed64 = BinaryWriter.prototype.fixed64;\n        // sfixed32 is the same with fixed32\n        this.sfixed32 = BinaryWriter.prototype.fixed32;\n        this.head = new Op(null, 0, 0);\n        this.tail = this.head;\n        this.states = null;\n    }\n    static create() {\n        return new BinaryWriter();\n    }\n    static alloc(size) {\n        if (typeof Uint8Array !== \"undefined\") {\n            return pool((size) => new Uint8Array(size), Uint8Array.prototype.subarray)(size);\n        }\n        else {\n            return new Array(size);\n        }\n    }\n    _push(fn, len, val) {\n        this.tail = this.tail.next = new Op(fn, len, val);\n        this.len += len;\n        return this;\n    }\n    finish() {\n        let head = this.head.next, pos = 0;\n        const buf = BinaryWriter.alloc(this.len);\n        while (head) {\n            head.proceed(buf, pos);\n            pos += head.len;\n            head = head.next;\n        }\n        return buf;\n    }\n    fork() {\n        this.states = new State(this);\n        this.head = this.tail = new Op(null, 0, 0);\n        this.len = 0;\n        return this;\n    }\n    reset() {\n        if (this.states) {\n            this.head = this.states.head;\n            this.tail = this.states.tail;\n            this.len = this.states.len;\n            this.states = this.states.next;\n        }\n        else {\n            this.head = this.tail = new Op(null, 0, 0);\n            this.len = 0;\n        }\n        return this;\n    }\n    ldelim() {\n        const head = this.head, tail = this.tail, len = this.len;\n        this.reset().uint32(len);\n        if (len) {\n            this.tail.next = head.next; // skip noop\n            this.tail = tail;\n            this.len += len;\n        }\n        return this;\n    }\n    tag(fieldNo, type) {\n        return this.uint32(((fieldNo << 3) | type) >>> 0);\n    }\n    uint32(value) {\n        this.len += (this.tail = this.tail.next =\n            new Op(varint_1.writeVarint32, (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n        return this;\n    }\n    int32(value) {\n        return value < 0\n            ? this._push(varint_1.writeVarint64, 10, (0, varint_1.int64FromString)(value.toString())) // 10 bytes per spec\n            : this.uint32(value);\n    }\n    sint32(value) {\n        return this.uint32(((value << 1) ^ (value >> 31)) >>> 0);\n    }\n    int64(value) {\n        const { lo, hi } = (0, varint_1.int64FromString)(value.toString());\n        return this._push(varint_1.writeVarint64, (0, varint_1.int64Length)(lo, hi), { lo, hi });\n    }\n    sint64(value) {\n        let { lo, hi } = (0, varint_1.int64FromString)(value.toString());\n        // zig zag\n        [lo, hi] = (0, varint_1.zzEncode)(lo, hi);\n        return this._push(varint_1.writeVarint64, (0, varint_1.int64Length)(lo, hi), { lo, hi });\n    }\n    fixed64(value) {\n        const { lo, hi } = (0, varint_1.int64FromString)(value.toString());\n        return this._push(varint_1.writeFixed32, 4, lo)._push(varint_1.writeFixed32, 4, hi);\n    }\n    bool(value) {\n        return this._push(varint_1.writeByte, 1, value ? 1 : 0);\n    }\n    fixed32(value) {\n        return this._push(varint_1.writeFixed32, 4, value >>> 0);\n    }\n    float(value) {\n        throw new Error(\"float not supported\" + value);\n    }\n    double(value) {\n        throw new Error(\"double not supported\" + value);\n    }\n    bytes(value) {\n        const len = value.length >>> 0;\n        if (!len)\n            return this._push(varint_1.writeByte, 1, 0);\n        return this.uint32(len)._push(writeBytes, len, value);\n    }\n    string(value) {\n        const len = (0, utf8_1.utf8Length)(value);\n        return len ? this.uint32(len)._push(utf8_1.utf8Write, len, value) : this._push(varint_1.writeByte, 1, 0);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction writeBytes(val, buf, pos) {\n    if (typeof Uint8Array !== \"undefined\") {\n        buf.set(val, pos);\n    }\n    else {\n        for (let i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    }\n}\nfunction pool(alloc, slice, size) {\n    const SIZE = size || 8192;\n    const MAX = SIZE >>> 1;\n    let slab = null;\n    let offset = SIZE;\n    return function pool_alloc(size) {\n        if (size < 1 || size > MAX)\n            return alloc(size);\n        if (offset + size > SIZE) {\n            slab = alloc(SIZE);\n            offset = 0;\n        }\n        const buf = slice.call(slab, offset, (offset += size));\n        if (offset & 7)\n            // align to 32 bit\n            offset = (offset | 7) + 1;\n        return buf;\n    };\n}\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n//# sourceMappingURL=binary.js.map",
    "\"use strict\";\n/* eslint-disable */\n/**\n * This file and any referenced files were automatically generated by @cosmology/telescope@1.0.7\n * DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n * and run the transpile command or yarn proto command to regenerate this bundle.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromJsonTimestamp = exports.fromTimestamp = exports.toTimestamp = exports.setPaginationParams = exports.isObject = exports.isSet = exports.fromDuration = exports.toDuration = exports.omitDefault = exports.base64FromBytes = exports.bytesFromBase64 = void 0;\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nexports.bytesFromBase64 = bytesFromBase64;\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    arr.forEach((byte) => {\n        bin.push(String.fromCharCode(byte));\n    });\n    return btoa(bin.join(\"\"));\n}\nexports.base64FromBytes = base64FromBytes;\nfunction omitDefault(input) {\n    if (typeof input === \"string\") {\n        return input === \"\" ? undefined : input;\n    }\n    if (typeof input === \"number\") {\n        return input === 0 ? undefined : input;\n    }\n    if (typeof input === \"bigint\") {\n        return input === BigInt(0) ? undefined : input;\n    }\n    throw new Error(`Got unsupported type ${typeof input}`);\n}\nexports.omitDefault = omitDefault;\nfunction toDuration(duration) {\n    return {\n        seconds: BigInt(Math.floor(parseInt(duration) / 1000000000)),\n        nanos: parseInt(duration) % 1000000000,\n    };\n}\nexports.toDuration = toDuration;\nfunction fromDuration(duration) {\n    return (parseInt(duration.seconds.toString()) * 1000000000 + duration.nanos).toString();\n}\nexports.fromDuration = fromDuration;\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\nexports.isSet = isSet;\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nexports.isObject = isObject;\nconst setPaginationParams = (options, pagination) => {\n    if (!pagination) {\n        return options;\n    }\n    if (typeof pagination?.countTotal !== \"undefined\") {\n        options.params[\"pagination.count_total\"] = pagination.countTotal;\n    }\n    if (typeof pagination?.key !== \"undefined\") {\n        // String to Uint8Array\n        // let uint8arr = new Uint8Array(Buffer.from(data,'base64'));\n        // Uint8Array to String\n        options.params[\"pagination.key\"] = Buffer.from(pagination.key).toString(\"base64\");\n    }\n    if (typeof pagination?.limit !== \"undefined\") {\n        options.params[\"pagination.limit\"] = pagination.limit.toString();\n    }\n    if (typeof pagination?.offset !== \"undefined\") {\n        options.params[\"pagination.offset\"] = pagination.offset.toString();\n    }\n    if (typeof pagination?.reverse !== \"undefined\") {\n        options.params[\"pagination.reverse\"] = pagination.reverse;\n    }\n    return options;\n};\nexports.setPaginationParams = setPaginationParams;\nfunction toTimestamp(date) {\n    const seconds = numberToLong(date.getTime() / 1000);\n    const nanos = (date.getTime() % 1000) * 1000000;\n    return {\n        seconds,\n        nanos,\n    };\n}\nexports.toTimestamp = toTimestamp;\nfunction fromTimestamp(t) {\n    let millis = Number(t.seconds) * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nexports.fromTimestamp = fromTimestamp;\nconst timestampFromJSON = (object) => {\n    return {\n        seconds: isSet(object.seconds) ? BigInt(object.seconds.toString()) : BigInt(0),\n        nanos: isSet(object.nanos) ? Number(object.nanos) : 0,\n    };\n};\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return toTimestamp(o);\n    }\n    else if (typeof o === \"string\") {\n        return toTimestamp(new Date(o));\n    }\n    else {\n        return timestampFromJSON(o);\n    }\n}\nexports.fromJsonTimestamp = fromJsonTimestamp;\nfunction numberToLong(number) {\n    return BigInt(Math.trunc(number));\n}\n//# sourceMappingURL=helpers.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CompactBitArray = exports.MultiSignature = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst binary_1 = require(\"../../../../binary\");\nconst helpers_1 = require(\"../../../../helpers\");\nexports.protobufPackage = \"cosmos.crypto.multisig.v1beta1\";\nfunction createBaseMultiSignature() {\n    return {\n        signatures: [],\n    };\n}\nexports.MultiSignature = {\n    typeUrl: \"/cosmos.crypto.multisig.v1beta1.MultiSignature\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.signatures) {\n            writer.uint32(10).bytes(v);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMultiSignature();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(reader.bytes());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseMultiSignature();\n        if (Array.isArray(object?.signatures))\n            obj.signatures = object.signatures.map((e) => (0, helpers_1.bytesFromBase64)(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (0, helpers_1.base64FromBytes)(e !== undefined ? e : new Uint8Array()));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseMultiSignature();\n        message.signatures = object.signatures?.map((e) => e) || [];\n        return message;\n    },\n};\nfunction createBaseCompactBitArray() {\n    return {\n        extraBitsStored: 0,\n        elems: new Uint8Array(),\n    };\n}\nexports.CompactBitArray = {\n    typeUrl: \"/cosmos.crypto.multisig.v1beta1.CompactBitArray\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.extraBitsStored !== 0) {\n            writer.uint32(8).uint32(message.extraBitsStored);\n        }\n        if (message.elems.length !== 0) {\n            writer.uint32(18).bytes(message.elems);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompactBitArray();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.extraBitsStored = reader.uint32();\n                    break;\n                case 2:\n                    message.elems = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseCompactBitArray();\n        if ((0, helpers_1.isSet)(object.extraBitsStored))\n            obj.extraBitsStored = Number(object.extraBitsStored);\n        if ((0, helpers_1.isSet)(object.elems))\n            obj.elems = (0, helpers_1.bytesFromBase64)(object.elems);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.extraBitsStored !== undefined && (obj.extraBitsStored = Math.round(message.extraBitsStored));\n        message.elems !== undefined &&\n            (obj.elems = (0, helpers_1.base64FromBytes)(message.elems !== undefined ? message.elems : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseCompactBitArray();\n        message.extraBitsStored = object.extraBitsStored ?? 0;\n        message.elems = object.elems ?? new Uint8Array();\n        return message;\n    },\n};\n//# sourceMappingURL=multisig.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Any = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst binary_1 = require(\"../../binary\");\nconst helpers_1 = require(\"../../helpers\");\nexports.protobufPackage = \"google.protobuf\";\nfunction createBaseAny() {\n    return {\n        typeUrl: \"\",\n        value: new Uint8Array(),\n    };\n}\nexports.Any = {\n    typeUrl: \"/google.protobuf.Any\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.typeUrl !== \"\") {\n            writer.uint32(10).string(message.typeUrl);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAny();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.typeUrl = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseAny();\n        if ((0, helpers_1.isSet)(object.typeUrl))\n            obj.typeUrl = String(object.typeUrl);\n        if ((0, helpers_1.isSet)(object.value))\n            obj.value = (0, helpers_1.bytesFromBase64)(object.value);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);\n        message.value !== undefined &&\n            (obj.value = (0, helpers_1.base64FromBytes)(message.value !== undefined ? message.value : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseAny();\n        message.typeUrl = object.typeUrl ?? \"\";\n        message.value = object.value ?? new Uint8Array();\n        return message;\n    },\n};\n//# sourceMappingURL=any.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureDescriptor_Data_Multi = exports.SignatureDescriptor_Data_Single = exports.SignatureDescriptor_Data = exports.SignatureDescriptor = exports.SignatureDescriptors = exports.signModeToJSON = exports.signModeFromJSON = exports.SignMode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst multisig_1 = require(\"../../../crypto/multisig/v1beta1/multisig\");\nconst any_1 = require(\"../../../../google/protobuf/any\");\nconst binary_1 = require(\"../../../../binary\");\nconst helpers_1 = require(\"../../../../helpers\");\nexports.protobufPackage = \"cosmos.tx.signing.v1beta1\";\n/**\n * SignMode represents a signing mode with its own security guarantees.\n *\n * This enum should be considered a registry of all known sign modes\n * in the Cosmos ecosystem. Apps are not expected to support all known\n * sign modes. Apps that would like to support custom  sign modes are\n * encouraged to open a small PR against this file to add a new case\n * to this SignMode enum describing their sign mode so that different\n * apps have a consistent version of this enum.\n */\nvar SignMode;\n(function (SignMode) {\n    /**\n     * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n     * rejected.\n     */\n    SignMode[SignMode[\"SIGN_MODE_UNSPECIFIED\"] = 0] = \"SIGN_MODE_UNSPECIFIED\";\n    /**\n     * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n     * verified with raw bytes from Tx.\n     */\n    SignMode[SignMode[\"SIGN_MODE_DIRECT\"] = 1] = \"SIGN_MODE_DIRECT\";\n    /**\n     * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n     * human-readable textual representation on top of the binary representation\n     * from SIGN_MODE_DIRECT. It is currently not supported.\n     */\n    SignMode[SignMode[\"SIGN_MODE_TEXTUAL\"] = 2] = \"SIGN_MODE_TEXTUAL\";\n    /**\n     * SIGN_MODE_DIRECT_AUX - SIGN_MODE_DIRECT_AUX specifies a signing mode which uses\n     * SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not\n     * require signers signing over other signers' `signer_info`. It also allows\n     * for adding Tips in transactions.\n     *\n     * Since: cosmos-sdk 0.46\n     */\n    SignMode[SignMode[\"SIGN_MODE_DIRECT_AUX\"] = 3] = \"SIGN_MODE_DIRECT_AUX\";\n    /**\n     * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n     * Amino JSON and will be removed in the future.\n     */\n    SignMode[SignMode[\"SIGN_MODE_LEGACY_AMINO_JSON\"] = 127] = \"SIGN_MODE_LEGACY_AMINO_JSON\";\n    /**\n     * SIGN_MODE_EIP_191 - SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos\n     * SDK. Ref: https://eips.ethereum.org/EIPS/eip-191\n     *\n     * Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,\n     * but is not implemented on the SDK by default. To enable EIP-191, you need\n     * to pass a custom `TxConfig` that has an implementation of\n     * `SignModeHandler` for EIP-191. The SDK may decide to fully support\n     * EIP-191 in the future.\n     *\n     * Since: cosmos-sdk 0.45.2\n     */\n    SignMode[SignMode[\"SIGN_MODE_EIP_191\"] = 191] = \"SIGN_MODE_EIP_191\";\n    SignMode[SignMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignMode || (exports.SignMode = SignMode = {}));\nfunction signModeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGN_MODE_UNSPECIFIED\":\n            return SignMode.SIGN_MODE_UNSPECIFIED;\n        case 1:\n        case \"SIGN_MODE_DIRECT\":\n            return SignMode.SIGN_MODE_DIRECT;\n        case 2:\n        case \"SIGN_MODE_TEXTUAL\":\n            return SignMode.SIGN_MODE_TEXTUAL;\n        case 3:\n        case \"SIGN_MODE_DIRECT_AUX\":\n            return SignMode.SIGN_MODE_DIRECT_AUX;\n        case 127:\n        case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n            return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        case 191:\n        case \"SIGN_MODE_EIP_191\":\n            return SignMode.SIGN_MODE_EIP_191;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignMode.UNRECOGNIZED;\n    }\n}\nexports.signModeFromJSON = signModeFromJSON;\nfunction signModeToJSON(object) {\n    switch (object) {\n        case SignMode.SIGN_MODE_UNSPECIFIED:\n            return \"SIGN_MODE_UNSPECIFIED\";\n        case SignMode.SIGN_MODE_DIRECT:\n            return \"SIGN_MODE_DIRECT\";\n        case SignMode.SIGN_MODE_TEXTUAL:\n            return \"SIGN_MODE_TEXTUAL\";\n        case SignMode.SIGN_MODE_DIRECT_AUX:\n            return \"SIGN_MODE_DIRECT_AUX\";\n        case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n            return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n        case SignMode.SIGN_MODE_EIP_191:\n            return \"SIGN_MODE_EIP_191\";\n        case SignMode.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nexports.signModeToJSON = signModeToJSON;\nfunction createBaseSignatureDescriptors() {\n    return {\n        signatures: [],\n    };\n}\nexports.SignatureDescriptors = {\n    typeUrl: \"/cosmos.tx.signing.v1beta1.SignatureDescriptors\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptors();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(exports.SignatureDescriptor.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseSignatureDescriptors();\n        if (Array.isArray(object?.signatures))\n            obj.signatures = object.signatures.map((e) => exports.SignatureDescriptor.fromJSON(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor.toJSON(e) : undefined));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptors();\n        message.signatures = object.signatures?.map((e) => exports.SignatureDescriptor.fromPartial(e)) || [];\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor() {\n    return {\n        publicKey: undefined,\n        data: undefined,\n        sequence: BigInt(0),\n    };\n}\nexports.SignatureDescriptor = {\n    typeUrl: \"/cosmos.tx.signing.v1beta1.SignatureDescriptor\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.publicKey !== undefined) {\n            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.data !== undefined) {\n            exports.SignatureDescriptor_Data.encode(message.data, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.sequence !== BigInt(0)) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = exports.SignatureDescriptor_Data.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseSignatureDescriptor();\n        if ((0, helpers_1.isSet)(object.publicKey))\n            obj.publicKey = any_1.Any.fromJSON(object.publicKey);\n        if ((0, helpers_1.isSet)(object.data))\n            obj.data = exports.SignatureDescriptor_Data.fromJSON(object.data);\n        if ((0, helpers_1.isSet)(object.sequence))\n            obj.sequence = BigInt(object.sequence.toString());\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);\n        message.data !== undefined &&\n            (obj.data = message.data ? exports.SignatureDescriptor_Data.toJSON(message.data) : undefined);\n        message.sequence !== undefined && (obj.sequence = (message.sequence || BigInt(0)).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptor();\n        if (object.publicKey !== undefined && object.publicKey !== null) {\n            message.publicKey = any_1.Any.fromPartial(object.publicKey);\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = exports.SignatureDescriptor_Data.fromPartial(object.data);\n        }\n        if (object.sequence !== undefined && object.sequence !== null) {\n            message.sequence = BigInt(object.sequence.toString());\n        }\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data() {\n    return {\n        single: undefined,\n        multi: undefined,\n    };\n}\nexports.SignatureDescriptor_Data = {\n    typeUrl: \"/cosmos.tx.signing.v1beta1.Data\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.single !== undefined) {\n            exports.SignatureDescriptor_Data_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.multi !== undefined) {\n            exports.SignatureDescriptor_Data_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.single = exports.SignatureDescriptor_Data_Single.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.multi = exports.SignatureDescriptor_Data_Multi.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseSignatureDescriptor_Data();\n        if ((0, helpers_1.isSet)(object.single))\n            obj.single = exports.SignatureDescriptor_Data_Single.fromJSON(object.single);\n        if ((0, helpers_1.isSet)(object.multi))\n            obj.multi = exports.SignatureDescriptor_Data_Multi.fromJSON(object.multi);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.single !== undefined &&\n            (obj.single = message.single ? exports.SignatureDescriptor_Data_Single.toJSON(message.single) : undefined);\n        message.multi !== undefined &&\n            (obj.multi = message.multi ? exports.SignatureDescriptor_Data_Multi.toJSON(message.multi) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptor_Data();\n        if (object.single !== undefined && object.single !== null) {\n            message.single = exports.SignatureDescriptor_Data_Single.fromPartial(object.single);\n        }\n        if (object.multi !== undefined && object.multi !== null) {\n            message.multi = exports.SignatureDescriptor_Data_Multi.fromPartial(object.multi);\n        }\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data_Single() {\n    return {\n        mode: 0,\n        signature: new Uint8Array(),\n    };\n}\nexports.SignatureDescriptor_Data_Single = {\n    typeUrl: \"/cosmos.tx.signing.v1beta1.Single\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.mode !== 0) {\n            writer.uint32(8).int32(message.mode);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(18).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data_Single();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                case 2:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseSignatureDescriptor_Data_Single();\n        if ((0, helpers_1.isSet)(object.mode))\n            obj.mode = signModeFromJSON(object.mode);\n        if ((0, helpers_1.isSet)(object.signature))\n            obj.signature = (0, helpers_1.bytesFromBase64)(object.signature);\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n        message.signature !== undefined &&\n            (obj.signature = (0, helpers_1.base64FromBytes)(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptor_Data_Single();\n        message.mode = object.mode ?? 0;\n        message.signature = object.signature ?? new Uint8Array();\n        return message;\n    },\n};\nfunction createBaseSignatureDescriptor_Data_Multi() {\n    return {\n        bitarray: undefined,\n        signatures: [],\n    };\n}\nexports.SignatureDescriptor_Data_Multi = {\n    typeUrl: \"/cosmos.tx.signing.v1beta1.Multi\",\n    encode(message, writer = binary_1.BinaryWriter.create()) {\n        if (message.bitarray !== undefined) {\n            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor_Data.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignatureDescriptor_Data_Multi();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signatures.push(exports.SignatureDescriptor_Data.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const obj = createBaseSignatureDescriptor_Data_Multi();\n        if ((0, helpers_1.isSet)(object.bitarray))\n            obj.bitarray = multisig_1.CompactBitArray.fromJSON(object.bitarray);\n        if (Array.isArray(object?.signatures))\n            obj.signatures = object.signatures.map((e) => exports.SignatureDescriptor_Data.fromJSON(e));\n        return obj;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bitarray !== undefined &&\n            (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor_Data.toJSON(e) : undefined));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = createBaseSignatureDescriptor_Data_Multi();\n        if (object.bitarray !== undefined && object.bitarray !== null) {\n            message.bitarray = multisig_1.CompactBitArray.fromPartial(object.bitarray);\n        }\n        message.signatures = object.signatures?.map((e) => exports.SignatureDescriptor_Data.fromPartial(e)) || [];\n        return message;\n    },\n};\n//# sourceMappingURL=signing.js.map"
  ],
  "mappings": "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",
  "debugId": "319222AFA5F5788C64756E2164756E21",
  "names": []
}