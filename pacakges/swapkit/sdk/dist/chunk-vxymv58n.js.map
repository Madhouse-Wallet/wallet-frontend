{
  "version": 3,
  "sources": ["../../../../node_modules/@cosmjs/amino/build/pubkeys.js", "../../../../node_modules/@cosmjs/amino/build/encoding.js", "../../../../node_modules/@cosmjs/amino/build/addresses.js", "../../../../node_modules/@cosmjs/amino/build/coins.js", "../../../../node_modules/@cosmjs/amino/build/multisig.js", "../../../../node_modules/@cosmjs/amino/build/omitdefault.js", "../../../../node_modules/@cosmjs/amino/build/paths.js", "../../../../node_modules/@cosmjs/amino/build/signature.js", "../../../../node_modules/@cosmjs/amino/build/signdoc.js", "../../../../node_modules/@cosmjs/amino/build/wallet.js", "../../../../node_modules/@cosmjs/amino/build/secp256k1hdwallet.js", "../../../../node_modules/@cosmjs/amino/build/secp256k1wallet.js", "../../../../node_modules/@cosmjs/amino/build/stdtx.js", "../../../../node_modules/@cosmjs/amino/build/index.js"],
  "sourcesContent": [
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isMultisigThresholdPubkey = exports.isSinglePubkey = exports.pubkeyType = exports.isSecp256k1Pubkey = exports.isEd25519Pubkey = void 0;\nfunction isEd25519Pubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeyEd25519\";\n}\nexports.isEd25519Pubkey = isEd25519Pubkey;\nfunction isSecp256k1Pubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeySecp256k1\";\n}\nexports.isSecp256k1Pubkey = isSecp256k1Pubkey;\nexports.pubkeyType = {\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/ed25519/ed25519.go#L22 */\n    secp256k1: \"tendermint/PubKeySecp256k1\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/secp256k1/secp256k1.go#L23 */\n    ed25519: \"tendermint/PubKeyEd25519\",\n    /** @see https://github.com/tendermint/tendermint/blob/v0.33.0/crypto/sr25519/codec.go#L12 */\n    sr25519: \"tendermint/PubKeySr25519\",\n    multisigThreshold: \"tendermint/PubKeyMultisigThreshold\",\n};\nfunction isSinglePubkey(pubkey) {\n    const singPubkeyTypes = [exports.pubkeyType.ed25519, exports.pubkeyType.secp256k1, exports.pubkeyType.sr25519];\n    return singPubkeyTypes.includes(pubkey.type);\n}\nexports.isSinglePubkey = isSinglePubkey;\nfunction isMultisigThresholdPubkey(pubkey) {\n    return pubkey.type === \"tendermint/PubKeyMultisigThreshold\";\n}\nexports.isMultisigThresholdPubkey = isMultisigThresholdPubkey;\n//# sourceMappingURL=pubkeys.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeEd25519Pubkey = exports.encodeSecp256k1Pubkey = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst pubkeys_1 = require(\"./pubkeys\");\n/**\n * Takes a Secp256k1 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeSecp256k1Pubkey(pubkey) {\n    if (pubkey.length !== 33 || (pubkey[0] !== 0x02 && pubkey[0] !== 0x03)) {\n        throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n    }\n    return {\n        type: pubkeys_1.pubkeyType.secp256k1,\n        value: (0, encoding_1.toBase64)(pubkey),\n    };\n}\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey;\n/**\n * Takes an Edd25519 public key as raw bytes and returns the Amino JSON\n * representation of it (the type/value wrapper object).\n */\nfunction encodeEd25519Pubkey(pubkey) {\n    if (pubkey.length !== 32) {\n        throw new Error(\"Ed25519 public key must be 32 bytes long\");\n    }\n    return {\n        type: pubkeys_1.pubkeyType.ed25519,\n        value: (0, encoding_1.toBase64)(pubkey),\n    };\n}\nexports.encodeEd25519Pubkey = encodeEd25519Pubkey;\n// As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\nconst pubkeyAminoPrefixSecp256k1 = (0, encoding_1.fromHex)(\"eb5ae987\" + \"21\" /* fixed length */);\nconst pubkeyAminoPrefixEd25519 = (0, encoding_1.fromHex)(\"1624de64\" + \"20\" /* fixed length */);\nconst pubkeyAminoPrefixSr25519 = (0, encoding_1.fromHex)(\"0dfb1005\" + \"20\" /* fixed length */);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\nconst pubkeyAminoPrefixMultisigThreshold = (0, encoding_1.fromHex)(\"22c1f7e2\" /* variable length not included */);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\nfunction decodeAminoPubkey(data) {\n    if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSecp256k1)) {\n        const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n        if (rest.length !== 33) {\n            throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.secp256k1,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixEd25519)) {\n        const rest = data.slice(pubkeyAminoPrefixEd25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.ed25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixSr25519)) {\n        const rest = data.slice(pubkeyAminoPrefixSr25519.length);\n        if (rest.length !== 32) {\n            throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n        }\n        return {\n            type: pubkeys_1.pubkeyType.sr25519,\n            value: (0, encoding_1.toBase64)(rest),\n        };\n    }\n    else if ((0, utils_1.arrayContentStartsWith)(data, pubkeyAminoPrefixMultisigThreshold)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return decodeMultisigPubkey(data);\n    }\n    else {\n        throw new Error(\"Unsupported public key type. Amino data starts with: \" + (0, encoding_1.toHex)(data.slice(0, 5)));\n    }\n}\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\nfunction decodeBech32Pubkey(bechEncoded) {\n    const { data } = (0, encoding_1.fromBech32)(bechEncoded);\n    return decodeAminoPubkey(data);\n}\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\nfunction decodeUvarint(reader) {\n    if (reader.length < 1) {\n        throw new Error(\"Can't decode varint. EOF\");\n    }\n    if (reader[0] > 127) {\n        throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n    }\n    return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\nfunction decodeMultisigPubkey(data) {\n    const reader = Array.from(data);\n    // remove multisig amino prefix;\n    const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n    if (!(0, utils_1.arrayContentStartsWith)(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n        throw new Error(\"Invalid multisig prefix.\");\n    }\n    // remove 0x08 threshold prefix;\n    if (reader.shift() != 0x08) {\n        throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n    }\n    // read threshold\n    const [threshold, thresholdBytesLength] = decodeUvarint(reader);\n    reader.splice(0, thresholdBytesLength);\n    // read participants pubkeys\n    const pubkeys = [];\n    while (reader.length > 0) {\n        // remove 0x12 threshold prefix;\n        if (reader.shift() != 0x12) {\n            throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n        }\n        // read pubkey length\n        const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);\n        reader.splice(0, pubkeyLengthBytesSize);\n        // verify that we can read pubkey\n        if (reader.length < pubkeyLength) {\n            throw new Error(\"Invalid multisig data length.\");\n        }\n        // read and decode participant pubkey\n        const encodedPubkey = reader.splice(0, pubkeyLength);\n        const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n        pubkeys.push(pubkey);\n    }\n    return {\n        type: pubkeys_1.pubkeyType.multisigThreshold,\n        value: {\n            threshold: threshold.toString(),\n            pubkeys: pubkeys,\n        },\n    };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\nfunction encodeUvarint(value) {\n    const checked = math_1.Uint53.fromString(value.toString()).toNumber();\n    if (checked > 127) {\n        throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n    }\n    return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\nfunction encodeAminoPubkey(pubkey) {\n    if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n        const out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n        out.push(0x08); // TODO: What is this?\n        out.push(...encodeUvarint(pubkey.value.threshold));\n        for (const pubkeyData of pubkey.value.pubkeys.map((p) => encodeAminoPubkey(p))) {\n            out.push(0x12); // TODO: What is this?\n            out.push(...encodeUvarint(pubkeyData.length));\n            out.push(...pubkeyData);\n        }\n        return new Uint8Array(out);\n    }\n    else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixEd25519, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n        return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...(0, encoding_1.fromBase64)(pubkey.value)]);\n    }\n    else {\n        throw new Error(\"Unsupported pubkey type\");\n    }\n}\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\nfunction encodeBech32Pubkey(pubkey, prefix) {\n    return (0, encoding_1.toBech32)(prefix, encodeAminoPubkey(pubkey));\n}\nexports.encodeBech32Pubkey = encodeBech32Pubkey;\n//# sourceMappingURL=encoding.js.map",
    "\"use strict\";\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 32) {\n        throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);\n    }\n    return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n}\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 33) {\n        throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);\n    }\n    return (0, crypto_1.ripemd160)((0, crypto_1.sha256)(pubkeyData));\n}\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\n// For secp256k1 this assumes we already have a compressed pubkey.\nfunction pubkeyToRawAddress(pubkey) {\n    if ((0, pubkeys_1.isSecp256k1Pubkey)(pubkey)) {\n        const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n        return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n    }\n    else if ((0, pubkeys_1.isEd25519Pubkey)(pubkey)) {\n        const pubkeyData = (0, encoding_1.fromBase64)(pubkey.value);\n        return rawEd25519PubkeyToRawAddress(pubkeyData);\n    }\n    else if ((0, pubkeys_1.isMultisigThresholdPubkey)(pubkey)) {\n        // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n        const pubkeyData = (0, encoding_2.encodeAminoPubkey)(pubkey);\n        return (0, crypto_1.sha256)(pubkeyData).slice(0, 20);\n    }\n    else {\n        throw new Error(\"Unsupported public key type\");\n    }\n}\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\nfunction pubkeyToAddress(pubkey, prefix) {\n    return (0, encoding_1.toBech32)(prefix, pubkeyToRawAddress(pubkey));\n}\nexports.pubkeyToAddress = pubkeyToAddress;\n//# sourceMappingURL=addresses.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addCoins = exports.parseCoins = exports.coins = exports.coin = void 0;\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Creates a coin.\n *\n * If your values do not exceed the safe integer range of JS numbers (53 bit),\n * you can use the number type here. This is the case for all typical Cosmos SDK\n * chains that use the default 6 decimals.\n *\n * In case you need to supportr larger values, use unsigned integer strings instead.\n */\nfunction coin(amount, denom) {\n    let outAmount;\n    if (typeof amount === \"number\") {\n        try {\n            outAmount = new math_1.Uint53(amount).toString();\n        }\n        catch (_err) {\n            throw new Error(\"Given amount is not a safe integer. Consider using a string instead to overcome the limitations of JS numbers.\");\n        }\n    }\n    else {\n        if (!amount.match(/^[0-9]+$/)) {\n            throw new Error(\"Invalid unsigned integer string format\");\n        }\n        outAmount = amount.replace(/^0*/, \"\") || \"0\";\n    }\n    return {\n        amount: outAmount,\n        denom: denom,\n    };\n}\nexports.coin = coin;\n/**\n * Creates a list of coins with one element.\n */\nfunction coins(amount, denom) {\n    return [coin(amount, denom)];\n}\nexports.coins = coins;\n/**\n * Takes a coins list like \"819966000ucosm,700000000ustake\" and parses it.\n *\n * Starting with CosmJS 0.32.3, the following imports are all synonym and support\n * a variety of denom types such as IBC denoms or tokenfactory. If you need to\n * restrict the denom to something very minimal, this needs to be implemented\n * separately in the caller.\n *\n * ```\n * import { parseCoins } from \"@cosmjs/proto-signing\";\n * // equals\n * import { parseCoins } from \"@cosmjs/stargate\";\n * // equals\n * import { parseCoins } from \"@cosmjs/amino\";\n * ```\n *\n * This function is not made for supporting decimal amounts and does not support\n * parsing gas prices.\n */\nfunction parseCoins(input) {\n    return input\n        .replace(/\\s/g, \"\")\n        .split(\",\")\n        .filter(Boolean)\n        .map((part) => {\n        // Denom regex from Stargate (https://github.com/cosmos/cosmos-sdk/blob/v0.42.7/types/coin.go#L599-L601)\n        const match = part.match(/^([0-9]+)([a-zA-Z][a-zA-Z0-9/]{2,127})$/);\n        if (!match)\n            throw new Error(\"Got an invalid coin string\");\n        return {\n            amount: match[1].replace(/^0+/, \"\") || \"0\",\n            denom: match[2],\n        };\n    });\n}\nexports.parseCoins = parseCoins;\n/**\n * Function to sum up coins with type Coin\n */\nfunction addCoins(lhs, rhs) {\n    if (lhs.denom !== rhs.denom)\n        throw new Error(\"Trying to add two coins with different denoms\");\n    return {\n        amount: math_1.Decimal.fromAtomics(lhs.amount, 0).plus(math_1.Decimal.fromAtomics(rhs.amount, 0)).atomics,\n        denom: lhs.denom,\n    };\n}\nexports.addCoins = addCoins;\n//# sourceMappingURL=coins.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\nfunction compareArrays(a, b) {\n    const aHex = (0, encoding_1.toHex)(a);\n    const bHex = (0, encoding_1.toHex)(b);\n    return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\nexports.compareArrays = compareArrays;\nfunction createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {\n    const uintThreshold = new math_1.Uint53(threshold);\n    if (uintThreshold.toNumber() > pubkeys.length) {\n        throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n    }\n    const outPubkeys = nosort\n        ? pubkeys\n        : Array.from(pubkeys).sort((lhs, rhs) => {\n            // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n            const addressLhs = (0, addresses_1.pubkeyToRawAddress)(lhs);\n            const addressRhs = (0, addresses_1.pubkeyToRawAddress)(rhs);\n            return compareArrays(addressLhs, addressRhs);\n        });\n    return {\n        type: \"tendermint/PubKeyMultisigThreshold\",\n        value: {\n            threshold: uintThreshold.toString(),\n            pubkeys: outPubkeys,\n        },\n    };\n}\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;\n//# sourceMappingURL=multisig.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.omitDefault = void 0;\n/**\n * Returns the given input. If the input is the default value\n * of protobuf, undefined is retunred. Use this when creating Amino JSON converters.\n */\nfunction omitDefault(input) {\n    switch (typeof input) {\n        case \"string\":\n            return input === \"\" ? undefined : input;\n        case \"number\":\n            return input === 0 ? undefined : input;\n        case \"bigint\":\n            return input === BigInt(0) ? undefined : input;\n        case \"boolean\":\n            return !input ? undefined : input;\n        default:\n            throw new Error(`Got unsupported type '${typeof input}'`);\n    }\n}\nexports.omitDefault = omitDefault;\n//# sourceMappingURL=omitdefault.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeCosmoshubPath = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\n/**\n * The Cosmos Hub derivation path in the form `m/44'/118'/0'/0/a`\n * with 0-based account index `a`.\n */\nfunction makeCosmoshubPath(a) {\n    return [\n        crypto_1.Slip10RawIndex.hardened(44),\n        crypto_1.Slip10RawIndex.hardened(118),\n        crypto_1.Slip10RawIndex.hardened(0),\n        crypto_1.Slip10RawIndex.normal(0),\n        crypto_1.Slip10RawIndex.normal(a),\n    ];\n}\nexports.makeCosmoshubPath = makeCosmoshubPath;\n//# sourceMappingURL=paths.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeSignature = exports.encodeSecp256k1Signature = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\n/**\n * Takes a binary pubkey and signature to create a signature object\n *\n * @param pubkey a compressed secp256k1 public key\n * @param signature a 64 byte fixed length representation of secp256k1 signature components r and s\n */\nfunction encodeSecp256k1Signature(pubkey, signature) {\n    if (signature.length !== 64) {\n        throw new Error(\"Signature must be 64 bytes long. Cosmos SDK uses a 2x32 byte fixed length encoding for the secp256k1 signature integers r and s.\");\n    }\n    return {\n        pub_key: (0, encoding_2.encodeSecp256k1Pubkey)(pubkey),\n        signature: (0, encoding_1.toBase64)(signature),\n    };\n}\nexports.encodeSecp256k1Signature = encodeSecp256k1Signature;\nfunction decodeSignature(signature) {\n    switch (signature.pub_key.type) {\n        // Note: please don't add cases here without writing additional unit tests\n        case pubkeys_1.pubkeyType.secp256k1:\n            return {\n                pubkey: (0, encoding_1.fromBase64)(signature.pub_key.value),\n                signature: (0, encoding_1.fromBase64)(signature.signature),\n            };\n        default:\n            throw new Error(\"Unsupported pubkey type\");\n    }\n}\nexports.decodeSignature = decodeSignature;\n//# sourceMappingURL=signature.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeSignDoc = exports.escapeCharacters = exports.makeSignDoc = exports.sortedJsonStringify = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nfunction sortedObject(obj) {\n    if (typeof obj !== \"object\" || obj === null) {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(sortedObject);\n    }\n    const sortedKeys = Object.keys(obj).sort();\n    const result = {};\n    // NOTE: Use forEach instead of reduce for performance with large objects eg Wasm code\n    sortedKeys.forEach((key) => {\n        result[key] = sortedObject(obj[key]);\n    });\n    return result;\n}\n/** Returns a JSON string with objects sorted by key */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction sortedJsonStringify(obj) {\n    return JSON.stringify(sortedObject(obj));\n}\nexports.sortedJsonStringify = sortedJsonStringify;\nfunction makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence, timeout_height) {\n    return {\n        chain_id: chainId,\n        account_number: math_1.Uint53.fromString(accountNumber.toString()).toString(),\n        sequence: math_1.Uint53.fromString(sequence.toString()).toString(),\n        fee: fee,\n        msgs: msgs,\n        memo: memo || \"\",\n        ...(timeout_height && { timeout_height: timeout_height.toString() }),\n    };\n}\nexports.makeSignDoc = makeSignDoc;\n/**\n * Takes a valid JSON document and performs the following escapings in string values:\n *\n * `&` -> `\\u0026`\n * `<` -> `\\u003c`\n * `>` -> `\\u003e`\n *\n * Since those characters do not occur in other places of the JSON document, only\n * string values are affected.\n *\n * If the input is invalid JSON, the behaviour is undefined.\n */\nfunction escapeCharacters(input) {\n    // When we migrate to target es2021 or above, we can use replaceAll instead of global patterns.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\n    const amp = /&/g;\n    const lt = /</g;\n    const gt = />/g;\n    return input.replace(amp, \"\\\\u0026\").replace(lt, \"\\\\u003c\").replace(gt, \"\\\\u003e\");\n}\nexports.escapeCharacters = escapeCharacters;\nfunction serializeSignDoc(signDoc) {\n    const serialized = escapeCharacters(sortedJsonStringify(signDoc));\n    return (0, encoding_1.toUtf8)(serialized);\n}\nexports.serializeSignDoc = serializeSignDoc;\n//# sourceMappingURL=signdoc.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = exports.supportedAlgorithms = exports.executeKdf = exports.cosmjsSalt = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\n/**\n * A fixed salt is chosen to archive a deterministic password to key derivation.\n * This reduces the scope of a potential rainbow attack to all CosmJS users.\n * Must be 16 bytes due to implementation limitations.\n */\nexports.cosmjsSalt = (0, encoding_1.toAscii)(\"The CosmJS salt.\");\nasync function executeKdf(password, configuration) {\n    switch (configuration.algorithm) {\n        case \"argon2id\": {\n            const options = configuration.params;\n            if (!(0, crypto_1.isArgon2idOptions)(options))\n                throw new Error(\"Invalid format of argon2id params\");\n            return crypto_1.Argon2id.execute(password, exports.cosmjsSalt, options);\n        }\n        default:\n            throw new Error(\"Unsupported KDF algorithm\");\n    }\n}\nexports.executeKdf = executeKdf;\nexports.supportedAlgorithms = {\n    xchacha20poly1305Ietf: \"xchacha20poly1305-ietf\",\n};\nasync function encrypt(plaintext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = crypto_1.Random.getBytes(crypto_1.xchacha20NonceLength);\n            // Prepend fixed-length nonce to ciphertext as suggested in the example from https://github.com/jedisct1/libsodium.js#api\n            return new Uint8Array([\n                ...nonce,\n                ...(await crypto_1.Xchacha20poly1305Ietf.encrypt(plaintext, encryptionKey, nonce)),\n            ]);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nexports.encrypt = encrypt;\nasync function decrypt(ciphertext, encryptionKey, config) {\n    switch (config.algorithm) {\n        case exports.supportedAlgorithms.xchacha20poly1305Ietf: {\n            const nonce = ciphertext.slice(0, crypto_1.xchacha20NonceLength);\n            return crypto_1.Xchacha20poly1305Ietf.decrypt(ciphertext.slice(crypto_1.xchacha20NonceLength), encryptionKey, nonce);\n        }\n        default:\n            throw new Error(`Unsupported encryption algorithm: '${config.algorithm}'`);\n    }\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=wallet.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst addresses_1 = require(\"./addresses\");\nconst paths_1 = require(\"./paths\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\nconst wallet_1 = require(\"./wallet\");\nconst serializationTypeV1 = \"secp256k1wallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n    algorithm: \"argon2id\",\n    params: {\n        outputLength: 32,\n        opsLimit: 24,\n        memLimitKib: 12 * 1024,\n    },\n};\nfunction isDerivationJson(thing) {\n    if (!(0, utils_1.isNonNullObject)(thing))\n        return false;\n    if (typeof thing.hdPath !== \"string\")\n        return false;\n    if (typeof thing.prefix !== \"string\")\n        return false;\n    return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n    return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root))\n        throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n        case serializationTypeV1:\n            return extractKdfConfigurationV1(root);\n        default:\n            throw new Error(\"Unsupported serialization type\");\n    }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst defaultOptions = {\n    bip39Password: \"\",\n    hdPaths: [(0, paths_1.makeCosmoshubPath)(0)],\n    prefix: \"cosmos\",\n};\nclass Secp256k1HdWallet {\n    /**\n     * Restores a wallet from the given BIP39 mnemonic.\n     *\n     * @param mnemonic Any valid English mnemonic.\n     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async fromMnemonic(mnemonic, options = {}) {\n        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n        return new Secp256k1HdWallet(mnemonicChecked, {\n            ...options,\n            seed: seed,\n        });\n    }\n    /**\n     * Generates a new wallet with a BIP39 mnemonic of the given length.\n     *\n     * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n     * @param options An optional `Secp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n     */\n    static async generate(length = 12, options = {}) {\n        const entropyLength = 4 * Math.floor((11 * length) / 33);\n        const entropy = crypto_1.Random.getBytes(entropyLength);\n        const mnemonic = crypto_1.Bip39.encode(entropy);\n        return Secp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    static async deserialize(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        switch (root.type) {\n            case serializationTypeV1:\n                return Secp256k1HdWallet.deserializeTypeV1(serialization, password);\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    /**\n     * Restores a wallet from an encrypted serialization.\n     *\n     * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n     * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n     * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n     */\n    static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const untypedRoot = root;\n        switch (untypedRoot.type) {\n            case serializationTypeV1: {\n                const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n                const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n                const { mnemonic, accounts } = decryptedDocument;\n                (0, utils_1.assert)(typeof mnemonic === \"string\");\n                if (!Array.isArray(accounts))\n                    throw new Error(\"Property 'accounts' is not an array\");\n                if (!accounts.every((account) => isDerivationJson(account))) {\n                    throw new Error(\"Account is not in the correct format.\");\n                }\n                const firstPrefix = accounts[0].prefix;\n                if (!accounts.every(({ prefix }) => prefix === firstPrefix)) {\n                    throw new Error(\"Accounts do not all have the same prefix\");\n                }\n                const hdPaths = accounts.map(({ hdPath }) => (0, crypto_1.stringToPath)(hdPath));\n                return Secp256k1HdWallet.fromMnemonic(mnemonic, {\n                    hdPaths: hdPaths,\n                    prefix: firstPrefix,\n                });\n            }\n            default:\n                throw new Error(\"Unsupported serialization type\");\n        }\n    }\n    static async deserializeTypeV1(serialization, password) {\n        const root = JSON.parse(serialization);\n        if (!(0, utils_1.isNonNullObject)(root))\n            throw new Error(\"Root document is not an object.\");\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n        return Secp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n    }\n    constructor(mnemonic, options) {\n        const hdPaths = options.hdPaths ?? defaultOptions.hdPaths;\n        const prefix = options.prefix ?? defaultOptions.prefix;\n        this.secret = mnemonic;\n        this.seed = options.seed;\n        this.accounts = hdPaths.map((hdPath) => ({\n            hdPath: hdPath,\n            prefix,\n        }));\n    }\n    get mnemonic() {\n        return this.secret.toString();\n    }\n    async getAccounts() {\n        const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n        return accountsWithPrivkeys.map(({ algo, pubkey, address }) => ({\n            algo: algo,\n            pubkey: pubkey,\n            address: address,\n        }));\n    }\n    async signAmino(signerAddress, signDoc) {\n        const accounts = await this.getAccountsWithPrivkeys();\n        const account = accounts.find(({ address }) => address === signerAddress);\n        if (account === undefined) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const { privkey, pubkey } = account;\n        const message = (0, crypto_1.sha256)((0, signdoc_1.serializeSignDoc)(signDoc));\n        const signature = await crypto_1.Secp256k1.createSignature(message, privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(pubkey, signatureBytes),\n        };\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * @param password The user provided password used to generate an encryption key via a KDF.\n     *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n     */\n    async serialize(password) {\n        const kdfConfiguration = basicPasswordHashingOptions;\n        const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n        return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n    }\n    /**\n     * Generates an encrypted serialization of this wallet.\n     *\n     * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n     * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n     *\n     * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n     * is not the case, the wallet cannot be restored with the original password.\n     */\n    async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n        const dataToEncrypt = {\n            mnemonic: this.mnemonic,\n            accounts: this.accounts.map(({ hdPath, prefix }) => ({\n                hdPath: (0, crypto_1.pathToString)(hdPath),\n                prefix: prefix,\n            })),\n        };\n        const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n        const encryptionConfiguration = {\n            algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf,\n        };\n        const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n        const out = {\n            type: serializationTypeV1,\n            kdf: kdfConfiguration,\n            encryption: encryptionConfiguration,\n            data: (0, encoding_1.toBase64)(encryptedData),\n        };\n        return JSON.stringify(out);\n    }\n    async getKeyPair(hdPath) {\n        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n        const { pubkey } = await crypto_1.Secp256k1.makeKeypair(privkey);\n        return {\n            privkey: privkey,\n            pubkey: crypto_1.Secp256k1.compressPubkey(pubkey),\n        };\n    }\n    async getAccountsWithPrivkeys() {\n        return Promise.all(this.accounts.map(async ({ hdPath, prefix }) => {\n            const { privkey, pubkey } = await this.getKeyPair(hdPath);\n            const address = (0, encoding_1.toBech32)(prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n            return {\n                algo: \"secp256k1\",\n                privkey: privkey,\n                pubkey: pubkey,\n                address: address,\n            };\n        }));\n    }\n}\nexports.Secp256k1HdWallet = Secp256k1HdWallet;\n//# sourceMappingURL=secp256k1hdwallet.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n    /**\n     * Creates a Secp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    get address() {\n        return (0, encoding_1.toBech32)(this.prefix, (0, addresses_1.rawSecp256k1PubkeyToRawAddress)(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signAmino(signerAddress, signDoc) {\n        if (signerAddress !== this.address) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const message = new crypto_1.Sha256((0, signdoc_1.serializeSignDoc)(signDoc)).digest();\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: (0, signature_1.encodeSecp256k1Signature)(this.pubkey, signatureBytes),\n        };\n    }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;\n//# sourceMappingURL=secp256k1wallet.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeStdTx = exports.isStdTx = void 0;\nfunction isStdTx(txValue) {\n    const { memo, msg, fee, signatures } = txValue;\n    return (typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures));\n}\nexports.isStdTx = isStdTx;\nfunction makeStdTx(content, signatures) {\n    return {\n        msg: content.msgs,\n        fee: content.fee,\n        memo: content.memo,\n        signatures: Array.isArray(signatures) ? signatures : [signatures],\n    };\n}\nexports.makeStdTx = makeStdTx;\n//# sourceMappingURL=stdtx.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.executeKdf = exports.makeStdTx = exports.isStdTx = exports.serializeSignDoc = exports.makeSignDoc = exports.encodeSecp256k1Signature = exports.decodeSignature = exports.Secp256k1Wallet = exports.Secp256k1HdWallet = exports.extractKdfConfiguration = exports.pubkeyType = exports.isSinglePubkey = exports.isSecp256k1Pubkey = exports.isMultisigThresholdPubkey = exports.isEd25519Pubkey = exports.makeCosmoshubPath = exports.omitDefault = exports.createMultisigThresholdPubkey = exports.encodeSecp256k1Pubkey = exports.encodeEd25519Pubkey = exports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.parseCoins = exports.coins = exports.coin = exports.addCoins = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = exports.pubkeyToRawAddress = exports.pubkeyToAddress = void 0;\nvar addresses_1 = require(\"./addresses\");\nObject.defineProperty(exports, \"pubkeyToAddress\", { enumerable: true, get: function () { return addresses_1.pubkeyToAddress; } });\nObject.defineProperty(exports, \"pubkeyToRawAddress\", { enumerable: true, get: function () { return addresses_1.pubkeyToRawAddress; } });\nObject.defineProperty(exports, \"rawEd25519PubkeyToRawAddress\", { enumerable: true, get: function () { return addresses_1.rawEd25519PubkeyToRawAddress; } });\nObject.defineProperty(exports, \"rawSecp256k1PubkeyToRawAddress\", { enumerable: true, get: function () { return addresses_1.rawSecp256k1PubkeyToRawAddress; } });\nvar coins_1 = require(\"./coins\");\nObject.defineProperty(exports, \"addCoins\", { enumerable: true, get: function () { return coins_1.addCoins; } });\nObject.defineProperty(exports, \"coin\", { enumerable: true, get: function () { return coins_1.coin; } });\nObject.defineProperty(exports, \"coins\", { enumerable: true, get: function () { return coins_1.coins; } });\nObject.defineProperty(exports, \"parseCoins\", { enumerable: true, get: function () { return coins_1.parseCoins; } });\nvar encoding_1 = require(\"./encoding\");\nObject.defineProperty(exports, \"decodeAminoPubkey\", { enumerable: true, get: function () { return encoding_1.decodeAminoPubkey; } });\nObject.defineProperty(exports, \"decodeBech32Pubkey\", { enumerable: true, get: function () { return encoding_1.decodeBech32Pubkey; } });\nObject.defineProperty(exports, \"encodeAminoPubkey\", { enumerable: true, get: function () { return encoding_1.encodeAminoPubkey; } });\nObject.defineProperty(exports, \"encodeBech32Pubkey\", { enumerable: true, get: function () { return encoding_1.encodeBech32Pubkey; } });\nObject.defineProperty(exports, \"encodeEd25519Pubkey\", { enumerable: true, get: function () { return encoding_1.encodeEd25519Pubkey; } });\nObject.defineProperty(exports, \"encodeSecp256k1Pubkey\", { enumerable: true, get: function () { return encoding_1.encodeSecp256k1Pubkey; } });\nvar multisig_1 = require(\"./multisig\");\nObject.defineProperty(exports, \"createMultisigThresholdPubkey\", { enumerable: true, get: function () { return multisig_1.createMultisigThresholdPubkey; } });\nvar omitdefault_1 = require(\"./omitdefault\");\nObject.defineProperty(exports, \"omitDefault\", { enumerable: true, get: function () { return omitdefault_1.omitDefault; } });\nvar paths_1 = require(\"./paths\");\nObject.defineProperty(exports, \"makeCosmoshubPath\", { enumerable: true, get: function () { return paths_1.makeCosmoshubPath; } });\nvar pubkeys_1 = require(\"./pubkeys\");\nObject.defineProperty(exports, \"isEd25519Pubkey\", { enumerable: true, get: function () { return pubkeys_1.isEd25519Pubkey; } });\nObject.defineProperty(exports, \"isMultisigThresholdPubkey\", { enumerable: true, get: function () { return pubkeys_1.isMultisigThresholdPubkey; } });\nObject.defineProperty(exports, \"isSecp256k1Pubkey\", { enumerable: true, get: function () { return pubkeys_1.isSecp256k1Pubkey; } });\nObject.defineProperty(exports, \"isSinglePubkey\", { enumerable: true, get: function () { return pubkeys_1.isSinglePubkey; } });\nObject.defineProperty(exports, \"pubkeyType\", { enumerable: true, get: function () { return pubkeys_1.pubkeyType; } });\nvar secp256k1hdwallet_1 = require(\"./secp256k1hdwallet\");\nObject.defineProperty(exports, \"extractKdfConfiguration\", { enumerable: true, get: function () { return secp256k1hdwallet_1.extractKdfConfiguration; } });\nObject.defineProperty(exports, \"Secp256k1HdWallet\", { enumerable: true, get: function () { return secp256k1hdwallet_1.Secp256k1HdWallet; } });\nvar secp256k1wallet_1 = require(\"./secp256k1wallet\");\nObject.defineProperty(exports, \"Secp256k1Wallet\", { enumerable: true, get: function () { return secp256k1wallet_1.Secp256k1Wallet; } });\nvar signature_1 = require(\"./signature\");\nObject.defineProperty(exports, \"decodeSignature\", { enumerable: true, get: function () { return signature_1.decodeSignature; } });\nObject.defineProperty(exports, \"encodeSecp256k1Signature\", { enumerable: true, get: function () { return signature_1.encodeSecp256k1Signature; } });\nvar signdoc_1 = require(\"./signdoc\");\nObject.defineProperty(exports, \"makeSignDoc\", { enumerable: true, get: function () { return signdoc_1.makeSignDoc; } });\nObject.defineProperty(exports, \"serializeSignDoc\", { enumerable: true, get: function () { return signdoc_1.serializeSignDoc; } });\nvar stdtx_1 = require(\"./stdtx\");\nObject.defineProperty(exports, \"isStdTx\", { enumerable: true, get: function () { return stdtx_1.isStdTx; } });\nObject.defineProperty(exports, \"makeStdTx\", { enumerable: true, get: function () { return stdtx_1.makeStdTx; } });\nvar wallet_1 = require(\"./wallet\");\nObject.defineProperty(exports, \"executeKdf\", { enumerable: true, get: function () { return wallet_1.executeKdf; } });\n//# sourceMappingURL=index.js.map"
  ],
  "mappings": "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",
  "debugId": "89DA30A3F20148C964756E2164756E21",
  "names": []
}