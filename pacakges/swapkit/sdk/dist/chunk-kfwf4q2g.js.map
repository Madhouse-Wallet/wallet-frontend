{
  "version": 3,
  "sources": ["../../../../node_modules/safe-buffer/index.js", "../../../../node_modules/base-x/src/index.js", "../../../../node_modules/bs58/index.js"],
  "sourcesContent": [
    "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",
    "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (psz < source.length) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n",
    "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n"
  ],
  "mappings": "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",
  "debugId": "64762A31F4455A7164756E2164756E21",
  "names": []
}