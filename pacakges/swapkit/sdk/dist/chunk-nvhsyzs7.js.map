{
  "version": 3,
  "sources": ["../../../../node_modules/text-encoding-utf-8/src/encoding.js", "../../../../node_modules/borsh/lib/index.js", "../../../../node_modules/@solana/buffer-layout/lib/Layout.js", "../../../../node_modules/bigint-buffer/dist/browser.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/rng.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/regex.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/validate.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/stringify.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v1.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/parse.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v35.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/md5.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v3.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v4.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/sha1.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/v5.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/nil.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/version.js", "../../../../node_modules/jayson/node_modules/uuid/dist/esm-browser/index.js", "../../../../node_modules/jayson/lib/generateRequest.js", "../../../../node_modules/jayson/lib/client/browser/index.js", "../../../../node_modules/@solana/web3.js/lib/index.browser.esm.js", "../../../../node_modules/superstruct/dist/index.mjs", "../../../../node_modules/rpc-websockets/dist/index.browser.mjs"],
  "sourcesContent": [
    "'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n",
    "/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map",
    "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n",
    "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}",
    "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;",
    "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;",
    "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;",
    "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;",
    "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;",
    "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}",
    "/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;",
    "import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;",
    "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;",
    "// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;",
    "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;",
    "export default '00000000-0000-0000-0000-000000000000';",
    "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;",
    "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';",
    "'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n",
    "'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n",
    "import { Buffer } from 'buffer';\nimport { ed25519 } from '@noble/curves/ed25519';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { blob } from '@solana/buffer-layout';\nimport { toBigIntLE, toBufferLE } from 'bigint-buffer';\nimport { coerce, instance, string, tuple, literal, unknown, type, number, array, nullable, optional, boolean, record, union, create, any, assert as assert$1 } from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport { CommonClient, WebSocket } from 'rpc-websockets';\nimport { keccak_256 } from '@noble/hashes/sha3';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\n\n/**\n * Ed25519 Keypair\n */\n\nconst generatePrivateKey = ed25519.utils.randomPrivateKey;\nconst generateKeypair = () => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey\n  };\n};\nconst getPublicKey = ed25519.getPublicKey;\nfunction isOnCurve(publicKey) {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nconst sign = (message, secretKey) => ed25519.sign(message, secretKey.slice(0, 32));\nconst verify = ed25519.verify;\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\n// Class wrapping a plain object\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n    this.enum = '';\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\nconst SOLANA_SCHEMA = new Map();\n\nvar _PublicKey;\n\n/**\n * Maximum length of derived pubkey seed\n */\nconst MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nconst PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\n\n/**\n * JSON object representation of PublicKey class\n */\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nclass PublicKey extends Struct {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n    /** @internal */\n    this._bn = void 0;\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(seeds, programId) {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(seeds, programId) {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(seeds, programId) {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData) {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n_PublicKey = PublicKey;\nPublicKey.default = new _PublicKey('11111111111111111111111111111111');\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n});\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nclass Account {\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    /** @internal */\n    this._publicKey = void 0;\n    /** @internal */\n    this._secretKey = void 0;\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey() {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey() {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst VERSION_PREFIX_MASK = 0x7f;\nconst SIGNATURE_LENGTH_IN_BYTES = 64;\n\nclass TransactionExpiredBlockheightExceededError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredBlockheightExceededError.prototype, 'name', {\n  value: 'TransactionExpiredBlockheightExceededError'\n});\nclass TransactionExpiredTimeoutError extends Error {\n  constructor(signature, timeoutSeconds) {\n    super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is ` + 'unknown if it succeeded or failed. Check signature ' + `${signature} using the Solana Explorer or CLI tools.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError'\n});\nclass TransactionExpiredNonceInvalidError extends Error {\n  constructor(signature) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = void 0;\n    this.signature = signature;\n  }\n}\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError'\n});\n\nclass MessageAccountKeys {\n  constructor(staticAccountKeys, accountKeysFromLookups) {\n    this.staticAccountKeys = void 0;\n    this.accountKeysFromLookups = void 0;\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n  keySegments() {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n  get(index) {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(instructions) {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n    const keyIndexMap = new Map();\n    this.keySegments().flat().forEach((key, index) => {\n      keyIndexMap.set(key.toBase58(), index);\n    });\n    const findKeyIndex = key => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined) throw new Error('Encountered an unknown instruction account key during compilation');\n      return keyIndex;\n    };\n    return instructions.map(instruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta => findKeyIndex(meta.pubkey)),\n        data: instruction.data\n      };\n    });\n  }\n}\n\n/**\n * Layout for a public key\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nconst signature = (property = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n/**\n * Layout for a Rust String type\n */\nconst rustString = (property = 'string') => {\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n  const rslShim = rsl;\n  rslShim.decode = (b, offset) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n  rslShim.encode = (str, b, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, b, offset);\n  };\n  rslShim.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nconst authorized = (property = 'authorized') => {\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nconst lockup = (property = 'lockup') => {\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\n/**\n *  Layout for a VoteInit object\n */\nconst voteInit = (property = 'voteInit') => {\n  return BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoter'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission')], property);\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nconst voteAuthorizeWithSeedArgs = (property = 'voteAuthorizeWithSeedArgs') => {\n  return BufferLayout.struct([BufferLayout.u32('voteAuthorizationType'), publicKey('currentAuthorityDerivedKeyOwnerPubkey'), rustString('currentAuthorityDerivedKeySeed'), publicKey('newAuthorized')], property);\n};\nfunction getAlloc(type, fields) {\n  const getItemAlloc = item => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({\n        layout: item\n      }, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    alloc += getItemAlloc(item);\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n\nclass CompiledKeys {\n  constructor(payer, keyMetaMap) {\n    this.payer = void 0;\n    this.keyMetaMap = void 0;\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n  static compile(instructions, payer) {\n    const keyMetaMap = new Map();\n    const getOrInsertDefault = pubkey => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n  getMessageComponents() {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n    const writableSigners = mapEntries.filter(([, meta]) => meta.isSigner && meta.isWritable);\n    const readonlySigners = mapEntries.filter(([, meta]) => meta.isSigner && !meta.isWritable);\n    const writableNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && meta.isWritable);\n    const readonlyNonSigners = mapEntries.filter(([, meta]) => !meta.isSigner && !meta.isWritable);\n    const header = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length\n    };\n\n    // sanity checks\n    {\n      assert(writableSigners.length > 0, 'Expected at least one writable signer key');\n      const [payerAddress] = writableSigners[0];\n      assert(payerAddress === this.payer.toBase58(), 'Expected first writable signer key to be the fee payer');\n    }\n    const staticAccountKeys = [...writableSigners.map(([address]) => new PublicKey(address)), ...readonlySigners.map(([address]) => new PublicKey(address)), ...writableNonSigners.map(([address]) => new PublicKey(address)), ...readonlyNonSigners.map(([address]) => new PublicKey(address))];\n    return [header, staticAccountKeys];\n  }\n  extractTableLookup(lookupTable) {\n    const [writableIndexes, drainedWritableKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable);\n    const [readonlyIndexes, drainedReadonlyKeys] = this.drainKeysFoundInLookupTable(lookupTable.state.addresses, keyMeta => !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable);\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n    return [{\n      accountKey: lookupTable.key,\n      writableIndexes,\n      readonlyIndexes\n    }, {\n      writable: drainedWritableKeys,\n      readonly: drainedReadonlyKeys\n    }];\n  }\n\n  /** @internal */\n  drainKeysFoundInLookupTable(lookupTableEntries, keyMetaFilter) {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry => entry.equals(key));\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n\nconst END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nfunction guardedShift(byteArray) {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift();\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nfunction guardedSplice(byteArray, ...args) {\n  const [start] = args;\n  if (args.length === 2 // Implies that `deleteCount` was supplied\n  ? start + (args[1] ?? 0) > byteArray.length : start >= byteArray.length) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(...args);\n}\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\n\n/**\n * Message constructor arguments\n */\n\n/**\n * List of instructions to be processed atomically\n */\nclass Message {\n  constructor(args) {\n    this.header = void 0;\n    this.accountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.instructions = void 0;\n    this.indexToProgramIds = new Map();\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix => this.indexToProgramIds.set(ix.programIdIndex, this.accountKeys[ix.programIdIndex]));\n  }\n  get version() {\n    return 'legacy';\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accountKeyIndexes: ix.accounts,\n      data: bs58.decode(ix.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(ix => ({\n      programIdIndex: ix.programIdIndex,\n      accounts: ix.accountKeyIndexes,\n      data: bs58.encode(ix.data)\n    }));\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions\n    });\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  isProgramId(index) {\n    return this.indexToProgramIds.has(index);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (numRequiredSignatures !== (numRequiredSignatures & VERSION_PREFIX_MASK)) {\n      throw new Error('Versioned messages must be deserialized with VersionedMessage.deserialize()');\n    }\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n}\n\n/**\n * Message constructor arguments\n */\n\nclass MessageV0 {\n  constructor(args) {\n    this.header = void 0;\n    this.staticAccountKeys = void 0;\n    this.recentBlockhash = void 0;\n    this.compiledInstructions = void 0;\n    this.addressTableLookups = void 0;\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n  getAccountKeys(args) {\n    let accountKeysFromLookups;\n    if (args && 'accountKeysFromLookups' in args && args.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != args.accountKeysFromLookups.writable.length + args.accountKeysFromLookups.readonly.length) {\n        throw new Error('Failed to get account keys because of a mismatch in the number of account keys from lookups');\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (args && 'addressLookupTableAccounts' in args && args.addressLookupTableAccounts) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(args.addressLookupTableAccounts);\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error('Failed to get account keys because address table lookups were not resolved');\n    }\n    return new MessageAccountKeys(this.staticAccountKeys, accountKeysFromLookups);\n  }\n  isAccountSigner(index) {\n    return index < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(index) {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce((count, lookup) => count + lookup.writableIndexes.length, 0);\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts = numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts = numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n  resolveAddressTableLookups(addressLookupTableAccounts) {\n    const accountKeysFromLookups = {\n      writable: [],\n      readonly: []\n    };\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account => account.key.equals(tableLookup.accountKey));\n      if (!tableAccount) {\n        throw new Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);\n      }\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index]);\n        } else {\n          throw new Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);\n        }\n      }\n    }\n    return accountKeysFromLookups;\n  }\n  static compile(args) {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const addressTableLookups = new Array();\n    const accountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array()\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {\n          writable,\n          readonly\n        }] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys, accountKeysFromLookups);\n    const compiledInstructions = accountKeys.compileInstructions(args.instructions);\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n  serialize() {\n    const encodedStaticAccountKeysLength = Array();\n    encodeLength(encodedStaticAccountKeysLength, this.staticAccountKeys.length);\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array();\n    encodeLength(encodedInstructionsLength, this.compiledInstructions.length);\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array();\n    encodeLength(encodedAddressTableLookupsLength, this.addressTableLookups.length);\n    const messageLayout = BufferLayout.struct([BufferLayout.u8('prefix'), BufferLayout.struct([BufferLayout.u8('numRequiredSignatures'), BufferLayout.u8('numReadonlySignedAccounts'), BufferLayout.u8('numReadonlyUnsignedAccounts')], 'header'), BufferLayout.blob(encodedStaticAccountKeysLength.length, 'staticAccountKeysLength'), BufferLayout.seq(publicKey(), this.staticAccountKeys.length, 'staticAccountKeys'), publicKey('recentBlockhash'), BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'), BufferLayout.blob(serializedInstructions.length, 'serializedInstructions'), BufferLayout.blob(encodedAddressTableLookupsLength.length, 'addressTableLookupsLength'), BufferLayout.blob(serializedAddressTableLookups.length, 'serializedAddressTableLookups')]);\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode({\n      prefix: MESSAGE_VERSION_0_PREFIX,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n      staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(encodedInstructionsLength),\n      serializedInstructions,\n      addressTableLookupsLength: new Uint8Array(encodedAddressTableLookupsLength),\n      serializedAddressTableLookups\n    }, serializedMessage);\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n  serializeInstructions() {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array();\n      encodeLength(encodedAccountKeyIndexesLength, instruction.accountKeyIndexes.length);\n      const encodedDataLength = Array();\n      encodeLength(encodedDataLength, instruction.data.length);\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(encodedAccountKeyIndexesLength.length, 'encodedAccountKeyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), instruction.accountKeyIndexes.length, 'accountKeyIndexes'), BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'), BufferLayout.blob(instruction.data.length, 'data')]);\n      serializedLength += instructionLayout.encode({\n        programIdIndex: instruction.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(encodedAccountKeyIndexesLength),\n        accountKeyIndexes: instruction.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(encodedDataLength),\n        data: instruction.data\n      }, serializedInstructions, serializedLength);\n    }\n    return serializedInstructions.slice(0, serializedLength);\n  }\n  serializeAddressTableLookups() {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array();\n      encodeLength(encodedWritableIndexesLength, lookup.writableIndexes.length);\n      const encodedReadonlyIndexesLength = Array();\n      encodeLength(encodedReadonlyIndexesLength, lookup.readonlyIndexes.length);\n      const addressTableLookupLayout = BufferLayout.struct([publicKey('accountKey'), BufferLayout.blob(encodedWritableIndexesLength.length, 'encodedWritableIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.writableIndexes.length, 'writableIndexes'), BufferLayout.blob(encodedReadonlyIndexesLength.length, 'encodedReadonlyIndexesLength'), BufferLayout.seq(BufferLayout.u8(), lookup.readonlyIndexes.length, 'readonlyIndexes')]);\n      serializedLength += addressTableLookupLayout.encode({\n        accountKey: lookup.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(encodedWritableIndexesLength),\n        writableIndexes: lookup.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(encodedReadonlyIndexesLength),\n        readonlyIndexes: lookup.readonlyIndexes\n      }, serializedAddressTableLookups, serializedLength);\n    }\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n  static deserialize(serializedMessage) {\n    let byteArray = [...serializedMessage];\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(prefix !== maskedPrefix, `Expected versioned message but received legacy message`);\n    const version = maskedPrefix;\n    assert(version === 0, `Expected versioned message with version 0 but found version ${version}`);\n    const header = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray)\n    };\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)));\n    }\n    const recentBlockhash = bs58.encode(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n    const instructionCount = decodeLength(byteArray);\n    const compiledInstructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(byteArray, 0, accountKeyIndexesLength);\n      const dataLength = decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data\n      });\n    }\n    const addressTableLookupsCount = decodeLength(byteArray);\n    const addressTableLookups = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = decodeLength(byteArray);\n      const writableIndexes = guardedSplice(byteArray, 0, writableIndexesLength);\n      const readonlyIndexesLength = decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(byteArray, 0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes\n      });\n    }\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups\n    });\n  }\n}\n\n// eslint-disable-next-line no-redeclare\nconst VersionedMessage = {\n  deserializeMessageVersion(serializedMessage) {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n  deserialize: serializedMessage => {\n    const version = VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(`Transaction message version ${version} deserialization is not supported`);\n    }\n  }\n};\n\n/** @internal */\n\n/**\n * Transaction signature as base-58 encoded string\n */\n\nlet TransactionStatus = /*#__PURE__*/function (TransactionStatus) {\n  TransactionStatus[TransactionStatus[\"BLOCKHEIGHT_EXCEEDED\"] = 0] = \"BLOCKHEIGHT_EXCEEDED\";\n  TransactionStatus[TransactionStatus[\"PROCESSED\"] = 1] = \"PROCESSED\";\n  TransactionStatus[TransactionStatus[\"TIMED_OUT\"] = 2] = \"TIMED_OUT\";\n  TransactionStatus[TransactionStatus[\"NONCE_INVALID\"] = 3] = \"NONCE_INVALID\";\n  return TransactionStatus;\n}({});\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\n\n/**\n * Configuration object for Transaction.serialize()\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction Instruction class\n */\nclass TransactionInstruction {\n  constructor(opts) {\n    /**\n     * Public keys to include in this transaction\n     * Boolean represents whether this pubkey needs to sign the transaction\n     */\n    this.keys = void 0;\n    /**\n     * Program Id to execute\n     */\n    this.programId = void 0;\n    /**\n     * Program input\n     */\n    this.data = Buffer.alloc(0);\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey,\n        isSigner,\n        isWritable\n      }) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\n\n/**\n * @internal\n */\n\n/**\n * Transaction class\n */\nclass Transaction {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n\n  // Construct a transaction using a durable nonce\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts) {\n    /**\n     * Signatures for the transaction.  Typically created by invoking the\n     * `sign()` method\n     */\n    this.signatures = [];\n    this.feePayer = void 0;\n    /**\n     * The instructions to atomically execute\n     */\n    this.instructions = [];\n    /**\n     * A recent transaction id. Must be populated by the caller\n     */\n    this.recentBlockhash = void 0;\n    /**\n     * the last block chain can advance to before tx is declared expired\n     * */\n    this.lastValidBlockHeight = void 0;\n    /**\n     * Optional Nonce information. If populated, transaction will use a durable\n     * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n     */\n    this.nonceInfo = void 0;\n    /**\n     * If this is a nonce transaction this represents the minimum slot from which\n     * to evaluate if the nonce has advanced when attempting to confirm the\n     * transaction. This protects against a case where the transaction confirmation\n     * logic loads the nonce account from an old slot and assumes the mismatch in\n     * nonce value implies that the nonce has been advanced.\n     */\n    this.minNonceContextSlot = void 0;\n    /**\n     * @internal\n     */\n    this._message = void 0;\n    /**\n     * @internal\n     */\n    this._json = void 0;\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {\n        minContextSlot,\n        nonceInfo\n      } = opts;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {\n        blockhash,\n        lastValidBlockHeight\n      } = opts;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {\n        recentBlockhash,\n        nonceInfo\n      } = opts;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({\n        publicKey\n      }) => {\n        return publicKey.toJSON();\n      })\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...items) {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json)) {\n      return this._message;\n    }\n    let recentBlockhash;\n    let instructions;\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n    let feePayer;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n    const programIds = [];\n    const accountMetas = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({\n          ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner = uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower'\n      };\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(({\n      pubkey,\n      isSigner,\n      isWritable\n    }) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions = instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    compiledInstructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection) {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message, ...signers) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures = true) {\n    const signatureErrors = this._getMessageSignednessErrors(this.serializeMessage(), requireAllSignatures);\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(message, requireAllSignatures) {\n    const errors = {};\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(signData, requireAllSignatures);\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${sigErrors.invalid.length === 1 ? '' : '(s)'} [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${sigErrors.missing.length === 1 ? '' : '(s)'} [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({\n      signature\n    }, index) => {\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(message, signatures = []) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n    return transaction;\n  }\n}\n\nclass TransactionMessage {\n  constructor(args) {\n    this.payerKey = void 0;\n    this.instructions = void 0;\n    this.recentBlockhash = void 0;\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n  static decompile(message, args) {\n    const {\n      header,\n      compiledInstructions,\n      recentBlockhash\n    } = message;\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts\n    } = header;\n    const numWritableSignedAccounts = numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n    const numWritableUnsignedAccounts = message.staticAccountKeys.length - numRequiredSignatures - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error('Failed to decompile message because no account keys were found');\n    }\n    const instructions = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys = [];\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(`Failed to find key for account key index ${keyIndex}`);\n        }\n        const isSigner = keyIndex < numRequiredSignatures;\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable = keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable = keyIndex - accountKeys.staticAccountKeys.length <\n          // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n          accountKeys.accountKeysFromLookups.writable.length;\n        }\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable\n        });\n      }\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(`Failed to find program id for program id index ${compiledIx.programIdIndex}`);\n      }\n      instructions.push(new TransactionInstruction({\n        programId,\n        data: toBuffer(compiledIx.data),\n        keys\n      }));\n    }\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash\n    });\n  }\n  compileToLegacyMessage() {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions\n    });\n  }\n  compileToV0Message(addressLookupTableAccounts) {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts\n    });\n  }\n}\n\n/**\n * Versioned transaction class\n */\nclass VersionedTransaction {\n  get version() {\n    return this.message.version;\n  }\n  constructor(message, signatures) {\n    this.signatures = void 0;\n    this.message = void 0;\n    if (signatures !== undefined) {\n      assert(signatures.length === message.header.numRequiredSignatures, 'Expected signatures length to be equal to the number of required signatures');\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n  serialize() {\n    const serializedMessage = this.message.serialize();\n    const encodedSignaturesLength = Array();\n    encodeLength(encodedSignaturesLength, this.signatures.length);\n    const transactionLayout = BufferLayout.struct([BufferLayout.blob(encodedSignaturesLength.length, 'encodedSignaturesLength'), BufferLayout.seq(signature(), this.signatures.length, 'signatures'), BufferLayout.blob(serializedMessage.length, 'serializedMessage')]);\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode({\n      encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n      signatures: this.signatures,\n      serializedMessage\n    }, serializedTransaction);\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n  static deserialize(serializedTransaction) {\n    let byteArray = [...serializedTransaction];\n    const signatures = [];\n    const signaturesLength = decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)));\n    }\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n  sign(signers) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(signer.publicKey));\n      assert(signerIndex >= 0, `Cannot sign with non signer key ${signer.publicKey.toBase58()}`);\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n  addSignature(publicKey, signature) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    const signerIndex = signerPubkeys.findIndex(pubkey => pubkey.equals(publicKey));\n    assert(signerIndex >= 0, `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`);\n    this.signatures[signerIndex] = signature;\n  }\n}\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nconst NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nconst DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey('SysvarEpochSchedu1e111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey('SysvarS1otHashes111111111111111111111111111');\nconst SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey('SysvarS1otHistory11111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\n\nclass SendTransactionError extends Error {\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs\n  }) {\n    const maybeLogsOutput = logs ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. ` : '';\n    const guideText = '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message;\n    switch (action) {\n      case 'send':\n        message = `Transaction ${signature} resulted in an error. \\n` + `${transactionMessage}. ` + maybeLogsOutput + guideText;\n        break;\n      case 'simulate':\n        message = `Simulation failed. \\nMessage: ${transactionMessage}. \\n` + maybeLogsOutput + guideText;\n        break;\n      default:\n        {\n          message = `Unknown action '${(a => a)(action)}'`;\n        }\n    }\n    super(message);\n    this.signature = void 0;\n    this.transactionMessage = void 0;\n    this.transactionLogs = void 0;\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n  get transactionError() {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs) ? this.transactionLogs : undefined\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs() {\n    const cachedLogs = this.transactionLogs;\n    if (cachedLogs != null && typeof cachedLogs === 'object' && 'then' in cachedLogs) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n  async getLogs(connection) {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection.getTransaction(this.signature).then(tx => {\n          if (tx && tx.meta && tx.meta.logMessages) {\n            const logs = tx.meta.logMessages;\n            this.transactionLogs = logs;\n            resolve(logs);\n          } else {\n            reject(new Error('Log messages not found'));\n          }\n        }).catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nconst SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016\n};\nclass SolanaJSONRPCError extends Error {\n  constructor({\n    code,\n    message,\n    data\n  }, customMessage) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = void 0;\n    this.data = void 0;\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  let status;\n  if (transaction.recentBlockhash != null && transaction.lastValidBlockHeight != null) {\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      signature: signature,\n      blockhash: transaction.recentBlockhash,\n      lastValidBlockHeight: transaction.lastValidBlockHeight\n    }, options && options.commitment)).value;\n  } else if (transaction.minNonceContextSlot != null && transaction.nonceInfo != null) {\n    const {\n      nonceInstruction\n    } = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (await connection.confirmTransaction({\n      abortSignal: options?.abortSignal,\n      minContextSlot: transaction.minNonceContextSlot,\n      nonceAccountPubkey,\n      nonceValue: transaction.nonceInfo.nonce,\n      signature\n    }, options && options.commitment)).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn('sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' + 'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' + 'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.');\n    }\n    status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n  }\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n// zzz\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nfunction decodeData$1(type, buffer) {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n  return data;\n}\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\n\n/**\n * NonceAccount class\n */\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.authorizedPubkey = void 0;\n    this.nonce = void 0;\n    this.feeCalculator = void 0;\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n}\n\nconst encodeDecode = layout => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {\n    decode,\n    encode\n  };\n};\nconst bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n  return bigIntLayout;\n};\nconst u64 = bigInt(8);\n\n/**\n * Create account system transaction params\n */\n\n/**\n * Transfer system transaction params\n */\n\n/**\n * Assign system transaction params\n */\n\n/**\n * Create account with seed system transaction params\n */\n\n/**\n * Create nonce account system transaction params\n */\n\n/**\n * Create nonce account with seed system transaction params\n */\n\n/**\n * Initialize nonce account system instruction params\n */\n\n/**\n * Advance nonce account system instruction params\n */\n\n/**\n * Withdraw nonce account system transaction params\n */\n\n/**\n * Authorize nonce account system transaction params\n */\n\n/**\n * Allocate account system transaction params\n */\n\n/**\n * Allocate account with seed system transaction params\n */\n\n/**\n * Assign account with seed system transaction params\n */\n\n/**\n * Transfer with seed system transaction params\n */\n\n/** Decoded transfer system transaction instruction */\n\n/** Decoded transferWithSeed system transaction instruction */\n\n/**\n * System Instruction class\n */\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData$1(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('lamports'), rustString('seed'), publicKey('programId')])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports)\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(params) {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nSystemProgram.programId = new PublicKey('11111111111111111111111111111111');\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return 2 * (\n    // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 +\n    // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length);\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes: bytes,\n        bytesLength: 0,\n        bytesLengthPadding: 0\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      }));\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(transaction, [payer, program], {\n        preflightCommitment: deployCommitment\n      });\n      const {\n        context,\n        value\n      } = await connection.confirmTransaction({\n        signature: finalizeSignature,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n        blockhash: transaction.recentBlockhash\n      }, deployCommitment);\n      if (value.err) {\n        throw new Error(`Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`);\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve => setTimeout(resolve, Math.round(MS_PER_SLOT / 2)));\n      }\n    }\n\n    // success\n    return true;\n  }\n}\nLoader.chunkSize = CHUNK_SIZE;\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nvar fastStableStringify$1;\nvar hasRequiredFastStableStringify;\n\nfunction requireFastStableStringify () {\n\tif (hasRequiredFastStableStringify) return fastStableStringify$1;\n\thasRequiredFastStableStringify = 1;\n\tvar objToString = Object.prototype.toString;\n\tvar objKeys = Object.keys || function(obj) {\n\t\t\tvar keys = [];\n\t\t\tfor (var name in obj) {\n\t\t\t\tkeys.push(name);\n\t\t\t}\n\t\t\treturn keys;\n\t\t};\n\n\tfunction stringify(val, isArrayProp) {\n\t\tvar i, max, str, keys, key, propVal, toStr;\n\t\tif (val === true) {\n\t\t\treturn \"true\";\n\t\t}\n\t\tif (val === false) {\n\t\t\treturn \"false\";\n\t\t}\n\t\tswitch (typeof val) {\n\t\t\tcase \"object\":\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t\t} else {\n\t\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\t\tstr = '[';\n\t\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + ']';\n\t\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t\t// only object is left\n\t\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\t\tmax = keys.length;\n\t\t\t\t\t\tstr = \"\";\n\t\t\t\t\t\ti = 0;\n\t\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tcase \"function\":\n\t\t\tcase \"undefined\":\n\t\t\t\treturn isArrayProp ? null : undefined;\n\t\t\tcase \"string\":\n\t\t\t\treturn JSON.stringify(val);\n\t\t\tdefault:\n\t\t\t\treturn isFinite(val) ? val : null;\n\t\t}\n\t}\n\n\tfastStableStringify$1 = function(val) {\n\t\tvar returnVal = stringify(val, false);\n\t\tif (returnVal !== undefined) {\n\t\t\treturn ''+ returnVal;\n\t\t}\n\t};\n\treturn fastStableStringify$1;\n}\n\nvar fastStableStringifyExports = /*@__PURE__*/ requireFastStableStringify();\nvar fastStableStringify = /*@__PURE__*/getDefaultExportFromCjs(fastStableStringifyExports);\n\nconst MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nclass EpochSchedule {\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    /** The maximum number of slots in each epoch */\n    this.slotsPerEpoch = void 0;\n    /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n    this.leaderScheduleSlotOffset = void 0;\n    /** Indicates whether epochs start short and grow */\n    this.warmup = void 0;\n    /** The first epoch with `slotsPerEpoch` slots */\n    this.firstNormalEpoch = void 0;\n    /** The first slot of `firstNormalEpoch` */\n    this.firstNormalSlot = void 0;\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n\nvar fetchImpl = globalThis.fetch;\n\nclass RpcWebSocketClient extends CommonClient {\n  constructor(address, options, generate_request_id) {\n    const webSocketFactory = url => {\n      const rpc = WebSocket(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket;\n      } else {\n        this.underlyingSocket = rpc;\n      }\n      return rpc;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n    this.underlyingSocket = void 0;\n  }\n  call(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(new Error('Tried to call a JSON-RPC method `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n  notify(...args) {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(new Error('Tried to send a JSON-RPC notification `' + args[0] + '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' + readyState + ')'));\n  }\n}\n\n/**\n * @internal\n */\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nfunction decodeData(type, data) {\n  let decoded;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);\n  }\n  return decoded;\n}\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\nclass AddressLookupTableAccount {\n  constructor(args) {\n    this.key = void 0;\n    this.state = void 0;\n    this.key = args.key;\n    this.state = args.state;\n  }\n  isActive() {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n  static deserialize(accountData) {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {\n      addresses\n    } = BufferLayout.struct([BufferLayout.seq(publicKey(), numSerializedAddresses, 'addresses')]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority: meta.authority.length !== 0 ? new PublicKey(meta.authority[0]) : undefined,\n      addresses: addresses.map(address => new PublicKey(address))\n    };\n  }\n}\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct([BufferLayout.u32('typeIndex'), u64('deactivationSlot'), BufferLayout.nu64('lastExtendedSlot'), BufferLayout.u8('lastExtendedStartIndex'), BufferLayout.u8(),\n  // option\n  BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u8(), -1), 'authority')])\n};\n\nconst URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\nfunction makeWebsocketUrl(endpoint) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [_,\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  hostish, portWithColon, rest] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort = portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to agave-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\n\n/** @internal */\n/** @internal */\n/** @internal */\n/** @internal */\n\n/** @internal */\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\n\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\n\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\n\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\n\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\n\n/**\n * @internal\n */\n\n/**\n * Extra contextual information for RPC responses\n */\n\n/**\n * Options for sending transactions\n */\n\n/**\n * Options for confirming transactions\n */\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\n\n/**\n * Options for getSignaturesForAddress\n */\n\n/**\n * RPC Response with extra contextual information\n */\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\n\n/**\n * This type represents all transaction confirmation strategies\n */\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig(commitmentOrConfig) {\n  let commitment;\n  let config;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {\n      commitment: specifiedCommitment,\n      ...specifiedConfig\n    } = commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {\n    commitment,\n    config\n  };\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(filters) {\n  return filters.map(filter => 'memcmp' in filter ? {\n    ...filter,\n    memcmp: {\n      ...filter.memcmp,\n      encoding: filter.memcmp.encoding ?? 'base58'\n    }\n  } : filter);\n}\n\n/**\n * @internal\n */\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(version, response) {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(accountKey => new PublicKey(accountKey)),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data)\n      })),\n      addressTableLookups: response.addressTableLookups\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n// Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\n\n/**\n * Configuration object for changing query behavior\n */\n\n/**\n * Information describing a cluster node\n */\n\n/**\n * Information describing a vote account\n */\n\n/**\n * A collection of cluster vote accounts\n */\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number(),\n  commission: optional(nullable(number()))\n}))));\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(type({\n  slot: number(),\n  prioritizationFee: number()\n}));\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = type({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number()\n});\n\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst ParsedInstructionStruct = type({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown()\n});\nconst PartiallyDecodedInstructionStruct = type({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string()\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string())),\n  accounts: optional(nullable(array(nullable(type({\n    executable: boolean(),\n    owner: string(),\n    lamports: number(),\n    data: array(string()),\n    rentEpoch: optional(number())\n  }))))),\n  unitsConsumed: optional(number()),\n  returnData: optional(nullable(type({\n    programId: string(),\n    data: tuple([string(), literal('base64')])\n  }))),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(union([ParsedInstructionStruct, PartiallyDecodedInstructionStruct]))\n  }))))\n}));\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction from the RPC API\n */\n\n/**\n * A processed transaction message from the RPC API\n */\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A partially decoded transaction instruction\n */\n\n/**\n * A parsed transaction message account\n */\n\n/**\n * A parsed transaction instruction\n */\n\n/**\n * A parsed address table lookup\n */\n\n/**\n * A parsed transaction message\n */\n\n/**\n * A parsed transaction\n */\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\n\n/**\n * A parsed transaction on the ledger with meta\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A block with parsed transactions\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\n\n/**\n * A processed block fetched from the RPC API\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\n\n/**\n * A Block on the ledger with signatures only\n */\n\n/**\n * recent block production information\n */\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(type({\n  byIdentity: record(string(), array(number())),\n  range: type({\n    firstSlot: number(),\n    lastSlot: number()\n  })\n}));\n\n/**\n * A performance sample\n */\n\nfunction createRpcClient(url, httpHeaders, customFetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent) {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent;\n  {\n    if (httpAgent != null) {\n      console.warn('You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' + 'It has been ignored; `httpAgent` is only used in Node environments.');\n    }\n  }\n  let fetchWithMiddleware;\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise((resolve, reject) => {\n        try {\n          fetchMiddleware(info, init, (modifiedInfo, modifiedInit) => resolve([modifiedInfo, modifiedInit]));\n        } catch (error) {\n          reject(error);\n        }\n      });\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {}, COMMON_HTTP_HEADERS)\n    };\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n  return clientBrowser;\n}\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(GetRecentPrioritizationFeesResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n\n/**\n * @internal\n */\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst AddressTableLookupStruct = type({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number())\n});\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct))\n  })\n});\nconst AnnotatedAccountKey = type({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')]))\n});\nconst ConfirmedTransactionAccountsModeResult = type({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string())\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct)))\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult\n});\nconst LoadedAddressesResult = type({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString)\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number())\n});\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = type({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number()))\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ParsedConfirmedTransactionResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionAccountsModeResult,\n    meta: nullable(ParsedConfirmedTransactionMetaResult),\n    version: optional(TransactionVersionStruct)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number()),\n  blockHeight: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(RewardsResult)),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: nullable(ConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult,\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number())),\n  version: optional(TransactionVersionStruct)\n})));\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  lastValidBlockHeight: number()\n}));\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * Parsed account data\n */\n\n/**\n * Stake Activation data\n */\n\n/**\n * Data slice argument for getProgramAccounts\n */\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\n\n/**\n * A filter object for getProgramAccounts\n */\n\n/**\n * Configuration object for getProgramAccounts requests\n */\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\n\n/**\n * Configuration object for getMultipleAccounts\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getStakeActivation`\n */\n\n/**\n * Configuration object for `getNonce`\n */\n\n/**\n * Configuration object for `getNonceAndContext`\n */\n\n/**\n * Information describing an account\n */\n\n/**\n * Account information identified by pubkey\n */\n\n/**\n * Callback function for account change notifications\n */\n\n/**\n * Callback function for program account change notifications\n */\n\n/**\n * Callback function for slot change notifications\n */\n\n/**\n * Callback function for slot update notifications\n */\n\n/**\n * Callback function for signature status notifications\n */\n\n/**\n * Signature status notification with transaction result\n */\n\n/**\n * Signature received notification\n */\n\n/**\n * Callback function for signature notifications\n */\n\n/**\n * Signature subscription options\n */\n\n/**\n * Callback function for root change notifications\n */\n\n/**\n * @internal\n */\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * Callback function for log notifications.\n */\n\n/**\n * Signature result\n */\n\n/**\n * Transaction error\n */\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\n\n/**\n * Signature status\n */\n\n/**\n * A confirmed signature with its status\n */\n\n/**\n * An object defining headers to be passed to the RPC server\n */\n\n/**\n * The type of the JavaScript `fetch()` API\n */\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\n\n/**\n * Configuration for instantiating a Connection\n */\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${\"1.95.8\"}`\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nclass Connection {\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, _commitmentOrConfig) {\n    /** @internal */\n    this._commitment = void 0;\n    /** @internal */\n    this._confirmTransactionInitialTimeout = void 0;\n    /** @internal */\n    this._rpcEndpoint = void 0;\n    /** @internal */\n    this._rpcWsEndpoint = void 0;\n    /** @internal */\n    this._rpcClient = void 0;\n    /** @internal */\n    this._rpcRequest = void 0;\n    /** @internal */\n    this._rpcBatchRequest = void 0;\n    /** @internal */\n    this._rpcWebSocket = void 0;\n    /** @internal */\n    this._rpcWebSocketConnected = false;\n    /** @internal */\n    this._rpcWebSocketHeartbeat = null;\n    /** @internal */\n    this._rpcWebSocketIdleTimeout = null;\n    /** @internal\n     * A number that we increment every time an active connection closes.\n     * Used to determine whether the same socket connection that was open\n     * when an async operation started is the same one that's active when\n     * its continuation fires.\n     *\n     */\n    this._rpcWebSocketGeneration = 0;\n    /** @internal */\n    this._disableBlockhashCaching = false;\n    /** @internal */\n    this._pollingBlockhash = false;\n    /** @internal */\n    this._blockhashInfo = {\n      latestBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    };\n    /** @internal */\n    this._nextClientSubscriptionId = 0;\n    /** @internal */\n    this._subscriptionDisposeFunctionsByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionHashByClientSubscriptionId = {};\n    /** @internal */\n    this._subscriptionStateChangeCallbacksByHash = {};\n    /** @internal */\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    /** @internal */\n    this._subscriptionsByHash = {};\n    /**\n     * Special case.\n     * After a signature is processed, RPCs automatically dispose of the\n     * subscription on the server side. We need to track which of these\n     * subscriptions have been disposed in such a way, so that we know\n     * whether the client is dealing with a not-yet-processed signature\n     * (in which case we must tear down the server subscription) or an\n     * already-processed signature (in which case the client can simply\n     * clear out the subscription locally without telling the server).\n     *\n     * NOTE: There is a proposal to eliminate this special case, here:\n     * https://github.com/solana-labs/solana/issues/18892\n     */\n    /** @internal */\n    this._subscriptionsAutoDisposedByRpc = new Set();\n    /*\n     * Returns the current block height of the node\n     */\n    this.getBlockHeight = (() => {\n      const requestPromises = {};\n      return async commitmentOrConfig => {\n        const {\n          commitment,\n          config\n        } = extractCommitmentFromConfig(commitmentOrConfig);\n        const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n        const requestHash = fastStableStringify(args);\n        requestPromises[requestHash] = requestPromises[requestHash] ?? (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(res.error, 'failed to get block height information');\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n        return await requestPromises[requestHash];\n      };\n    })();\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (_commitmentOrConfig && typeof _commitmentOrConfig === 'string') {\n      this._commitment = _commitmentOrConfig;\n    } else if (_commitmentOrConfig) {\n      this._commitment = _commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout = _commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = _commitmentOrConfig.wsEndpoint;\n      httpHeaders = _commitmentOrConfig.httpHeaders;\n      fetch = _commitmentOrConfig.fetch;\n      fetchMiddleware = _commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = _commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = _commitmentOrConfig.httpAgent;\n    }\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(endpoint, httpHeaders, fetch, fetchMiddleware, disableRetryOnRateLimit, httpAgent);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment() {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint() {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(publicKey, commitmentOrConfig) {\n    /** @internal */\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get balance for ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(publicKey, commitmentOrConfig) {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get block time for slot ${slot}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get minimum ledger slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get first available block');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(config) {\n    let configArg = {};\n    if (typeof config === 'string') {\n      configArg = {\n        commitment: config\n      };\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: config && config.commitment || this.commitment\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment\n      };\n    }\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token account balance');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(ownerAddress, filter, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get token accounts owned by account ${ownerAddress.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(config) {\n    const arg = {\n      ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(publicKey, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info about account ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(publicKey, commitmentOrConfig) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(publicKeys, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(array(nullable(AccountInfoResult))));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get info for accounts ${keys}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(publicKeys, commitmentOrConfig) {\n    const res = await this.getMultipleAccountsInfoAndContext(publicKeys, commitmentOrConfig);\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(publicKey, commitmentOrConfig, epoch) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get Stake Activation ${publicKey.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const {\n      encoding,\n      ...configWithoutEncoding\n    } = config || {};\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', {\n      ...configWithoutEncoding,\n      ...(configWithoutEncoding.filters ? {\n        filters: applyDefaultMemcmpEncodingToFilters(configWithoutEncoding.filters)\n      } : null)\n    });\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res = configWithoutEncoding.withContext === true ? create(unsafeRes, jsonRpcResultAndContext(baseSchema)) : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get accounts owned by program ${programId.toBase58()}`);\n    }\n    return res.result;\n  }\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(strategy, commitment) {\n    let rawSignature;\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy;\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy\n      });\n    }\n  }\n  getCancellationPromise(signal) {\n    return new Promise((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n  getTransactionConfirmationPromise({\n    commitment,\n    signature\n  }) {\n    let signatureSubscriptionId;\n    let disposeSignatureSubscriptionStateChangeObserver;\n    let done = false;\n    const confirmationPromise = new Promise((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(signature, (result, context) => {\n          signatureSubscriptionId = undefined;\n          const response = {\n            context,\n            value: result\n          };\n          resolve({\n            __type: TransactionStatus.PROCESSED,\n            response\n          });\n        }, commitment);\n        const subscriptionSetupPromise = new Promise(resolveSubscriptionSetup => {\n          if (signatureSubscriptionId == null) {\n            resolveSubscriptionSetup();\n          } else {\n            disposeSignatureSubscriptionStateChangeObserver = this._onSubscriptionStateChange(signatureSubscriptionId, nextState => {\n              if (nextState === 'subscribed') {\n                resolveSubscriptionSetup();\n              }\n            });\n          }\n        });\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {\n            context,\n            value\n          } = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip':\n                {\n                  if (value.confirmationStatus === 'processed') {\n                    return;\n                  }\n                  break;\n                }\n              case 'finalized':\n              case 'max':\n              case 'root':\n                {\n                  if (value.confirmationStatus === 'processed' || value.confirmationStatus === 'confirmed') {\n                    return;\n                  }\n                  break;\n                }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value\n              }\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {\n      abortConfirmation,\n      confirmationPromise\n    };\n  }\n  async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      lastValidBlockHeight,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({\n          __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED\n        });\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature\n    }\n  }) {\n    let done = false;\n    const expiryPromise = new Promise(resolve => {\n      let currentNonceValue = nonceValue;\n      let lastCheckedSlot = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {\n            context,\n            value: nonceAccount\n          } = await this.getNonceAndContext(nonceAccountPubkey, {\n            commitment,\n            minContextSlot\n          });\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result;\n    try {\n      const outcome = await Promise.race([cancellationPromise, confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus;\n        while (true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (status.context.slot < (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {\n            confirmationStatus\n          } = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (confirmationStatus !== 'processed' && confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (confirmationStatus !== 'confirmed' && confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              (_ => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {\n              err: signatureStatus.value.err\n            }\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n  async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip':\n          {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n      }\n      timeoutId = setTimeout(() => resolve({\n        __type: TransactionStatus.TIMED_OUT,\n        timeoutMs\n      }), timeoutMs);\n    });\n    const {\n      abortConfirmation,\n      confirmationPromise\n    } = this.getTransactionConfirmationPromise({\n      commitment,\n      signature\n    });\n    let result;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(signature, outcome.timeoutMs / 1000);\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction count');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment) {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(addresses, epoch, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined /* encoding */, {\n      ...config,\n      epoch: epoch != null ? epoch : config?.epoch\n    });\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate() {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(limit) {\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', limit ? [limit] : []);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent performance samples');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(message, commitment) {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(config) {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest('getRecentPrioritizationFees', args);\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent prioritization fees');\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(commitmentOrConfig) {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(blockhash, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs([blockhash], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to determine if the blockhash `' + blockhash + '`is valid');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash() {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            const {\n              result\n            } = res;\n            return result ? {\n              ...result,\n              transactions: result.transactions.map(({\n                transaction,\n                meta,\n                version\n              }) => ({\n                meta,\n                transaction: {\n                  ...transaction,\n                  message: versionedMessageFromResponse(version, transaction.message)\n                },\n                version\n              }))\n            } : null;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get confirmed block');\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(slot, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts':\n          {\n            const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        case 'none':\n          {\n            const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n        default:\n          {\n            const res = create(unsafeRes, GetParsedBlockRpcResult);\n            if ('error' in res) {\n              throw res.error;\n            }\n            return res.result;\n          }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e, 'failed to get block');\n    }\n  }\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(configOrCommitment) {\n    let extra;\n    let commitment;\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {\n        commitment: c,\n        ...rest\n      } = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block production information');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(signature, rawConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(result.version, result.transaction.message)\n      }\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(signature, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed', config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(signatures, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, undefined /* encoding */, config);\n      return {\n        methodName: 'getTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(result.version, result.transaction.message)\n        }\n      };\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message\n          }\n        };\n      })\n    };\n    return {\n      ...block,\n      transactions: block.transactions.map(({\n        transaction,\n        meta\n      }) => {\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(startSlot, endSlot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed(endSlot !== undefined ? [startSlot, endSlot] : [startSlot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    const result = res.result;\n    if (!result) return result;\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get confirmed transactions');\n      }\n      return res.result;\n    });\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed signatures for address');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signatures for address');\n    }\n    return res.result;\n  }\n  async getAddressLookupTable(accountKey, config) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(accountKey, config);\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data)\n      });\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(nonceAccount, commitmentOrConfig) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitmentOrConfig);\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n    return {\n      context,\n      value\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(nonceAccount, commitmentOrConfig) {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `airdrop to ${to.toBase58()} failed`);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash ? cachedLatestBlockhash.blockhash : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(config) {\n    const {\n      commitment,\n      config: configArg\n    } = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, `failed to get stake minimum delegation`);\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(transactionOrMessage, configOrSigners, includeAccounts) {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction = Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n      const config = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n      if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        if (!signers) break;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n    if (includeAccounts) {\n      const addresses = (Array.isArray(includeAccounts) ? includeAccounts : message.nonProgramIds()).map(key => key.toBase58());\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses\n      };\n    }\n    if (signers) {\n      config.sigVerify = true;\n    }\n    if (configOrSigners && typeof configOrSigners === 'object' && 'innerInstructions' in configOrSigners) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(transaction, signersOrOptions, options) {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = skipPreflight === true ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n    : options && options.preflightCommitment || this.commitment;\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration = (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(this._subscriptionsByHash).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending'\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _setSubscription(hash, nextSubscription) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _onSubscriptionStateChange(clientSubscriptionId, callback) {\n    const hash = this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = this._subscriptionStateChangeCallbacksByHash[hash] ||= new Set();\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(`Error when closing socket connection: ${err.message}`);\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n    await Promise.all(\n    // Don't be tempted to change this to `Object.entries`. We call\n    // `_updateSubscriptions` recursively when processing the state,\n    // so it's important that we look up the *current* version of\n    // each subscription, every time we process a hash.\n    Object.keys(this._subscriptionsByHash).map(async hash => {\n      const subscription = this._subscriptionsByHash[hash];\n      if (subscription === undefined) {\n        // This entry has since been deleted. Skip.\n        return;\n      }\n      switch (subscription.state) {\n        case 'pending':\n        case 'unsubscribed':\n          if (subscription.callbacks.size === 0) {\n            /**\n             * You can end up here when:\n             *\n             * - a subscription has recently unsubscribed\n             *   without having new callbacks added to it\n             *   while the unsubscribe was in flight, or\n             * - when a pending subscription has its\n             *   listeners removed before a request was\n             *   sent to the server.\n             *\n             * Being that nobody is interested in this\n             * subscription any longer, delete it.\n             */\n            delete this._subscriptionsByHash[hash];\n            if (subscription.state === 'unsubscribed') {\n              delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId];\n            }\n            await this._updateSubscriptions();\n            return;\n          }\n          await (async () => {\n            const {\n              args,\n              method\n            } = subscription;\n            try {\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'subscribing'\n              });\n              const serverSubscriptionId = await this._rpcWebSocket.call(method, args);\n              this._setSubscription(hash, {\n                ...subscription,\n                serverSubscriptionId,\n                state: 'subscribed'\n              });\n              this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId] = subscription.callbacks;\n              await this._updateSubscriptions();\n            } catch (e) {\n              console.error(`Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``, {\n                args,\n                error: e\n              });\n              if (!isCurrentConnectionStillActive()) {\n                return;\n              }\n              // TODO: Maybe add an 'errored' state or a retry limit?\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'pending'\n              });\n              await this._updateSubscriptions();\n            }\n          })();\n          break;\n        case 'subscribed':\n          if (subscription.callbacks.size === 0) {\n            // By the time we successfully set up a subscription\n            // with the server, the client stopped caring about it.\n            // Tear it down now.\n            await (async () => {\n              const {\n                serverSubscriptionId,\n                unsubscribeMethod\n              } = subscription;\n              if (this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)) {\n                /**\n                 * Special case.\n                 * If we're dealing with a subscription that has been auto-\n                 * disposed by the RPC, then we can skip the RPC call to\n                 * tear down the subscription here.\n                 *\n                 * NOTE: There is a proposal to eliminate this special case, here:\n                 * https://github.com/solana-labs/solana/issues/18892\n                 */\n                this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);\n              } else {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribing'\n                });\n                try {\n                  await this._rpcWebSocket.call(unsubscribeMethod, [serverSubscriptionId]);\n                } catch (e) {\n                  if (e instanceof Error) {\n                    console.error(`${unsubscribeMethod} error:`, e.message);\n                  }\n                  if (!isCurrentConnectionStillActive()) {\n                    return;\n                  }\n                  // TODO: Maybe add an 'errored' state or a retry limit?\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'subscribed'\n                  });\n                  await this._updateSubscriptions();\n                  return;\n                }\n              }\n              this._setSubscription(hash, {\n                ...subscription,\n                state: 'unsubscribed'\n              });\n              await this._updateSubscriptions();\n            })();\n          }\n          break;\n      }\n    }));\n  }\n\n  /**\n   * @internal\n   */\n  _handleServerNotification(serverSubscriptionId, callbackArgs) {\n    const callbacks = this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n        // I failed to find a way to convince TypeScript that `cb` is of type\n        // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n        // See https://github.com/microsoft/TypeScript/issues/47615\n        // @ts-ignore\n        ...callbackArgs);\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, AccountNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _makeSubscription(subscriptionConfig,\n  /**\n   * When preparing `args` for a call to `_makeSubscription`, be sure\n   * to carefully apply a default `commitment` property, if necessary.\n   *\n   * - If the user supplied a `commitment` use that.\n   * - Otherwise, if the `Connection::commitment` is set, use that.\n   * - Otherwise, set it to the RPC server default: `finalized`.\n   *\n   * This is extremely important to ensure that these two fundamentally\n   * identical subscriptions produce the same identifying hash:\n   *\n   * - A subscription made without specifying a commitment.\n   * - A subscription made where the commitment specified is the same\n   *   as the default applied to the subscription above.\n   *\n   * Example; these two subscriptions must produce the same hash:\n   *\n   * - An `accountSubscribe` subscription for `'PUBKEY'`\n   * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n   *   `'finalized'`.\n   *\n   * See the 'making a subscription with defaulted params omitted' test\n   * in `connection-subscriptions.ts` for more.\n   */\n  args) {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending'\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(subscription !== undefined, `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`);\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(publicKey, callback, commitmentOrConfig) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([publicKey.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64', config);\n    return this._makeSubscription({\n      callback,\n      method: 'accountSubscribe',\n      unsubscribeMethod: 'accountUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'account change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, ProgramAccountNotificationResult);\n    this._handleServerNotification(subscription, [{\n      accountId: result.value.pubkey,\n      accountInfo: result.value.account\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(programId, callback, commitmentOrConfig, maybeFilters) {\n    const {\n      commitment,\n      config\n    } = extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs([programId.toBase58()], commitment || this._commitment || 'finalized',\n    // Apply connection/server default.\n    'base64' /* encoding */, config ? config : maybeFilters ? {\n      filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)\n    } : undefined /* extra */);\n    return this._makeSubscription({\n      callback,\n      method: 'programSubscribe',\n      unsubscribeMethod: 'programUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'program account change');\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(filter, callback, commitment) {\n    const args = this._buildArgs([typeof filter === 'object' ? {\n      mentions: [filter.toString()]\n    } : filter], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    return this._makeSubscription({\n      callback,\n      method: 'logsSubscribe',\n      unsubscribeMethod: 'logsUnsubscribe'\n    }, args);\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, LogsNotificationResult);\n    this._handleServerNotification(subscription, [result.value, result.context]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotSubscribe',\n      unsubscribeMethod: 'slotUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot change');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SlotUpdateNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'slotsUpdatesSubscribe',\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'slot update');\n  }\n\n  /**\n   * @internal\n   */\n\n  async _unsubscribeClientSubscription(clientSubscriptionId, subscriptionName) {\n    const dispose = this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn('Ignored unsubscribe request because an active subscription with id ' + `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` + 'could not be found.');\n    }\n  }\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, SignatureNotificationResult);\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification(subscription, result.value === 'receivedSignature' ? [{\n      type: 'received'\n    }, result.context] : [{\n      type: 'status',\n      result: result.value\n    }, result.context]);\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(signature, callback, commitment) {\n    const args = this._buildArgs([signature], commitment || this._commitment || 'finalized' // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(signature, callback, options) {\n    const {\n      commitment,\n      ...extra\n    } = {\n      ...options,\n      commitment: options && options.commitment || this._commitment || 'finalized' // Apply connection/server default.\n    };\n    const args = this._buildArgs([signature], commitment, undefined /* encoding */, extra);\n    const clientSubscriptionId = this._makeSubscription({\n      callback: (notification, context) => {\n        callback(notification, context);\n        // Signatures subscriptions are auto-removed by the RPC service\n        // so no need to explicitly send an unsubscribe message.\n        try {\n          this.removeSignatureListener(clientSubscriptionId);\n          // eslint-disable-next-line no-empty\n        } catch (_err) {\n          // Already removed.\n        }\n      },\n      method: 'signatureSubscribe',\n      unsubscribeMethod: 'signatureUnsubscribe'\n    }, args);\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'signature result');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification) {\n    const {\n      result,\n      subscription\n    } = create(notification, RootNotificationResult);\n    this._handleServerNotification(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback) {\n    return this._makeSubscription({\n      callback,\n      method: 'rootSubscribe',\n      unsubscribeMethod: 'rootUnsubscribe'\n    }, [] /* args */);\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(clientSubscriptionId) {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'root change');\n  }\n}\n\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    this._keypair = void 0;\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate() {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(secretKey, options) {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed) {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({\n      publicKey,\n      secretKey\n    });\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey() {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nconst LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64('recentSlot'), BufferLayout.u8('bumpSeed')])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), u64(), BufferLayout.seq(publicKey(), BufferLayout.offset(BufferLayout.u32(), -8), 'addresses')])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  }\n});\nclass AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [layoutType, layout] of Object.entries(LOOKUP_TABLE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == index) {\n        type = layoutType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Invalid Instruction. Should be a LookupTable Instruction');\n    }\n    return type;\n  }\n  static decodeCreateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n    const {\n      recentSlot\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable, instruction.data);\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot)\n    };\n  }\n  static decodeExtendLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(`invalid instruction; found ${instruction.keys.length} keys, expected at least 2`);\n    }\n    const {\n      addresses\n    } = decodeData$1(LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable, instruction.data);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer))\n    };\n  }\n  static decodeCloseLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey\n    };\n  }\n  static decodeFreezeLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n  static decodeDeactivateLookupTable(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error('invalid instruction; programId is not AddressLookupTable Program');\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\nclass AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  static createLookupTable(params) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync([params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)], this.programId);\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed\n    });\n    const keys = [{\n      pubkey: lookupTableAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }];\n    return [new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    }), lookupTableAddress];\n  }\n  static freezeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static extendLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes())\n    });\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (params.payer) {\n      keys.push({\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static deactivateLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n  static closeLookupTable(params) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: params.lookupTable,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: params.authority,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: params.recipient,\n      isSigner: false,\n      isWritable: true\n    }];\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data\n    });\n  }\n}\nAddressLookupTableProgram.programId = new PublicKey('AddressLookupTab1e1111111111111111111111111');\n\n/**\n * Compute Budget Instruction class\n */\nclass ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a ComputeBudgetInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units,\n      additionalFee\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits, instruction.data);\n    return {\n      units,\n      additionalFee\n    };\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      bytes\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame, instruction.data);\n    return {\n      bytes\n    };\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      units\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit, instruction.data);\n    return {\n      units\n    };\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(instruction) {\n    this.checkProgramId(instruction.programId);\n    const {\n      microLamports\n    } = decodeData$1(COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice, instruction.data);\n    return {\n      microLamports\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error('invalid instruction; programId is not ComputeBudgetProgram');\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\n\n/**\n * Request units instruction params\n */\n\n/**\n * Request heap frame instruction params\n */\n\n/**\n * Set compute unit limit instruction params\n */\n\n/**\n * Set compute unit price instruction params\n */\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nconst COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units'), BufferLayout.u32('additionalFee')])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), BufferLayout.u32('units')])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u8('instruction'), u64('microLamports')])\n  }\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nclass ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static requestHeapFrame(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitLimit(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n  static setComputeUnitPrice(params) {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports)\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data\n    });\n  }\n}\nComputeBudgetProgram.programId = new PublicKey('ComputeBudget111111111111111111111111111111');\n\nconst PRIVATE_KEY_BYTES$1 = 64;\nconst PUBLIC_KEY_BYTES$1 = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u8('padding'), BufferLayout.u16('signatureOffset'), BufferLayout.u16('signatureInstructionIndex'), BufferLayout.u16('publicKeyOffset'), BufferLayout.u16('publicKeyInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u16('messageInstructionIndex')]);\nclass Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      instructionIndex\n    } = params;\n    assert(publicKey.length === PUBLIC_KEY_BYTES$1, `Public Key must be ${PUBLIC_KEY_BYTES$1} bytes but received ${publicKey.length} bytes`);\n    assert(signature.length === SIGNATURE_BYTES, `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`);\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n    const index = instructionIndex == null ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n    : instructionIndex;\n    ED25519_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      padding: 0,\n      signatureOffset,\n      signatureInstructionIndex: index,\n      publicKeyOffset,\n      publicKeyInstructionIndex: index,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: index\n    }, instructionData);\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey,\n      message,\n      instructionIndex\n    } = params;\n    assert(privateKey.length === PRIVATE_KEY_BYTES$1, `Private key must be ${PRIVATE_KEY_BYTES$1} bytes but received ${privateKey.length} bytes`);\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nEd25519Program.programId = new PublicKey('Ed25519SigVerify111111111111111111111111111');\n\nconst ecdsaSign = (msgHash, privKey) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery];\n};\nsecp256k1.utils.isValidPrivateKey;\nconst publicKeyCreate = secp256k1.getPublicKey;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0\n    } = params;\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: instructionIndex,\n      ethAddressOffset,\n      ethAddressInstructionIndex: instructionIndex,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: instructionIndex,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message,\n      instructionIndex\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false /* isCompressed */).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\nSecp256k1Program.programId = new PublicKey('KeccakSecp256k11111111111111111111111111111');\n\nvar _Lockup;\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n\n/**\n * Stake account authority info\n */\nclass Authorized {\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    /** stake authority */\n    this.staker = void 0;\n    /** withdraw authority */\n    this.withdrawer = void 0;\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n/**\n * Stake account lockup info\n */\nclass Lockup {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    /** Unix timestamp of lockup expiration */\n    this.unixTimestamp = void 0;\n    /** Epoch of lockup expiration */\n    this.epoch = void 0;\n    /** Lockup custodian authority */\n    this.custodian = void 0;\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n}\n_Lockup = Lockup;\nLockup.default = new _Lockup(0, 0, PublicKey.default);\n/**\n * Create stake account transaction params\n */\n/**\n * Create stake account with seed transaction params\n */\n/**\n * Initialize stake instruction params\n */\n/**\n * Delegate stake instruction params\n */\n/**\n * Authorize stake instruction params\n */\n/**\n * Authorize stake instruction params using a derived key\n */\n/**\n * Split stake instruction params\n */\n/**\n * Split with seed transaction params\n */\n/**\n * Withdraw stake instruction params\n */\n/**\n * Deactivate stake instruction params\n */\n/**\n * Merge stake instruction params\n */\n/**\n * Stake Instruction class\n */\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData$1(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params,\n  // Compute the cost of allocating the new stake account in lamports\n  rentExemptReserve) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.authorizedPubkey,\n      newAccountPubkey: params.splitStakePubkey,\n      lamports: rentExemptReserve,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params,\n  // If this stake account is new, compute the cost of allocating it in lamports\n  rentExemptReserve) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.allocate({\n      accountPubkey: splitStakePubkey,\n      basePubkey,\n      seed,\n      space: this.space,\n      programId: this.programId\n    }));\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(SystemProgram.transfer({\n        fromPubkey: params.authorizedPubkey,\n        toPubkey: splitStakePubkey,\n        lamports: rentExemptReserve\n      }));\n    }\n    return transaction.add(this.splitInstruction({\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    }));\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params) {\n    const {\n      stakePubkey,\n      sourceStakePubKey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: sourceStakePubKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n}\nStakeProgram.programId = new PublicKey('Stake11111111111111111111111111111111111111');\n/**\n * Max space of a Stake account\n *\n * This is generated from the solana-stake-program StakeState struct as\n * `StakeStateV2::size_of()`:\n * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n */\nStakeProgram.space = 200;\n\n/**\n * Vote account info\n */\nclass VoteInit {\n  /** [0, 100] */\n\n  constructor(nodePubkey, authorizedVoter, authorizedWithdrawer, commission) {\n    this.nodePubkey = void 0;\n    this.authorizedVoter = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\n\n/**\n * InitializeAccount instruction params\n */\n\n/**\n * Authorize instruction params\n */\n\n/**\n * AuthorizeWithSeed instruction params\n */\n\n/**\n * Withdraw from vote account transaction params\n */\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\n\n/**\n * Vote Instruction class\n */\nclass VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n    const {\n      voteInit\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.InitializeAccount, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(new PublicKey(voteInit.nodePubkey), new PublicKey(voteInit.authorizedVoter), new PublicKey(voteInit.authorizedWithdrawer), voteInit.commission)\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      voteAuthorizationType\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      }\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType\n      }\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(currentAuthorityDerivedKeyOwnerPubkey),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType\n      },\n      votePubkey: instruction.keys[0].pubkey\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData$1(VOTE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\n\n/** @internal */\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteInit()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('voteAuthorizationType')])\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), voteAuthorizeWithSeedArgs()])\n  }\n});\n\n/**\n * VoteAuthorize type\n */\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nconst VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nclass VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(params) {\n    const {\n      votePubkey,\n      nodePubkey,\n      voteInit\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(voteInit.authorizedWithdrawer.toBuffer()),\n        commission: voteInit.commission\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: nodePubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.votePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    return transaction.add(this.initializeAccount({\n      votePubkey: params.votePubkey,\n      nodePubkey: params.voteInit.nodePubkey,\n      voteInit: params.voteInit\n    }));\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params) {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params) {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index\n      }\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: currentAuthorityDerivedKeyBasePubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      lamports,\n      toPubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(params, currentVoteAccountBalance, rentExemptMinimum) {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error('Withdraw will leave vote account with insufficient funds.');\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(params) {\n    const {\n      votePubkey,\n      authorizedWithdrawerPubkey,\n      nodePubkey\n    } = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n    const keys = [{\n      pubkey: votePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodePubkey,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: authorizedWithdrawerPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n}\nVoteProgram.programId = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * Max space of a Vote account\n *\n * This is generated from the solana-vote-program VoteState struct as\n * `VoteState::size_of()`:\n * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n *\n * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n */\nVoteProgram.space = 3762;\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n\n/**\n * @internal\n */\n\n/**\n * Info used to identity validators.\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string())\n});\n\n/**\n * ValidatorInfo class\n */\nclass ValidatorInfo {\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    /**\n     * validator public key\n     */\n    this.key = void 0;\n    /**\n     * validator information\n     */\n    this.info = void 0;\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(buffer) {\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH));\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n    return null;\n  }\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n\n/**\n * History of how many credits earned by the end of each epoch\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedWithdrawer'), BufferLayout.u8('commission'), BufferLayout.nu64(),\n// votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64(),\n// authorizedVoters.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), publicKey('authorizedVoter')]), BufferLayout.offset(BufferLayout.u32(), -8), 'authorizedVoters'), BufferLayout.struct([BufferLayout.seq(BufferLayout.struct([publicKey('authorizedPubkey'), BufferLayout.nu64('epochOfLastAuthorizedSwitch'), BufferLayout.nu64('targetEpoch')]), 32, 'buf'), BufferLayout.nu64('idx'), BufferLayout.u8('isEmpty')], 'priorVoters'), BufferLayout.nu64(),\n// epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits'), BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')], 'lastTimestamp')]);\n/**\n * VoteAccount class\n */\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    this.nodePubkey = void 0;\n    this.authorizedWithdrawer = void 0;\n    this.commission = void 0;\n    this.rootSlot = void 0;\n    this.votes = void 0;\n    this.authorizedVoters = void 0;\n    this.priorVoters = void 0;\n    this.epochCredits = void 0;\n    this.lastTimestamp = void 0;\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(buffer) {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n    let rootSlot = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp\n    });\n  }\n}\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch\n}) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter)\n  };\n}\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch\n}) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch\n  };\n}\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty\n}) {\n  if (isEmpty) {\n    return [];\n  }\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx).map(parsePriorVoters)];\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\n\n// eslint-disable-next-line no-redeclare\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, confirmationStrategyOrConfirmOptions, maybeConfirmOptions) {\n  let confirmationStrategy;\n  let options;\n  if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'lastValidBlockHeight')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else if (confirmationStrategyOrConfirmOptions && Object.prototype.hasOwnProperty.call(confirmationStrategyOrConfirmOptions, 'nonceValue')) {\n    confirmationStrategy = confirmationStrategyOrConfirmOptions;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy ? connection.confirmTransaction(confirmationStrategy, commitment) : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`\n      });\n    }\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n  return signature;\n}\n\n/**\n * There are 1-billion lamports in one SOL\n */\nconst LAMPORTS_PER_SOL = 1000000000;\n\nexport { Account, AddressLookupTableAccount, AddressLookupTableInstruction, AddressLookupTableProgram, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, COMPUTE_BUDGET_INSTRUCTION_LAYOUTS, ComputeBudgetInstruction, ComputeBudgetProgram, Connection, Ed25519Program, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, LOOKUP_TABLE_INSTRUCTION_LAYOUTS, Loader, Lockup, MAX_SEED_LENGTH, Message, MessageAccountKeys, MessageV0, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PUBLIC_KEY_LENGTH, PublicKey, SIGNATURE_LENGTH_IN_BYTES, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_EPOCH_SCHEDULE_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_SLOT_HASHES_PUBKEY, SYSVAR_SLOT_HISTORY_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, SendTransactionError, SolanaJSONRPCError, SolanaJSONRPCErrorCode, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionExpiredBlockheightExceededError, TransactionExpiredNonceInvalidError, TransactionExpiredTimeoutError, TransactionInstruction, TransactionMessage, TransactionStatus, VALIDATOR_INFO_KEY, VERSION_PREFIX_MASK, VOTE_PROGRAM_ID, ValidatorInfo, VersionedMessage, VersionedTransaction, VoteAccount, VoteAuthorizationLayout, VoteInit, VoteInstruction, VoteProgram, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };\n//# sourceMappingURL=index.browser.esm.js.map\n",
    "/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\nclass StructError extends TypeError {\n    constructor(failure, failures) {\n        let cached;\n        const { message, explanation, ...rest } = failure;\n        const { path } = failure;\n        const msg = path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`;\n        super(explanation ?? msg);\n        if (explanation != null)\n            this.cause = msg;\n        Object.assign(this, rest);\n        this.name = this.constructor.name;\n        this.failures = () => {\n            return (cached ?? (cached = [failure, ...failures()]));\n        };\n    }\n}\n\n/**\n * Check if a value is an iterator.\n */\nfunction isIterable(x) {\n    return isObject(x) && typeof x[Symbol.iterator] === 'function';\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isObject(x) {\n    return typeof x === 'object' && x != null;\n}\n/**\n * Check if a value is a non-array object.\n */\nfunction isNonArrayObject(x) {\n    return isObject(x) && !Array.isArray(x);\n}\n/**\n * Check if a value is a plain object.\n */\nfunction isPlainObject(x) {\n    if (Object.prototype.toString.call(x) !== '[object Object]') {\n        return false;\n    }\n    const prototype = Object.getPrototypeOf(x);\n    return prototype === null || prototype === Object.prototype;\n}\n/**\n * Return a value as a printable string.\n */\nfunction print(value) {\n    if (typeof value === 'symbol') {\n        return value.toString();\n    }\n    return typeof value === 'string' ? JSON.stringify(value) : `${value}`;\n}\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\nfunction shiftIterator(input) {\n    const { done, value } = input.next();\n    return done ? undefined : value;\n}\n/**\n * Convert a single validation result to a failure.\n */\nfunction toFailure(result, context, struct, value) {\n    if (result === true) {\n        return;\n    }\n    else if (result === false) {\n        result = {};\n    }\n    else if (typeof result === 'string') {\n        result = { message: result };\n    }\n    const { path, branch } = context;\n    const { type } = struct;\n    const { refinement, message = `Expected a value of type \\`${type}\\`${refinement ? ` with refinement \\`${refinement}\\`` : ''}, but received: \\`${print(value)}\\``, } = result;\n    return {\n        value,\n        type,\n        refinement,\n        key: path[path.length - 1],\n        path,\n        branch,\n        ...result,\n        message,\n    };\n}\n/**\n * Convert a validation result to an iterable of failures.\n */\nfunction* toFailures(result, context, struct, value) {\n    if (!isIterable(result)) {\n        result = [result];\n    }\n    for (const r of result) {\n        const failure = toFailure(r, context, struct, value);\n        if (failure) {\n            yield failure;\n        }\n    }\n}\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\nfunction* run(value, struct, options = {}) {\n    const { path = [], branch = [value], coerce = false, mask = false } = options;\n    const ctx = { path, branch, mask };\n    if (coerce) {\n        value = struct.coercer(value, ctx);\n    }\n    let status = 'valid';\n    for (const failure of struct.validator(value, ctx)) {\n        failure.explanation = options.message;\n        status = 'not_valid';\n        yield [failure, undefined];\n    }\n    for (let [k, v, s] of struct.entries(value, ctx)) {\n        const ts = run(v, s, {\n            path: k === undefined ? path : [...path, k],\n            branch: k === undefined ? branch : [...branch, v],\n            coerce,\n            mask,\n            message: options.message,\n        });\n        for (const t of ts) {\n            if (t[0]) {\n                status = t[0].refinement != null ? 'not_refined' : 'not_valid';\n                yield [t[0], undefined];\n            }\n            else if (coerce) {\n                v = t[1];\n                if (k === undefined) {\n                    value = v;\n                }\n                else if (value instanceof Map) {\n                    value.set(k, v);\n                }\n                else if (value instanceof Set) {\n                    value.add(v);\n                }\n                else if (isObject(value)) {\n                    if (v !== undefined || k in value)\n                        value[k] = v;\n                }\n            }\n        }\n    }\n    if (status !== 'not_valid') {\n        for (const failure of struct.refiner(value, ctx)) {\n            failure.explanation = options.message;\n            status = 'not_refined';\n            yield [failure, undefined];\n        }\n    }\n    if (status === 'valid') {\n        yield [undefined, value];\n    }\n}\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\nclass Struct {\n    constructor(props) {\n        const { type, schema, validator, refiner, coercer = (value) => value, entries = function* () { }, } = props;\n        this.type = type;\n        this.schema = schema;\n        this.entries = entries;\n        this.coercer = coercer;\n        if (validator) {\n            this.validator = (value, context) => {\n                const result = validator(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.validator = () => [];\n        }\n        if (refiner) {\n            this.refiner = (value, context) => {\n                const result = refiner(value, context);\n                return toFailures(result, context, this, value);\n            };\n        }\n        else {\n            this.refiner = () => [];\n        }\n    }\n    /**\n     * Assert that a value passes the struct's validation, throwing if it doesn't.\n     */\n    assert(value, message) {\n        return assert(value, this, message);\n    }\n    /**\n     * Create a value with the struct's coercion logic, then validate it.\n     */\n    create(value, message) {\n        return create(value, this, message);\n    }\n    /**\n     * Check if a value passes the struct's validation.\n     */\n    is(value) {\n        return is(value, this);\n    }\n    /**\n     * Mask a value, coercing and validating it, but returning only the subset of\n     * properties defined by the struct's schema. Masking applies recursively to\n     * props of `object` structs only.\n     */\n    mask(value, message) {\n        return mask(value, this, message);\n    }\n    /**\n     * Validate a value with the struct's validation logic, returning a tuple\n     * representing the result.\n     *\n     * You may optionally pass `true` for the `coerce` argument to coerce\n     * the value before attempting to validate it. If you do, the result will\n     * contain the coerced result when successful. Also, `mask` will turn on\n     * masking of the unknown `object` props recursively if passed.\n     */\n    validate(value, options = {}) {\n        return validate(value, this, options);\n    }\n}\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\nfunction assert(value, struct, message) {\n    const result = validate(value, struct, { message });\n    if (result[0]) {\n        throw result[0];\n    }\n}\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\nfunction create(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\nfunction mask(value, struct, message) {\n    const result = validate(value, struct, { coerce: true, mask: true, message });\n    if (result[0]) {\n        throw result[0];\n    }\n    else {\n        return result[1];\n    }\n}\n/**\n * Check if a value passes a struct.\n */\nfunction is(value, struct) {\n    const result = validate(value, struct);\n    return !result[0];\n}\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\nfunction validate(value, struct, options = {}) {\n    const tuples = run(value, struct, options);\n    const tuple = shiftIterator(tuples);\n    if (tuple[0]) {\n        const error = new StructError(tuple[0], function* () {\n            for (const t of tuples) {\n                if (t[0]) {\n                    yield t[0];\n                }\n            }\n        });\n        return [error, undefined];\n    }\n    else {\n        const v = tuple[1];\n        return [undefined, v];\n    }\n}\n\nfunction assign(...Structs) {\n    const isType = Structs[0].type === 'type';\n    const schemas = Structs.map((s) => s.schema);\n    const schema = Object.assign({}, ...schemas);\n    return isType ? type(schema) : object(schema);\n}\n/**\n * Define a new struct type with a custom validation function.\n */\nfunction define(name, validator) {\n    return new Struct({ type: name, schema: null, validator });\n}\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\nfunction deprecated(struct, log) {\n    return new Struct({\n        ...struct,\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n        validator(value, ctx) {\n            if (value === undefined) {\n                return true;\n            }\n            else {\n                log(value, ctx);\n                return struct.validator(value, ctx);\n            }\n        },\n    });\n}\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\nfunction dynamic(fn) {\n    return new Struct({\n        type: 'dynamic',\n        schema: null,\n        *entries(value, ctx) {\n            const struct = fn(value, ctx);\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            const struct = fn(value, ctx);\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\nfunction lazy(fn) {\n    let struct;\n    return new Struct({\n        type: 'lazy',\n        schema: null,\n        *entries(value, ctx) {\n            struct ?? (struct = fn());\n            yield* struct.entries(value, ctx);\n        },\n        validator(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.validator(value, ctx);\n        },\n        coercer(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.coercer(value, ctx);\n        },\n        refiner(value, ctx) {\n            struct ?? (struct = fn());\n            return struct.refiner(value, ctx);\n        },\n    });\n}\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\nfunction omit(struct, keys) {\n    const { schema } = struct;\n    const subschema = { ...schema };\n    for (const key of keys) {\n        delete subschema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\nfunction partial(struct) {\n    const isStruct = struct instanceof Struct;\n    const schema = isStruct ? { ...struct.schema } : { ...struct };\n    for (const key in schema) {\n        schema[key] = optional(schema[key]);\n    }\n    if (isStruct && struct.type === 'type') {\n        return type(schema);\n    }\n    return object(schema);\n}\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\nfunction pick(struct, keys) {\n    const { schema } = struct;\n    const subschema = {};\n    for (const key of keys) {\n        subschema[key] = schema[key];\n    }\n    switch (struct.type) {\n        case 'type':\n            return type(subschema);\n        default:\n            return object(subschema);\n    }\n}\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\nfunction struct(name, validator) {\n    console.warn('superstruct@0.11 - The `struct` helper has been renamed to `define`.');\n    return define(name, validator);\n}\n\n/**\n * Ensure that any value passes validation.\n */\nfunction any() {\n    return define('any', () => true);\n}\nfunction array(Element) {\n    return new Struct({\n        type: 'array',\n        schema: Element,\n        *entries(value) {\n            if (Element && Array.isArray(value)) {\n                for (const [i, v] of value.entries()) {\n                    yield [i, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array value, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a bigint.\n */\nfunction bigint() {\n    return define('bigint', (value) => {\n        return typeof value === 'bigint';\n    });\n}\n/**\n * Ensure that a value is a boolean.\n */\nfunction boolean() {\n    return define('boolean', (value) => {\n        return typeof value === 'boolean';\n    });\n}\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\nfunction date() {\n    return define('date', (value) => {\n        return ((value instanceof Date && !isNaN(value.getTime())) ||\n            `Expected a valid \\`Date\\` object, but received: ${print(value)}`);\n    });\n}\nfunction enums(values) {\n    const schema = {};\n    const description = values.map((v) => print(v)).join();\n    for (const key of values) {\n        schema[key] = key;\n    }\n    return new Struct({\n        type: 'enums',\n        schema,\n        validator(value) {\n            return (values.includes(value) ||\n                `Expected one of \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a function.\n */\nfunction func() {\n    return define('func', (value) => {\n        return (typeof value === 'function' ||\n            `Expected a function, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an instance of a specific class.\n */\nfunction instance(Class) {\n    return define('instance', (value) => {\n        return (value instanceof Class ||\n            `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is an integer.\n */\nfunction integer() {\n    return define('integer', (value) => {\n        return ((typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n            `Expected an integer, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value matches all of a set of types.\n */\nfunction intersection(Structs) {\n    return new Struct({\n        type: 'intersection',\n        schema: null,\n        *entries(value, ctx) {\n            for (const S of Structs) {\n                yield* S.entries(value, ctx);\n            }\n        },\n        *validator(value, ctx) {\n            for (const S of Structs) {\n                yield* S.validator(value, ctx);\n            }\n        },\n        *refiner(value, ctx) {\n            for (const S of Structs) {\n                yield* S.refiner(value, ctx);\n            }\n        },\n    });\n}\nfunction literal(constant) {\n    const description = print(constant);\n    const t = typeof constant;\n    return new Struct({\n        type: 'literal',\n        schema: t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n        validator(value) {\n            return (value === constant ||\n                `Expected the literal \\`${description}\\`, but received: ${print(value)}`);\n        },\n    });\n}\nfunction map(Key, Value) {\n    return new Struct({\n        type: 'map',\n        schema: null,\n        *entries(value) {\n            if (Key && Value && value instanceof Map) {\n                for (const [k, v] of value.entries()) {\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Map ? new Map(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Map ||\n                `Expected a \\`Map\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that no value ever passes validation.\n */\nfunction never() {\n    return define('never', () => false);\n}\n/**\n * Augment an existing struct to allow `null` values.\n */\nfunction nullable(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === null || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is a number.\n */\nfunction number() {\n    return define('number', (value) => {\n        return ((typeof value === 'number' && !isNaN(value)) ||\n            `Expected a number, but received: ${print(value)}`);\n    });\n}\nfunction object(schema) {\n    const knowns = schema ? Object.keys(schema) : [];\n    const Never = never();\n    return new Struct({\n        type: 'object',\n        schema: schema ? schema : null,\n        *entries(value) {\n            if (schema && isObject(value)) {\n                const unknowns = new Set(Object.keys(value));\n                for (const key of knowns) {\n                    unknowns.delete(key);\n                    yield [key, value[key], schema[key]];\n                }\n                for (const key of unknowns) {\n                    yield [key, value[key], Never];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value, ctx) {\n            if (!isNonArrayObject(value)) {\n                return value;\n            }\n            const coerced = { ...value };\n            // The `object` struct has special behaviour enabled by the mask flag.\n            // When masking, properties that are not in the schema are deleted from\n            // the coerced object instead of eventually failing validaiton.\n            if (ctx.mask && schema) {\n                for (const key in coerced) {\n                    if (schema[key] === undefined) {\n                        delete coerced[key];\n                    }\n                }\n            }\n            return coerced;\n        },\n    });\n}\n/**\n * Augment a struct to allow `undefined` values.\n */\nfunction optional(struct) {\n    return new Struct({\n        ...struct,\n        validator: (value, ctx) => value === undefined || struct.validator(value, ctx),\n        refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    });\n}\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\nfunction record(Key, Value) {\n    return new Struct({\n        type: 'record',\n        schema: null,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k in value) {\n                    const v = value[k];\n                    yield [k, k, Key];\n                    yield [k, v, Value];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\nfunction regexp() {\n    return define('regexp', (value) => {\n        return value instanceof RegExp;\n    });\n}\nfunction set(Element) {\n    return new Struct({\n        type: 'set',\n        schema: null,\n        *entries(value) {\n            if (Element && value instanceof Set) {\n                for (const v of value) {\n                    yield [v, v, Element];\n                }\n            }\n        },\n        coercer(value) {\n            return value instanceof Set ? new Set(value) : value;\n        },\n        validator(value) {\n            return (value instanceof Set ||\n                `Expected a \\`Set\\` object, but received: ${print(value)}`);\n        },\n    });\n}\n/**\n * Ensure that a value is a string.\n */\nfunction string() {\n    return define('string', (value) => {\n        return (typeof value === 'string' ||\n            `Expected a string, but received: ${print(value)}`);\n    });\n}\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\nfunction tuple(Structs) {\n    const Never = never();\n    return new Struct({\n        type: 'tuple',\n        schema: null,\n        *entries(value) {\n            if (Array.isArray(value)) {\n                const length = Math.max(Structs.length, value.length);\n                for (let i = 0; i < length; i++) {\n                    yield [i, value[i], Structs[i] || Never];\n                }\n            }\n        },\n        validator(value) {\n            return (Array.isArray(value) ||\n                `Expected an array, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return Array.isArray(value) ? value.slice() : value;\n        },\n    });\n}\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\nfunction type(schema) {\n    const keys = Object.keys(schema);\n    return new Struct({\n        type: 'type',\n        schema,\n        *entries(value) {\n            if (isObject(value)) {\n                for (const k of keys) {\n                    yield [k, value[k], schema[k]];\n                }\n            }\n        },\n        validator(value) {\n            return (isNonArrayObject(value) ||\n                `Expected an object, but received: ${print(value)}`);\n        },\n        coercer(value) {\n            return isNonArrayObject(value) ? { ...value } : value;\n        },\n    });\n}\n/**\n * Ensure that a value matches one of a set of types.\n */\nfunction union(Structs) {\n    const description = Structs.map((s) => s.type).join(' | ');\n    return new Struct({\n        type: 'union',\n        schema: null,\n        coercer(value, ctx) {\n            for (const S of Structs) {\n                const [error, coerced] = S.validate(value, {\n                    coerce: true,\n                    mask: ctx.mask,\n                });\n                if (!error) {\n                    return coerced;\n                }\n            }\n            return value;\n        },\n        validator(value, ctx) {\n            const failures = [];\n            for (const S of Structs) {\n                const [...tuples] = run(value, S, ctx);\n                const [first] = tuples;\n                if (!first[0]) {\n                    return [];\n                }\n                else {\n                    for (const [failure] of tuples) {\n                        if (failure) {\n                            failures.push(failure);\n                        }\n                    }\n                }\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(value)}`,\n                ...failures,\n            ];\n        },\n    });\n}\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\nfunction unknown() {\n    return define('unknown', () => true);\n}\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction coerce(struct, condition, coercer) {\n    return new Struct({\n        ...struct,\n        coercer: (value, ctx) => {\n            return is(value, condition)\n                ? struct.coercer(coercer(value, ctx), ctx)\n                : struct.coercer(value, ctx);\n        },\n    });\n}\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction defaulted(struct, fallback, options = {}) {\n    return coerce(struct, unknown(), (x) => {\n        const f = typeof fallback === 'function' ? fallback() : fallback;\n        if (x === undefined) {\n            return f;\n        }\n        if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n            const ret = { ...x };\n            let changed = false;\n            for (const key in f) {\n                if (ret[key] === undefined) {\n                    ret[key] = f[key];\n                    changed = true;\n                }\n            }\n            if (changed) {\n                return ret;\n            }\n        }\n        return x;\n    });\n}\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\nfunction trimmed(struct) {\n    return coerce(struct, string(), (x) => x.trim());\n}\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\nfunction empty(struct) {\n    return refine(struct, 'empty', (value) => {\n        const size = getSize(value);\n        return (size === 0 ||\n            `Expected an empty ${struct.type} but received one with a size of \\`${size}\\``);\n    });\n}\nfunction getSize(value) {\n    if (value instanceof Map || value instanceof Set) {\n        return value.size;\n    }\n    else {\n        return value.length;\n    }\n}\n/**\n * Ensure that a number or date is below a threshold.\n */\nfunction max(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'max', (value) => {\n        return exclusive\n            ? value < threshold\n            : value <= threshold ||\n                `Expected a ${struct.type} less than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a number or date is above a threshold.\n */\nfunction min(struct, threshold, options = {}) {\n    const { exclusive } = options;\n    return refine(struct, 'min', (value) => {\n        return exclusive\n            ? value > threshold\n            : value >= threshold ||\n                `Expected a ${struct.type} greater than ${exclusive ? '' : 'or equal to '}${threshold} but received \\`${value}\\``;\n    });\n}\n/**\n * Ensure that a string, array, map or set is not empty.\n */\nfunction nonempty(struct) {\n    return refine(struct, 'nonempty', (value) => {\n        const size = getSize(value);\n        return (size > 0 || `Expected a nonempty ${struct.type} but received an empty one`);\n    });\n}\n/**\n * Ensure that a string matches a regular expression.\n */\nfunction pattern(struct, regexp) {\n    return refine(struct, 'pattern', (value) => {\n        return (regexp.test(value) ||\n            `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`);\n    });\n}\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\nfunction size(struct, min, max = min) {\n    const expected = `Expected a ${struct.type}`;\n    const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``;\n    return refine(struct, 'size', (value) => {\n        if (typeof value === 'number' || value instanceof Date) {\n            return ((min <= value && value <= max) ||\n                `${expected} ${of} but received \\`${value}\\``);\n        }\n        else if (value instanceof Map || value instanceof Set) {\n            const { size } = value;\n            return ((min <= size && size <= max) ||\n                `${expected} with a size ${of} but received one with a size of \\`${size}\\``);\n        }\n        else {\n            const { length } = value;\n            return ((min <= length && length <= max) ||\n                `${expected} with a length ${of} but received one with a length of \\`${length}\\``);\n        }\n    });\n}\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\nfunction refine(struct, name, refiner) {\n    return new Struct({\n        ...struct,\n        *refiner(value, ctx) {\n            yield* struct.refiner(value, ctx);\n            const result = refiner(value, ctx);\n            const failures = toFailures(result, ctx, struct, value);\n            for (const failure of failures) {\n                yield { ...failure, refinement: name };\n            }\n        },\n    });\n}\n\nexport { Struct, StructError, any, array, assert, assign, bigint, boolean, coerce, create, date, defaulted, define, deprecated, dynamic, empty, enums, func, instance, integer, intersection, is, lazy, literal, map, mask, max, min, never, nonempty, nullable, number, object, omit, optional, partial, pattern, pick, record, refine, regexp, set, size, string, struct, trimmed, tuple, type, union, unknown, validate };\n//# sourceMappingURL=index.mjs.map\n",
    "import { Buffer } from 'buffer';\nimport { EventEmitter } from 'eventemitter3';\n\n// node_modules/esbuild-plugin-polyfill-node/polyfills/buffer.js\nvar WebSocketBrowserImpl = class extends EventEmitter {\n  socket;\n  /** Instantiate a WebSocket class\n  * @constructor\n  * @param {String} address - url to a websocket server\n  * @param {(Object)} options - websocket options\n  * @param {(String|Array)} protocols - a list of protocols\n  * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n  */\n  constructor(address, options, protocols) {\n    super();\n    this.socket = new window.WebSocket(address, protocols);\n    this.socket.onopen = () => this.emit(\"open\");\n    this.socket.onmessage = (event) => this.emit(\"message\", event.data);\n    this.socket.onerror = (error) => this.emit(\"error\", error);\n    this.socket.onclose = (event) => {\n      this.emit(\"close\", event.code, event.reason);\n    };\n  }\n  /**\n  * Sends data through a websocket connection\n  * @method\n  * @param {(String|Object)} data - data to be sent via websocket\n  * @param {Object} optionsOrCallback - ws options\n  * @param {Function} callback - a callback called once the data is sent\n  * @return {Undefined}\n  */\n  send(data, optionsOrCallback, callback) {\n    const cb = callback || optionsOrCallback;\n    try {\n      this.socket.send(data);\n      cb();\n    } catch (error) {\n      cb(error);\n    }\n  }\n  /**\n  * Closes an underlying socket\n  * @method\n  * @param {Number} code - status code explaining why the connection is being closed\n  * @param {String} reason - a description why the connection is closing\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  close(code, reason) {\n    this.socket.close(code, reason);\n  }\n  addEventListener(type, listener, options) {\n    this.socket.addEventListener(type, listener, options);\n  }\n};\nfunction WebSocket(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}\n\n// src/lib/utils.ts\nvar DefaultDataPack = class {\n  encode(value) {\n    return JSON.stringify(value);\n  }\n  decode(value) {\n    return JSON.parse(value);\n  }\n};\n\n// src/lib/client.ts\nvar CommonClient = class extends EventEmitter {\n  address;\n  rpc_id;\n  queue;\n  options;\n  autoconnect;\n  ready;\n  reconnect;\n  reconnect_timer_id;\n  reconnect_interval;\n  max_reconnects;\n  rest_options;\n  current_reconnects;\n  generate_request_id;\n  socket;\n  webSocketFactory;\n  dataPack;\n  /**\n  * Instantiate a Client class.\n  * @constructor\n  * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n  * @param {String} address - url to a websocket server\n  * @param {Object} options - ws options object with reconnect parameters\n  * @param {Function} generate_request_id - custom generation request Id\n  * @param {DataPack} dataPack - data pack contains encoder and decoder\n  * @return {CommonClient}\n  */\n  constructor(webSocketFactory, address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5,\n    ...rest_options\n  } = {}, generate_request_id, dataPack) {\n    super();\n    this.webSocketFactory = webSocketFactory;\n    this.queue = {};\n    this.rpc_id = 0;\n    this.address = address;\n    this.autoconnect = autoconnect;\n    this.ready = false;\n    this.reconnect = reconnect;\n    this.reconnect_timer_id = void 0;\n    this.reconnect_interval = reconnect_interval;\n    this.max_reconnects = max_reconnects;\n    this.rest_options = rest_options;\n    this.current_reconnects = 0;\n    this.generate_request_id = generate_request_id || (() => ++this.rpc_id);\n    if (!dataPack) this.dataPack = new DefaultDataPack();\n    else this.dataPack = dataPack;\n    if (this.autoconnect)\n      this._connect(this.address, {\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects,\n        ...this.rest_options\n      });\n  }\n  /**\n  * Connects to a defined server if not connected already.\n  * @method\n  * @return {Undefined}\n  */\n  connect() {\n    if (this.socket) return;\n    this._connect(this.address, {\n      autoconnect: this.autoconnect,\n      reconnect: this.reconnect,\n      reconnect_interval: this.reconnect_interval,\n      max_reconnects: this.max_reconnects,\n      ...this.rest_options\n    });\n  }\n  /**\n  * Calls a registered RPC method on server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object|Array} params - optional method parameters\n  * @param {Number} timeout - RPC reply timeout value\n  * @param {Object} ws_opts - options passed to ws\n  * @return {Promise}\n  */\n  call(method, params, timeout, ws_opts) {\n    if (!ws_opts && \"object\" === typeof timeout) {\n      ws_opts = timeout;\n      timeout = null;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const rpc_id = this.generate_request_id(method, params);\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params: params || void 0,\n        id: rpc_id\n      };\n      this.socket.send(this.dataPack.encode(message), ws_opts, (error) => {\n        if (error) return reject(error);\n        this.queue[rpc_id] = { promise: [resolve, reject] };\n        if (timeout) {\n          this.queue[rpc_id].timeout = setTimeout(() => {\n            delete this.queue[rpc_id];\n            reject(new Error(\"reply timeout\"));\n          }, timeout);\n        }\n      });\n    });\n  }\n  /**\n  * Logins with the other side of the connection.\n  * @method\n  * @param {Object} params - Login credentials object\n  * @return {Promise}\n  */\n  async login(params) {\n    const resp = await this.call(\"rpc.login\", params);\n    if (!resp) throw new Error(\"authentication failed\");\n    return resp;\n  }\n  /**\n  * Fetches a list of client's methods registered on server.\n  * @method\n  * @return {Array}\n  */\n  async listMethods() {\n    return await this.call(\"__listMethods\");\n  }\n  /**\n  * Sends a JSON-RPC 2.0 notification to server.\n  * @method\n  * @param {String} method - RPC method name\n  * @param {Object} params - optional method parameters\n  * @return {Promise}\n  */\n  notify(method, params) {\n    return new Promise((resolve, reject) => {\n      if (!this.ready) return reject(new Error(\"socket not ready\"));\n      const message = {\n        jsonrpc: \"2.0\",\n        method,\n        params\n      };\n      this.socket.send(this.dataPack.encode(message), (error) => {\n        if (error) return reject(error);\n        resolve();\n      });\n    });\n  }\n  /**\n  * Subscribes for a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async subscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.on\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\n        \"Failed subscribing to an event '\" + event + \"' with: \" + result[event]\n      );\n    return result;\n  }\n  /**\n  * Unsubscribes from a defined event.\n  * @method\n  * @param {String|Array} event - event name\n  * @return {Undefined}\n  * @throws {Error}\n  */\n  async unsubscribe(event) {\n    if (typeof event === \"string\") event = [event];\n    const result = await this.call(\"rpc.off\", event);\n    if (typeof event === \"string\" && result[event] !== \"ok\")\n      throw new Error(\"Failed unsubscribing from an event with: \" + result);\n    return result;\n  }\n  /**\n  * Closes a WebSocket connection gracefully.\n  * @method\n  * @param {Number} code - socket close code\n  * @param {String} data - optional data to be sent before closing\n  * @return {Undefined}\n  */\n  close(code, data) {\n    this.socket.close(code || 1e3, data);\n  }\n  /**\n  * Enable / disable automatic reconnection.\n  * @method\n  * @param {Boolean} reconnect - enable / disable reconnection\n  * @return {Undefined}\n  */\n  setAutoReconnect(reconnect) {\n    this.reconnect = reconnect;\n  }\n  /**\n  * Set the interval between reconnection attempts.\n  * @method\n  * @param {Number} interval - reconnection interval in milliseconds\n  * @return {Undefined}\n  */\n  setReconnectInterval(interval) {\n    this.reconnect_interval = interval;\n  }\n  /**\n  * Set the maximum number of reconnection attempts.\n  * @method\n  * @param {Number} max_reconnects - maximum reconnection attempts\n  * @return {Undefined}\n  */\n  setMaxReconnects(max_reconnects) {\n    this.max_reconnects = max_reconnects;\n  }\n  /**\n  * Connection/Message handler.\n  * @method\n  * @private\n  * @param {String} address - WebSocket API address\n  * @param {Object} options - ws options object\n  * @return {Undefined}\n  */\n  _connect(address, options) {\n    clearTimeout(this.reconnect_timer_id);\n    this.socket = this.webSocketFactory(address, options);\n    this.socket.addEventListener(\"open\", () => {\n      this.ready = true;\n      this.emit(\"open\");\n      this.current_reconnects = 0;\n    });\n    this.socket.addEventListener(\"message\", ({ data: message }) => {\n      if (message instanceof ArrayBuffer)\n        message = Buffer.from(message).toString();\n      try {\n        message = this.dataPack.decode(message);\n      } catch (error) {\n        return;\n      }\n      if (message.notification && this.listeners(message.notification).length) {\n        if (!Object.keys(message.params).length)\n          return this.emit(message.notification);\n        const args = [message.notification];\n        if (message.params.constructor === Object) args.push(message.params);\n        else\n          for (let i = 0; i < message.params.length; i++)\n            args.push(message.params[i]);\n        return Promise.resolve().then(() => {\n          this.emit.apply(this, args);\n        });\n      }\n      if (!this.queue[message.id]) {\n        if (message.method) {\n          return Promise.resolve().then(() => {\n            this.emit(message.method, message?.params);\n          });\n        }\n        return;\n      }\n      if (\"error\" in message === \"result\" in message)\n        this.queue[message.id].promise[1](\n          new Error(\n            'Server response malformed. Response must include either \"result\" or \"error\", but not both.'\n          )\n        );\n      if (this.queue[message.id].timeout)\n        clearTimeout(this.queue[message.id].timeout);\n      if (message.error) this.queue[message.id].promise[1](message.error);\n      else this.queue[message.id].promise[0](message.result);\n      delete this.queue[message.id];\n    });\n    this.socket.addEventListener(\"error\", (error) => this.emit(\"error\", error));\n    this.socket.addEventListener(\"close\", ({ code, reason }) => {\n      if (this.ready)\n        setTimeout(() => this.emit(\"close\", code, reason), 0);\n      this.ready = false;\n      this.socket = void 0;\n      if (code === 1e3) return;\n      this.current_reconnects++;\n      if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0))\n        this.reconnect_timer_id = setTimeout(\n          () => this._connect(address, options),\n          this.reconnect_interval\n        );\n    });\n  }\n};\n\n// src/index.browser.ts\nvar Client = class extends CommonClient {\n  constructor(address = \"ws://localhost:8080\", {\n    autoconnect = true,\n    reconnect = true,\n    reconnect_interval = 1e3,\n    max_reconnects = 5\n  } = {}, generate_request_id) {\n    super(\n      WebSocket,\n      address,\n      {\n        autoconnect,\n        reconnect,\n        reconnect_interval,\n        max_reconnects\n      },\n      generate_request_id\n    );\n  }\n};\n\nexport { Client, CommonClient, DefaultDataPack, WebSocket };\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.browser.mjs.map"
  ],
  "mappings": "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",
  "debugId": "8200D5AD1FBFF0C764756E2164756E21",
  "names": []
}