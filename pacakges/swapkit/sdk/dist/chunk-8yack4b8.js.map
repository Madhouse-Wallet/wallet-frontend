{
  "version": 3,
  "sources": ["../../../../node_modules/@ledgerhq/hw-app-cosmos/lib-es/Cosmos.js"],
  "sourcesContent": [
    "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport BIPPath from \"bip32-path\";\nimport { UserRefusedOnDevice } from \"@ledgerhq/errors\";\nconst CHUNK_SIZE = 250;\nconst CLA = 0x55;\nconst APP_KEY = \"CSM\";\nconst INS_GET_VERSION = 0x00;\nconst INS_SIGN_SECP256K1 = 0x02;\nconst INS_GET_ADDR_SECP256K1 = 0x04;\nconst PAYLOAD_TYPE_INIT = 0x00;\nconst PAYLOAD_TYPE_ADD = 0x01;\nconst PAYLOAD_TYPE_LAST = 0x02;\nconst SW_OK = 0x9000;\nconst SW_CANCEL = 0x6986;\n/**\n * Cosmos API\n *\n * @example\n * import Cosmos from \"@ledgerhq/hw-app-cosmos\";\n * const cosmos = new Cosmos(transport)\n */\nexport default class Cosmos {\n    constructor(transport, scrambleKey = APP_KEY) {\n        this.transport = transport;\n        transport.decorateAppAPIMethods(this, [\"getAddress\", \"sign\", \"getAppConfiguration\"], scrambleKey);\n    }\n    // FIXME: understand what is going on with the return type here\n    getAppConfiguration() {\n        return this.transport.send(CLA, INS_GET_VERSION, 0, 0).then(response => {\n            return {\n                test_mode: response[0] !== 0,\n                version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3],\n                device_locked: response[4] === 1,\n                major: response[1],\n            };\n        });\n    }\n    serializePath(path) {\n        const buf = Buffer.alloc(20);\n        // HACK : without the >>>,\n        // the bitwise implicitly casts the result to be a signed int32,\n        // which fails the internal type check of Buffer in case of overload.\n        buf.writeUInt32LE((0x80000000 | path[0]) >>> 0, 0);\n        buf.writeUInt32LE((0x80000000 | path[1]) >>> 0, 4);\n        buf.writeUInt32LE((0x80000000 | path[2]) >>> 0, 8);\n        buf.writeUInt32LE(path[3], 12);\n        buf.writeUInt32LE(path[4], 16);\n        return buf;\n    }\n    serializeHRP(hrp) {\n        if (hrp == null || hrp.length === 0 || hrp.length > 83) {\n            throw new Error(\"Invalid HRP\");\n        }\n        const buf = Buffer.alloc(1 + hrp.length);\n        buf.writeUInt8(hrp.length, 0);\n        buf.write(hrp, 1);\n        return buf;\n    }\n    /**\n     * get Cosmos address for a given BIP 32 path.\n     * @param path a path in BIP 32 format\n     * @param hrp usually cosmos\n     * @option boolDisplay optionally enable or not the display\n     * @return an object with a publicKey, address and (optionally) chainCode\n     * @example\n     * cosmos.getAddress(\"44'/60'/0'/0/0\", \"cosmos\").then(o => o.address)\n     */\n    getAddress(path, hrp, boolDisplay) {\n        const bipPath = BIPPath.fromString(path).toPathArray();\n        const serializedPath = this.serializePath(bipPath);\n        const data = Buffer.concat([this.serializeHRP(hrp), serializedPath]);\n        return this.transport\n            .send(CLA, INS_GET_ADDR_SECP256K1, boolDisplay ? 1 : 0, 0, data, [SW_OK])\n            .then(response => {\n            const address = Buffer.from(response.slice(33, -2)).toString();\n            const publicKey = Buffer.from(response.slice(0, 33)).toString(\"hex\");\n            return {\n                address,\n                publicKey,\n            };\n        });\n    }\n    foreach(arr, callback) {\n        function iterate(index, array, result) {\n            if (index >= array.length) {\n                return result;\n            }\n            else\n                return callback(array[index], index).then(function (res) {\n                    result.push(res);\n                    return iterate(index + 1, array, result);\n                });\n        }\n        return Promise.resolve().then(() => iterate(0, arr, []));\n    }\n    sign(path, message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const bipPath = BIPPath.fromString(path).toPathArray();\n            const serializedPath = this.serializePath(bipPath);\n            const chunks = [];\n            chunks.push(serializedPath);\n            const buffer = Buffer.from(message);\n            for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {\n                let end = i + CHUNK_SIZE;\n                if (i > buffer.length) {\n                    end = buffer.length;\n                }\n                chunks.push(buffer.slice(i, end));\n            }\n            let response = {};\n            return this.foreach(chunks, (data, j) => this.transport\n                .send(CLA, INS_SIGN_SECP256K1, j === 0\n                ? PAYLOAD_TYPE_INIT\n                : j + 1 === chunks.length\n                    ? PAYLOAD_TYPE_LAST\n                    : PAYLOAD_TYPE_ADD, 0, data, [SW_OK, SW_CANCEL])\n                .then(apduResponse => (response = apduResponse))).then(() => {\n                const errorCodeData = response.slice(-2);\n                const returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n                let signature = null;\n                if (response.length > 2) {\n                    signature = response.slice(0, response.length - 2);\n                }\n                if (returnCode === 0x6986) {\n                    throw new UserRefusedOnDevice();\n                }\n                return {\n                    signature,\n                    return_code: returnCode,\n                };\n            });\n        });\n    }\n}\n//# sourceMappingURL=Cosmos.js.map"
  ],
  "mappings": "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",
  "debugId": "35CE06B576C99D5364756E2164756E21",
  "names": []
}