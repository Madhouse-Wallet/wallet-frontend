import{Ac as e,Bc as N0,Cc as r,Dc as W0,Ec as n,Fc as t,Gc as Z0,vc as h,wc as T,xc as L0,yc as S0,zc as c}from"./chunk-vvjfq62e.js";import{Ce as m,De as O,Ee as f,Fe as R,He as w,Ie as K0,Pe as q,ge as C,he as V,je as Q,ke as j0,le as Z,pe as E,re as v0,te as H,ue as U,ze as A}from"./chunk-f1my8rj8.js";import"./chunk-trjbmn7w.js";var B=({apiKey:_,chainId:d})=>({getBalance:async(v)=>{let{data:j}=await m.get(`https://api.covalenthq.com/v1/${d}/address/${v}/balances_v2/`,{searchParams:{key:_}});return(j?.items||[]).filter(({is_spam:K})=>!K).map(({balance:K,contract_decimals:L,contract_ticker_symbol:N,contract_address:P,native_token:X})=>({value:f({value:BigInt(K),decimal:L,bigIntDecimal:L}),decimal:L,chain:j0[d],symbol:`${N||"Unknown"}${X?"":`-${P}`}`}))}}),z0="https://api.ethplorer.io",I0=(_="freekey")=>({getBalance:async(d)=>{let{tokens:v=[]}=await m.get(`${z0}/getAddressInfo/${d}`,{searchParams:{apiKey:_}});return v.filter(({tokenInfo:{symbol:j},rawBalance:K})=>j&&K!=="0").map(({tokenInfo:{symbol:j,decimals:K,address:L},rawBalance:N})=>({chain:V.Ethereum,symbol:L?`${j}-${L}`:j,value:f({value:BigInt(N),decimal:Number.parseInt(K),bigIntDecimal:Number.parseInt(K)}),decimal:Number.parseInt(K)}))}}),v3=async({toolbox:_,from:d,memo:v="",feeOptionKey:j=A.Fastest,assetValue:K,abi:L,funcName:N,funcParams:P,contractAddress:X,txOverrides:x})=>{let Y=(await _.getBalance(d)).find(({symbol:G,chain:W})=>K?G===K.symbol:G===R.from({chain:W})?.symbol),F=(await _.estimateGasPrices())[j];if(!Y)return R.from({chain:K.chain});if(K&&(Y.chain!==K.chain||Y.symbol!==K?.symbol))return Y;let I=L&&N&&P&&X?await _.estimateCall({contractAddress:X,abi:L,funcName:N,funcParams:P,txOverrides:x}):await _.estimateGasLimit({from:d,recipient:d,memo:v,assetValue:K}),$="maxFeePerGas"in F;if(!(("gasPrice"in F)||$))throw new Error("Could not fetch fee data");let z=I*($?(F.maxFeePerGas||1n)+(F.maxPriorityFeePerGas||1n):F.gasPrice),S=q.fromBigInt(Y.getBaseValue("bigint")).sub(z.toString());return R.from({chain:Y.chain,value:S.getValue("string")})},o=(_)=>_>0n?`0x${_.toString(16)}`:"0x0",b=async({provider:_,api:d,address:v,chain:j,potentialScamFilter:K})=>{let L=await d.getBalance(v),N=await _.getBalance(v),P=[{chain:j,symbol:R.from({chain:j}).symbol,value:f({value:BigInt(N),decimal:18,bigIntDecimal:18}),decimal:Z[j]},...L.filter((X)=>!w(X))];return(K?K0(P):P).map(({symbol:X,value:x,decimal:Y})=>new R({decimal:Y||Z[j],value:x,identifier:`${j}.${X}`}))},g=async(_,d=A.Fast,v,j,K=!0)=>{let L=(await l(j,K))[d],N=await j.estimateGas(_),P=R.from({chain:v});if(!K&&L.gasPrice)return P.set(q.fromBigInt(L.gasPrice*N,P.decimal));if(L.maxFeePerGas&&L.maxPriorityFeePerGas)return P.set(q.fromBigInt((L.maxFeePerGas+L.maxPriorityFeePerGas)*N,P.decimal));throw new Error("No gas price found")},N3=(_,d)=>{return new n(d||v0[_])},_0=L0,$0={[V.Arbitrum]:U.ARB,[V.Avalanche]:U.AVAX,[V.Base]:U.BASE,[V.BinanceSmartChain]:U.BSC,[V.Ethereum]:U.ETH,[V.Optimism]:U.OP,[V.Polygon]:U.MATIC},H0=["payable","nonpayable"],G0=(_)=>_.type===2||!!_.maxFeePerGas||!!_.maxPriorityFeePerGas,s=(_)=>_ instanceof t,i=(_,d,v)=>{return new r(_,N0.from(d),v)},P0=(_)=>{try{return c(_),!0}catch(d){return!1}},U0=(_,d)=>{let v=_.find((j)=>j.name===d);if(!v)throw new O("toolbox_evm_no_abi_fragment",{functionName:d});return v.stateMutability&&H0.includes(v.stateMutability)},u=async(_,d,{callProvider:v,signer:j,contractAddress:K,abi:L,funcName:N,funcParams:P=[],txOverrides:X={},feeOption:x=A.Fast})=>{let Y=v||_;if(!K)throw new Error("contractAddress must be provided");let F=U0(L,N),I={...X,from:X?.from||await j?.getAddress()};if(F&&s(Y)&&j){let S=await J(Y,{contractAddress:K,abi:L,funcName:N,funcParams:P,txOverrides:I});return a(Y,S)}let $=i(K,L,Y);if(F){if(!j)throw new O("toolbox_evm_no_signer");let S=X?.from||await j.getAddress();if(!S)throw new O("toolbox_evm_no_signer_address");let G=$.connect(j),{maxFeePerGas:W,maxPriorityFeePerGas:k,gasPrice:D}=(await l(_,d))[x],Q0=await $.getFunction(N).estimateGas(...P,X),p=await G[N](...P,{...X,gasLimit:Q0,maxFeePerGas:W,maxPriorityFeePerGas:k,gasPrice:D,nonce:X?.nonce||await Y.getTransactionCount(S)});return typeof p?.hash==="string"?p?.hash:p}let z=await $[N]?.(...P);return typeof z?.hash==="string"?z?.hash:z},J=async(_,{contractAddress:d,abi:v,funcName:j,funcParams:K=[],txOverrides:L})=>i(d,v,_).getFunction(j).populateTransaction(...K.concat(L).filter((N)=>typeof N!=="undefined")),V0=async(_,{assetAddress:d,spenderAddress:v,from:j})=>await u(_,!0,{contractAddress:d,abi:C,funcName:"allowance",funcParams:[j,v]}),E0=async(_,{assetAddress:d,spenderAddress:v,from:j,amount:K=_0})=>{return q.fromBigInt(await V0(_,{assetAddress:d,spenderAddress:v,from:j})).gte(q.fromBigInt(BigInt(K)))},M0=async(_,{assetAddress:d,spenderAddress:v,feeOptionKey:j=A.Fast,amount:K,gasLimitFallback:L,from:N,nonce:P},X,x=!0)=>{let Y=[v,BigInt(K||_0)],F={contractAddress:d,abi:C,funcName:"approve",funcParams:Y,signer:X,txOverrides:{from:N}};if(s(_))return a(_,await J(_,F));return u(_,x,{...F,funcParams:Y,txOverrides:{from:N,nonce:P,gasLimit:L?BigInt(L.toString()):void 0},feeOption:j})},R0=async(_,{assetValue:d,memo:v,recipient:j,feeOptionKey:K=A.Fast,data:L,from:N,maxFeePerGas:P,maxPriorityFeePerGas:X,gasPrice:x,...Y},F,I=!0)=>{let $=d.getBaseValue("bigint"),z=d.chain,S=N||await F?.getAddress();if(!S)throw new O("toolbox_evm_no_from_address");if(!d.isGasAsset){let W=y(d,z);if(!W)throw new O("toolbox_evm_no_contract_address");return u(_,I,{signer:F,contractAddress:W,abi:C,funcName:"transfer",funcParams:[j,$],txOverrides:{from:S,maxFeePerGas:P,maxPriorityFeePerGas:X,gasPrice:x},feeOption:K})}let G={...Y,from:S,to:j,value:$,data:L||h(T(v||""))};return Y0(_,G,K,F,I)},l=async(_,d=!0)=>{try{let{maxFeePerGas:v,maxPriorityFeePerGas:j,gasPrice:K}=await _.getFeeData();if(d){if(v===null||j===null)throw new O("toolbox_evm_no_fee_data");return{[A.Average]:{maxFeePerGas:v,maxPriorityFeePerGas:j},[A.Fast]:{maxFeePerGas:v*15n/10n,maxPriorityFeePerGas:j*15n/10n},[A.Fastest]:{maxFeePerGas:v*2n,maxPriorityFeePerGas:j*2n}}}if(!K)throw new O("toolbox_evm_no_gas_price");return{[A.Average]:{gasPrice:K},[A.Fast]:{gasPrice:K*15n/10n},[A.Fastest]:{gasPrice:K*2n}}}catch(v){throw new Error(`Failed to estimate gas price: ${v.msg??v.toString()}`)}},X0=(_,{signer:d,contractAddress:v,abi:j,funcName:K,funcParams:L=[],txOverrides:N})=>{if(!v)throw new O("toolbox_evm_no_contract_address");let P=i(v,j,_);return d?P.connect(d).getFunction(K).estimateGas(...L,N):P.getFunction(K).estimateGas(...L,N)},q0=(_,{assetValue:d,recipient:v,memo:j,from:K,funcName:L,funcParams:N,txOverrides:P,signer:X})=>{let x=d.bigIntValue,Y=d.isGasAsset?null:y(d,d.chain);if(Y&&L)return X0(_,{contractAddress:Y,abi:C,funcName:L,funcParams:N,txOverrides:P,signer:X});return _.estimateGas({from:K,to:v,value:x,data:j?h(T(j)):void 0})},Y0=async(_,d,v=A.Fast,j,K=!0)=>{if(!j)throw new O("toolbox_evm_no_signer");let{from:L,to:N,data:P,value:X,...x}=d;if(!N)throw new O("toolbox_evm_no_to_address");let Y={...x,data:P||"0x",to:N,from:L,value:BigInt(X||0)};if(s(_))return a(_,Y);let F=L||await j.getAddress(),I=d.nonce||await _.getTransactionCount(F),$=(await _.getNetwork()).chainId,z=G0(Y)||K,S=z&&!(Y.maxFeePerGas&&Y.maxPriorityFeePerGas)||!Y.gasPrice?Object.entries((await l(_,K))[v]).reduce((W,[k,D])=>({...W,[k]:o(BigInt(D))}),{}):{},G;try{G=o(Y.gasLimit||await _.estimateGas(Y)*11n/10n)}catch(W){throw new O("toolbox_evm_error_estimating_gas_limit",{error:W})}try{let W={...Y,chainId:$,type:z?2:0,gasLimit:G,nonce:I,...S};try{return(await j.sendTransaction(W)).hash}catch(k){let D=await j.signTransaction({...W,from:F});return(await _.broadcastTransaction(D)).hash}}catch(W){throw new O("toolbox_evm_error_sending_transaction",{error:W})}},X3=(_)=>c(_),a=(_,{from:d,to:v,data:j,value:K})=>{if(!s(_))throw new O("toolbox_evm_provider_not_eip1193_compatible");return _.send("eth_sendTransaction",[{value:o(BigInt(K||0)),from:d,to:v,data:j}])},Y3=(_,d)=>{let v=y(_,d);if(v)return c(v.toLowerCase());throw new O("toolbox_evm_invalid_gas_asset_address")},y=({chain:_,symbol:d,ticker:v},j)=>{try{if(_===j&&d===j&&v===j||_===V.BinanceSmartChain&&d==="BNB"&&v==="BNB"||[V.Arbitrum,V.Base].includes(_)&&d==="ETH"&&v==="ETH")return $0[j];return c(d.slice(v.length+1).replace(/^0X/,""))}catch(K){return null}},C0=async(_,{assetValue:d,memo:v,recipient:j,feeOptionKey:K=A.Fast,data:L,from:N,maxFeePerGas:P,maxPriorityFeePerGas:X,gasPrice:x,...Y},F)=>{let I=d.getBaseValue("bigint"),$=d.chain,z=N||await F?.getAddress();if(!z)throw new O("toolbox_evm_no_from_address");if(!w(d)){let S=y(d,$);if(!S)throw new O("toolbox_evm_no_contract_address");return J(_,{contractAddress:S,abi:C,funcName:"transfer",funcParams:[j,I],txOverrides:{from:z,maxFeePerGas:P,maxPriorityFeePerGas:X,gasPrice:x}})}return{...Y,from:z,to:j,value:I,data:L||h(T(v||""))}},b0=async(_,{assetAddress:d,spenderAddress:v,amount:j,from:K},L)=>{let N=[v,BigInt(j||_0)];return await J(_,{contractAddress:d,abi:C,funcName:"approve",funcParams:N,signer:L,txOverrides:{from:K}})};function f0(_){if(!_)throw new O("toolbox_evm_no_signer");return _.signMessage}var M=({provider:_,signer:d,isEIP1559Compatible:v=!0})=>({approve:(j)=>M0(_,j,d,v),approvedAmount:(j)=>V0(_,j),broadcastTransaction:_.broadcastTransaction,call:(j)=>u(_,v,{...j,signer:d}),createContract:(j,K,L)=>i(j,K,L||_),createContractTxObject:(j)=>J(_,j),EIP1193SendTransaction:(j)=>a(_,j),estimateCall:(j)=>X0(_,{...j,signer:d}),estimateGasLimit:({assetValue:j,recipient:K,memo:L})=>q0(_,{assetValue:j,recipient:K,memo:L,signer:d}),estimateGasPrices:()=>l(_,v),isApproved:(j)=>E0(_,j),sendTransaction:(j,K)=>Y0(_,j,K,d,v),transfer:(j)=>R0(_,j,d,v),validateAddress:P0,createTransferTx:(j)=>C0(_,j,d),createApprovalTx:(j)=>b0(_,j,d),signMessage:f0(d)}),x3=M,A3=({address:_})=>P0(_),B0;((_)=>{_.Test="goerli",_.Main="homestead"})(B0||={});var g0=()=>({chainId:Q.ArbitrumHex,chainName:"Arbitrum One",nativeCurrency:{name:"Ethereum",symbol:V.Ethereum,decimals:Z.ETH},rpcUrls:[E(V.Arbitrum)],blockExplorerUrls:[H[V.Arbitrum]]}),D0=async(_)=>{try{let{gasPrice:d}=await _.getFeeData();if(!d)throw new Error("No fee data available");return{[A.Average]:{gasPrice:d},[A.Fast]:{gasPrice:d},[A.Fastest]:{gasPrice:d}}}catch(d){throw new Error(`Failed to estimate gas price: ${d.msg??d.toString()}`)}},c0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=_||B({apiKey:j,chainId:Q.Arbitrum}),L=M({provider:d,signer:v,isEIP1559Compatible:!1}),N=V.Arbitrum;return{...L,getNetworkParams:g0,estimateGasPrices:()=>D0(d),estimateTransactionFee:(P)=>g(P,A.Average,N,d,!1),getBalance:(P,X=!0,x)=>b({provider:x||d,api:K,address:P,chain:N,potentialScamFilter:X})}},J0=()=>({chainId:Q.AvalancheHex,chainName:"Avalanche Network",nativeCurrency:{name:"Avalanche",symbol:V.Avalanche,decimals:Z.AVAX},rpcUrls:["https://api.avax.network/ext/bc/C/rpc"],blockExplorerUrls:[H[V.Avalanche]]}),k0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=_||B({apiKey:j,chainId:Q.Avalanche}),L=M({provider:d,signer:v}),N=V.Avalanche;return{...L,getNetworkParams:J0,estimateTransactionFee:(P,X)=>g(P,X,N,d),getBalance:(P,X=!0,x)=>b({provider:x||d,api:K,address:P,chain:N,potentialScamFilter:X})}},m0=()=>({chainId:Q.BinanceSmartChainHex,chainName:"BNB Chain",nativeCurrency:{name:"Binance Coin",symbol:"BNB",decimals:Z.BSC},rpcUrls:["https://bsc-dataseed.binance.org"],blockExplorerUrls:[H[V.BinanceSmartChain]]}),w0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=_||B({apiKey:j,chainId:Q.BinanceSmartChain}),L=M({provider:d,signer:v,isEIP1559Compatible:!1}),N=V.BinanceSmartChain;return{...L,getNetworkParams:m0,estimateTransactionFee:(P,X)=>g(P,X,N,d,!1),getBalance:(P,X=!0,x)=>b({provider:x||d,api:K,address:P,chain:N,potentialScamFilter:X})}},h0=[{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes[]",name:"returnData",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"blockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBlockNumber",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockCoinbase",outputs:[{internalType:"address",name:"coinbase",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockDifficulty",outputs:[{internalType:"uint256",name:"difficulty",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockGasLimit",outputs:[{internalType:"uint256",name:"gaslimit",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"getEthBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLastBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryAggregate",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryBlockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"}],T0=({api:_,ethplorerApiKey:d,signer:v,provider:j})=>{let K=_||I0(d),L=M({provider:j,signer:v}),N=V.Ethereum;async function P(X,x="0x5ba1e12693dc8f9c48aad8770482f4739beed696",Y="aggregate",F=A.Fast){let I=await L.createContractTxObject({contractAddress:x,abi:h0,funcName:Y,funcParams:[X]});return L.sendTransaction(I,F)}return{...L,estimateTransactionFee:(X,x)=>g(X,x,N,j),getBalance:(X,x=!0,Y)=>b({provider:Y||j,api:K,address:X,chain:N,potentialScamFilter:x}),multicall:P}},r0=()=>({chainId:Q.BaseHex,chainName:"Base Mainnet",nativeCurrency:{name:"Ethereum",symbol:V.Ethereum,decimals:Z.ETH},rpcUrls:[E(V.Base)],blockExplorerUrls:[H[V.Base]]}),s0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=M({provider:d,signer:v}),L=V.Base;return{...K,getNetworkParams:r0,estimateTransactionFee:(N,P)=>g(N,P,L,d),getBalance:async(N,P=!0,X)=>{return await b({provider:X||d,api:_||B({apiKey:j,chainId:Q.Base}),address:N,chain:L,potentialScamFilter:P})}}},i0=()=>({chainId:Q.PolygonHex,chainName:"Polygon Mainnet",nativeCurrency:{name:"Polygon",symbol:V.Polygon,decimals:Z.MATIC},rpcUrls:[E(V.Polygon)],blockExplorerUrls:[H[V.Polygon]]}),u0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=_||B({apiKey:j,chainId:Q.Polygon}),L=M({provider:d,signer:v}),N=V.Polygon;return{...L,getNetworkParams:i0,estimateTransactionFee:(P,X)=>g(P,X,N,d),getBalance:(P,X=!0,x)=>b({provider:x||d,api:K,address:P,chain:N,potentialScamFilter:X})}},l0=[{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"DecimalsUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"GasPriceUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"L1BaseFeeUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"OverheadUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"ScalarUpdated",type:"event"},{inputs:[],name:"decimals",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"gasPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1Fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1GasUsed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"l1BaseFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"overhead",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"scalar",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"setDecimals",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasPrice",type:"uint256"}],name:"setGasPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_baseFee",type:"uint256"}],name:"setL1BaseFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_overhead",type:"uint256"}],name:"setOverhead",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_scalar",type:"uint256"}],name:"setScalar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}],a0="0x420000000000000000000000000000000000000f",d0=(_)=>{return new r(a0,l0,_)},x0=(_)=>{let d=d0(_);if(d&&"l1BaseFee"in d)return d?.l1BaseFee();return},A0=async(_,{data:d,from:v,to:j,gasPrice:K,type:L,gasLimit:N,nonce:P})=>{if(!j)throw new Error("Missing to address");return e.from({data:d,to:j,gasPrice:K,type:L,gasLimit:N,nonce:P?P:v?await _.getTransactionCount(v):0}).serialized},F0=async(_,d)=>{let v=await d0(_),j=await A0(_,d);if(v&&"getL1Fee"in v)return v.getL1Fee(j)},O0=async(_,d)=>{let v=await _.send("eth_gasPrice",[]),j=await _.estimateGas(d);return v.mul(j)},y0=async(_,d)=>{let v=await F0(_,d),j=await O0(_,d);return v.add(j)},p0=async(_,d)=>{let v=d0(_),j=await A0(_,d);if(v&&"getL1GasUsed"in v)return v.getL1GasUsed(j)},o0=()=>({chainId:Q.OptimismHex,chainName:"Optimism",nativeCurrency:{name:"Ethereum",symbol:V.Ethereum,decimals:Z.ETH},rpcUrls:[E(V.Optimism)],blockExplorerUrls:[H[V.Optimism]]}),e0=async(_)=>{try{let{maxFeePerGas:d,maxPriorityFeePerGas:v,gasPrice:j}=await _.getFeeData(),K=await x0(_),L=j;if(!(d&&v))throw new Error("No fee data available");return{[A.Average]:{l1GasPrice:K,gasPrice:j,maxFeePerGas:d,maxPriorityFeePerGas:v},[A.Fast]:{l1GasPrice:(K||0n)*15n/10n,gasPrice:L*15n/10n,maxFeePerGas:d,maxPriorityFeePerGas:v*15n/10n},[A.Fastest]:{l1GasPrice:(K||0n)*2n,gasPrice:L*2n,maxFeePerGas:d,maxPriorityFeePerGas:v*2n}}}catch(d){throw new Error(`Failed to estimate gas price: ${d.msg??d.toString()}`)}},n0=({api:_,provider:d,signer:v,covalentApiKey:j})=>{let K=_||B({apiKey:j,chainId:Q.Optimism});return{...M({provider:d,signer:v}),estimateTotalGasCost:(L)=>y0(d,L),estimateL1GasCost:(L)=>F0(d,L),estimateL2GasCost:(L)=>O0(d,L),getL1GasPrice:()=>x0(d),estimateL1Gas:(L)=>p0(d,L),getNetworkParams:o0,estimateGasPrices:()=>e0(d),getBalance:(L,N=!0,P)=>b({provider:P||d,api:K,address:L,chain:V.Optimism,potentialScamFilter:N})}},H3=(_)=>{switch(_){case V.Avalanche:return k0;case V.Arbitrum:return c0;case V.Base:return s0;case V.Optimism:return n0;case V.Polygon:return u0;case V.BinanceSmartChain:return w0;case V.Ethereum:return T0;default:throw new Error(`Chain ${_} is not supported`)}};export{o as toHexString,X3 as toChecksumAddress,U0 as isStateChangingCall,s as isBrowserProvider,H3 as getToolboxByChain,y as getTokenAddress,N3 as getProvider,x0 as getL1GasPrice,Y3 as getChecksumAddressFromAsset,b as getBalance,A3 as evmValidateAddress,I0 as ethplorerApi,g as estimateTransactionFee,y0 as estimateTotalGasCost,v3 as estimateMaxSendableAmount,O0 as estimateL2GasCost,F0 as estimateL1GasCost,p0 as estimateL1Gas,l as estimateGasPrices,J as createContractTxObject,i as createContract,B as covalentApi,d0 as connectGasPriceOracle,e as Transaction,S0 as Signature,n0 as OPToolbox,_0 as MAX_APPROVAL,u0 as MATICToolbox,n as JsonRpcProvider,Z0 as HDNodeWallet,B0 as EthNetwork,M as EVMToolbox,T0 as ETHToolbox,a as EIP1193SendTransaction,t as BrowserProvider,x3 as BaseEVMToolbox,w0 as BSCToolbox,s0 as BASEToolbox,W0 as AbstractSigner,k0 as AVAXToolbox,c0 as ARBToolbox};

//# debugId=B1FBDF3EC90AA05864756E2164756E21
