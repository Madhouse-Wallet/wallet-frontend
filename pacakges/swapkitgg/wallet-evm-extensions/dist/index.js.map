{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ChainApis,\n  ChainToHexChainId,\n  type ConnectWalletParams,\n  type EVMChain,\n  EVMChains,\n  type EthereumWindowProvider,\n  WalletOption,\n  filterSupportedChains,\n  pickEvmApiKey,\n  prepareNetworkSwitch,\n  setRequestClientConfig,\n  switchEVMWalletNetwork,\n} from \"@swapkit/helpers\";\nimport type { NonETHToolbox } from \"@swapkit/toolbox-evm\";\nimport type { BrowserProvider, Eip1193Provider } from \"ethers\";\n\ndeclare const window: {\n  ethereum: EthereumWindowProvider;\n  trustwallet: EthereumWindowProvider;\n  coinbaseWalletExtension: EthereumWindowProvider;\n  braveSolana: any;\n} & Window;\n\nexport type EVMWalletOptions =\n  | WalletOption.BRAVE\n  | WalletOption.OKX_MOBILE\n  | WalletOption.METAMASK\n  | WalletOption.TRUSTWALLET_WEB\n  | WalletOption.COINBASE_WEB\n  | WalletOption.EIP6963;\n\nconst getWalletForType = (\n  walletType:\n    | WalletOption.BRAVE\n    | WalletOption.OKX_MOBILE\n    | WalletOption.METAMASK\n    | WalletOption.TRUSTWALLET_WEB\n    | WalletOption.COINBASE_WEB,\n) => {\n  switch (walletType) {\n    case WalletOption.BRAVE:\n    case WalletOption.METAMASK:\n    case WalletOption.OKX_MOBILE:\n      return window.ethereum;\n    case WalletOption.COINBASE_WEB:\n      return window.coinbaseWalletExtension;\n    case WalletOption.TRUSTWALLET_WEB:\n      return window.trustwallet;\n  }\n};\n\nexport const getWeb3WalletMethods = async ({\n  ethereumWindowProvider,\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n  provider,\n  apis,\n}: {\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  chain: EVMChain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n  provider: BrowserProvider;\n  apis: ChainApis;\n}) => {\n  if (!ethereumWindowProvider) throw new Error(\"Requested web3 wallet is not installed\");\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n\n  const api = apis?.[chain];\n\n  const apiKey = pickEvmApiKey({\n    chain,\n    nonEthApiKey: covalentApiKey,\n    ethApiKey: ethplorerApiKey,\n  });\n  const signer = await provider.getSigner();\n\n  const toolbox = getToolboxByChain(chain)({\n    api,\n    apiKey,\n    provider,\n    signer,\n  });\n\n  if (chain !== Chain.Ethereum) {\n    const currentNetwork = await provider.getNetwork();\n    if (currentNetwork.chainId.toString() !== ChainToHexChainId[chain]) {\n      try {\n        await switchEVMWalletNetwork(\n          provider,\n          ChainToHexChainId[chain],\n          (toolbox as NonETHToolbox).getNetworkParams(),\n        );\n      } catch (_error) {\n        throw new Error(`Failed to add/switch ${chain} network: ${chain}`);\n      }\n    }\n  }\n\n  return prepareNetworkSwitch<typeof toolbox>({\n    toolbox: { ...toolbox },\n    chainId: ChainToHexChainId[chain],\n    provider,\n  });\n};\n\nfunction connectEVMWallet({\n  addChain,\n  apis,\n  config: { covalentApiKey, ethplorerApiKey, thorswapApiKey },\n}: ConnectWalletParams) {\n  return async function connectEVMWallet(\n    chains: Chain[],\n    walletType: EVMWalletOptions = WalletOption.METAMASK,\n    eip1193Provider?: Eip1193Provider,\n  ) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const supportedChains = filterSupportedChains(chains, EVMChains, walletType);\n\n    const promises = supportedChains.map(async (chain) => {\n      const { getProvider } = await import(\"@swapkit/toolbox-evm\");\n      const { BrowserProvider } = await import(\"ethers\");\n\n      if (walletType === WalletOption.EIP6963) {\n        if (!eip1193Provider) throw new Error(\"Missing provider\");\n        const provider = new BrowserProvider(eip1193Provider, \"any\");\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = await provider.getSigner();\n        const address = await signer.getAddress();\n\n        const walletMethods = await getWeb3WalletMethods({\n          apis,\n          chain,\n          ethplorerApiKey,\n          covalentApiKey,\n          ethereumWindowProvider: eip1193Provider,\n          provider,\n        });\n\n        const getBalance = async (potentialScamFilter = true) =>\n          walletMethods.getBalance(address, potentialScamFilter, getProvider(chain));\n\n        addChain({\n          ...walletMethods,\n          chain,\n          address,\n          getBalance,\n          balance: [],\n          walletType,\n        });\n        return;\n      }\n\n      const web3provider = new BrowserProvider(getWalletForType(walletType), \"any\");\n      await web3provider.send(\"eth_requestAccounts\", []);\n      const signer = await web3provider.getSigner();\n      const address = await signer.getAddress();\n\n      const walletMethods = await getWeb3WalletMethods({\n        apis,\n        chain,\n        ethplorerApiKey,\n        covalentApiKey,\n        ethereumWindowProvider: getWalletForType(walletType),\n        provider: web3provider,\n      });\n\n      const getBalance = async (potentialScamFilter = true) =>\n        walletMethods.getBalance(address, potentialScamFilter, getProvider(chain));\n\n      const disconnect = () =>\n        web3provider.send(\"wallet_revokePermissions\", [\n          {\n            eth_accounts: {},\n          },\n        ]);\n\n      addChain({\n        ...walletMethods,\n        disconnect,\n        chain,\n        address,\n        getBalance,\n        balance: [],\n        walletType,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const evmWallet = { connectEVMWallet } as const;\n"
  ],
  "mappings": "+CAAA,gBACE,uBAEA,eAGA,kBAEA,2BACA,mBACA,0BACA,4BACA,4BACA,yBAoBF,IAAM,EAAmB,CACvB,IAMG,CACH,OAAQ,QACD,EAAa,WACb,EAAa,cACb,EAAa,WAChB,OAAO,OAAO,cACX,EAAa,aAChB,OAAO,OAAO,6BACX,EAAa,gBAChB,OAAO,OAAO,cAIP,EAAuB,OAClC,yBACA,QACA,iBACA,kBACA,WACA,UAQI,CACJ,IAAK,EAAwB,MAAM,IAAI,MAAM,wCAAwC,EACrF,IAAQ,qBAAsB,KAAa,gCAErC,EAAM,IAAO,GAEb,EAAS,EAAc,CAC3B,QACA,aAAc,EACd,UAAW,CACb,CAAC,EACK,EAAS,MAAM,EAAS,UAAU,EAElC,EAAU,EAAkB,CAAK,EAAE,CACvC,MACA,SACA,WACA,QACF,CAAC,EAED,GAAI,IAAU,EAAM,UAElB,IADuB,MAAM,EAAS,WAAW,GAC9B,QAAQ,SAAS,IAAM,EAAkB,GAC1D,GAAI,CACF,MAAM,EACJ,EACA,EAAkB,GACjB,EAA0B,iBAAiB,CAC9C,QACO,EAAP,CACA,MAAM,IAAI,MAAM,wBAAwB,cAAkB,GAAO,GAKvE,OAAO,EAAqC,CAC1C,QAAS,IAAK,CAAQ,EACtB,QAAS,EAAkB,GAC3B,UACF,CAAC,GAGH,SAAS,CAAgB,EACvB,WACA,OACA,QAAU,iBAAgB,kBAAiB,mBACrB,CACtB,OAAO,eAAe,CAAgB,CACpC,EACA,EAA+B,EAAa,SAC5C,EACA,CACA,EAAuB,CAAE,OAAQ,CAAe,CAAC,EAIjD,IAAM,EAFkB,EAAsB,EAAQ,EAAW,CAAU,EAE1C,IAAI,MAAO,IAAU,CACpD,IAAQ,eAAgB,KAAa,iCAC7B,mBAAoB,KAAa,+BAEzC,GAAI,IAAe,EAAa,QAAS,CACvC,IAAK,EAAiB,MAAM,IAAI,MAAM,kBAAkB,EACxD,IAAM,EAAW,IAAI,EAAgB,EAAiB,KAAK,EAC3D,MAAM,EAAS,KAAK,sBAAuB,CAAC,CAAC,EAE7C,IAAM,EAAU,MADD,MAAM,EAAS,UAAU,GACX,WAAW,EAElC,EAAgB,MAAM,EAAqB,CAC/C,OACA,QACA,kBACA,iBACA,uBAAwB,EACxB,UACF,CAAC,EAKD,EAAS,IACJ,EACH,QACA,UACA,WAPiB,MAAO,EAAsB,KAC9C,EAAc,WAAW,EAAS,EAAqB,EAAY,CAAK,CAAC,EAOzE,QAAS,CAAC,EACV,YACF,CAAC,EACD,OAGF,IAAM,EAAe,IAAI,EAAgB,EAAiB,CAAU,EAAG,KAAK,EAC5E,MAAM,EAAa,KAAK,sBAAuB,CAAC,CAAC,EAEjD,IAAM,EAAU,MADD,MAAM,EAAa,UAAU,GACf,WAAW,EAElC,EAAgB,MAAM,EAAqB,CAC/C,OACA,QACA,kBACA,iBACA,uBAAwB,EAAiB,CAAU,EACnD,SAAU,CACZ,CAAC,EAYD,EAAS,IACJ,EACH,WATiB,IACjB,EAAa,KAAK,2BAA4B,CAC5C,CACE,aAAc,CAAC,CACjB,CACF,CAAC,EAKD,QACA,UACA,WAfiB,MAAO,EAAsB,KAC9C,EAAc,WAAW,EAAS,EAAqB,EAAY,CAAK,CAAC,EAezE,QAAS,CAAC,EACV,YACF,CAAC,EACF,EAID,OAFA,MAAM,QAAQ,IAAI,CAAQ,EAEnB,IAIJ,IAAM,EAAY,CAAE,kBAAiB",
  "debugId": "8209851833036FE364756E2164756E21",
  "names": []
}