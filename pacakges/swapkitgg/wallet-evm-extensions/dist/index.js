import{a as u,c as g}from"./chunk-nm00d52v.js";import{Chain as S,ChainToHexChainId as W,EVMChains as b,WalletOption as r,filterSupportedChains as f,pickEvmApiKey as T,prepareNetworkSwitch as x,setRequestClientConfig as K,switchEVMWalletNetwork as I}from"@swapkit/helpers";var C=(i)=>{switch(i){case r.BRAVE:case r.METAMASK:case r.OKX_MOBILE:return window.ethereum;case r.COINBASE_WEB:return window.coinbaseWalletExtension;case r.TRUSTWALLET_WEB:return window.trustwallet}},P=async({ethereumWindowProvider:i,chain:e,covalentApiKey:l,ethplorerApiKey:c,provider:o,apis:h})=>{if(!i)throw new Error("Requested web3 wallet is not installed");let{getToolboxByChain:p}=await import("@swapkit/toolbox-evm"),t=h?.[e],a=T({chain:e,nonEthApiKey:l,ethApiKey:c}),m=await o.getSigner(),w=p(e)({api:t,apiKey:a,provider:o,signer:m});if(e!==S.Ethereum){if((await o.getNetwork()).chainId.toString()!==W[e])try{await I(o,W[e],w.getNetworkParams())}catch(E){throw new Error(`Failed to add/switch ${e} network: ${e}`)}}return x({toolbox:{...w},chainId:W[e],provider:o})};function N({addChain:i,apis:e,config:{covalentApiKey:l,ethplorerApiKey:c,thorswapApiKey:o}}){return async function h(p,t=r.METAMASK,a){K({apiKey:o});let w=f(p,b,t).map(async(n)=>{let{getProvider:E}=await import("@swapkit/toolbox-evm"),{BrowserProvider:A}=await import("./chunk-7r0bsnk5.js");if(t===r.EIP6963){if(!a)throw new Error("Missing provider");let s=new A(a,"any");await s.send("eth_requestAccounts",[]);let O=await(await s.getSigner()).getAddress(),y=await P({apis:e,chain:n,ethplorerApiKey:c,covalentApiKey:l,ethereumWindowProvider:a,provider:s});i({...y,chain:n,address:O,getBalance:async(v=!0)=>y.getBalance(O,v,E(n)),balance:[],walletType:t});return}let d=new A(C(t),"any");await d.send("eth_requestAccounts",[]);let B=await(await d.getSigner()).getAddress(),M=await P({apis:e,chain:n,ethplorerApiKey:c,covalentApiKey:l,ethereumWindowProvider:C(t),provider:d});i({...M,disconnect:()=>d.send("wallet_revokePermissions",[{eth_accounts:{}}]),chain:n,address:B,getBalance:async(s=!0)=>M.getBalance(B,s,E(n)),balance:[],walletType:t})});return await Promise.all(w),!0}}var H={connectEVMWallet:N};export{P as getWeb3WalletMethods,H as evmWallet};

//# debugId=8209851833036FE364756E2164756E21
