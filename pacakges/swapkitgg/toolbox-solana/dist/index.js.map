{
  "version": 3,
  "sources": ["../src/toolbox.ts"],
  "sourcesContent": [
    "import { mnemonicToSeedSync } from \"@scure/bip39\";\nimport { createMemoInstruction } from \"@solana/spl-memo\";\nimport {\n  TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createTransferCheckedInstruction,\n  getAccount,\n  getAssociatedTokenAddress,\n} from \"@solana/spl-token\";\nimport { type TokenInfo, TokenListProvider } from \"@solana/spl-token-registry\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  sendAndConfirmTransaction,\n} from \"@solana/web3.js\";\nimport {\n  AssetValue,\n  Chain,\n  DerivationPath,\n  SwapKitError,\n  SwapKitNumber,\n  type WalletTxParams,\n  getRPCUrl,\n} from \"@swapkit/helpers\";\nimport { HDKey } from \"micro-key-producer/slip10.js\";\n\nexport function validateAddress(address: string) {\n  try {\n    const pubkey = new PublicKey(address);\n    return PublicKey.isOnCurve(pubkey.toBytes());\n  } catch (_) {\n    return false;\n  }\n}\n\nfunction createKeysForPath({\n  phrase,\n  derivationPath = DerivationPath.SOL,\n}: {\n  phrase: string;\n  derivationPath?: string;\n}) {\n  const seed = mnemonicToSeedSync(phrase);\n  const hdKey = HDKey.fromMasterSeed(seed);\n\n  return Keypair.fromSeed(hdKey.derive(derivationPath, true).privateKey);\n}\n\nfunction getAddressFromKeys(keypair: Keypair) {\n  return keypair.publicKey.toString();\n}\n\nasync function getTokenBalances({\n  connection,\n  address,\n}: {\n  connection: Connection;\n  address: string;\n}) {\n  const tokenAccounts = await connection.getParsedTokenAccountsByOwner(new PublicKey(address), {\n    programId: TOKEN_PROGRAM_ID,\n  });\n  const tokenListProvider = new TokenListProvider();\n  const tokenListContainer = await tokenListProvider.resolve();\n  const tokenList = tokenListContainer.filterByChainId(101).getList();\n\n  // Group token balances by mint address\n  const tokenBalanceMap = new Map<string, { amount: bigint; decimal: number; symbol: string }>();\n\n  for await (const tokenAccountInfo of tokenAccounts.value) {\n    const accountInfo = tokenAccountInfo.account.data.parsed.info;\n    const mintAddress = accountInfo.mint;\n    const decimal = accountInfo.tokenAmount.decimals;\n    const amount = BigInt(accountInfo.tokenAmount.amount);\n\n    if (amount <= BigInt(0)) continue;\n\n    const tokenInfo = tokenList.find((token: TokenInfo) => token.address === mintAddress);\n    const tokenSymbol = tokenInfo?.symbol ?? \"UNKNOWN\";\n    const existing = tokenBalanceMap.get(mintAddress);\n\n    tokenBalanceMap.set(mintAddress, {\n      amount: existing ? existing.amount + amount : amount,\n      decimal,\n      symbol: tokenSymbol,\n    });\n  }\n\n  // Convert grouped balances to AssetValue array\n  const tokenBalances: AssetValue[] = Array.from(tokenBalanceMap.entries()).map(\n    ([mintAddress, { amount, decimal, symbol }]) =>\n      new AssetValue({\n        value: SwapKitNumber.fromBigInt(amount, decimal),\n        decimal,\n        identifier: `${Chain.Solana}.${symbol}${mintAddress ? `-${mintAddress.toString()}` : \"\"}`,\n      }),\n  );\n\n  return tokenBalances;\n}\n\nfunction getBalance(connection: Connection) {\n  return async (address: string) => {\n    const SOLBalance = await connection.getBalance(new PublicKey(address));\n    const tokenBalances = await getTokenBalances({ connection, address });\n\n    return [AssetValue.from({ chain: Chain.Solana, value: BigInt(SOLBalance) }), ...tokenBalances];\n  };\n}\n\nexport async function createSolanaTokenTransaction({\n  tokenAddress,\n  recipient,\n  from,\n  connection,\n  amount,\n  decimals,\n}: {\n  tokenAddress: string;\n  recipient: string;\n  from: PublicKey;\n  connection: Connection;\n  amount: number;\n  decimals: number;\n}) {\n  const transaction = new Transaction();\n  const tokenPublicKey = new PublicKey(tokenAddress);\n  const fromSPLAddress = await getAssociatedTokenAddress(tokenPublicKey, from);\n\n  const recipientPublicKey = new PublicKey(recipient);\n  const recipientSPLAddress = await getAssociatedTokenAddress(tokenPublicKey, recipientPublicKey);\n\n  let recipientAccountExists = false;\n  try {\n    await getAccount(connection, recipientSPLAddress);\n    recipientAccountExists = true;\n  } catch (_) {\n    // Recipient's associated token account doesn't exist\n  }\n\n  if (!recipientAccountExists) {\n    transaction.add(\n      createAssociatedTokenAccountInstruction(\n        from,\n        recipientSPLAddress,\n        recipientPublicKey,\n        tokenPublicKey,\n      ),\n    );\n  }\n\n  transaction.add(\n    createTransferCheckedInstruction(\n      fromSPLAddress,\n      tokenPublicKey,\n      recipientSPLAddress,\n      from,\n      amount,\n      decimals,\n    ),\n  );\n\n  return transaction;\n}\n\nfunction createSolanaTransaction(connection: Connection) {\n  return async ({\n    recipient,\n    assetValue,\n    fromPublicKey,\n    memo,\n    isProgramDerivedAddress,\n  }: WalletTxParams & {\n    assetValue: AssetValue;\n    fromPublicKey: PublicKey;\n    isProgramDerivedAddress?: boolean;\n  }) => {\n    if (!(isProgramDerivedAddress || validateAddress(recipient))) {\n      throw new SwapKitError(\"core_transaction_invalid_recipient_address\");\n    }\n\n    const transaction = assetValue.isGasAsset\n      ? new Transaction().add(\n          SystemProgram.transfer({\n            fromPubkey: fromPublicKey,\n            lamports: assetValue.getBaseValue(\"number\"),\n            toPubkey: new PublicKey(recipient),\n          }),\n        )\n      : assetValue.address\n        ? await createSolanaTokenTransaction({\n            amount: assetValue.getBaseValue(\"number\"),\n            connection,\n            decimals: assetValue.decimal as number,\n            from: fromPublicKey,\n            recipient,\n            tokenAddress: assetValue.address,\n          })\n        : undefined;\n\n    if (!transaction) {\n      throw new SwapKitError(\"core_transaction_invalid_sender_address\");\n    }\n\n    if (memo) transaction.add(createMemoInstruction(memo));\n\n    const blockHash = await connection.getLatestBlockhash();\n    transaction.recentBlockhash = blockHash.blockhash;\n    transaction.feePayer = fromPublicKey;\n\n    return transaction;\n  };\n}\n\nfunction transfer(connection: Connection) {\n  return async ({\n    recipient,\n    assetValue,\n    fromKeypair,\n    memo,\n    isProgramDerivedAddress,\n  }: WalletTxParams & {\n    assetValue: AssetValue;\n    fromKeypair: Keypair;\n    isProgramDerivedAddress?: boolean;\n  }) => {\n    const transaction = await createSolanaTransaction(connection)({\n      recipient,\n      assetValue,\n      memo,\n      fromPublicKey: fromKeypair.publicKey,\n      isProgramDerivedAddress,\n    });\n\n    return sendAndConfirmTransaction(connection, transaction, [fromKeypair]);\n  };\n}\n\nfunction broadcastTransaction(connection: Connection) {\n  return (transaction: Transaction) => {\n    return connection.sendRawTransaction(transaction.serialize());\n  };\n}\n\nexport const SOLToolbox = ({ rpcUrl = getRPCUrl(Chain.Solana) }: { rpcUrl?: string } = {}) => {\n  const connection = new Connection(rpcUrl, \"confirmed\");\n\n  return {\n    connection,\n    createKeysForPath,\n    getAddressFromKeys,\n    createSolanaTransaction: createSolanaTransaction(connection),\n    getBalance: getBalance(connection),\n    transfer: transfer(connection),\n    broadcastTransaction: broadcastTransaction(connection),\n    validateAddress,\n  };\n};\n"
  ],
  "mappings": "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",
  "debugId": "87A596EA74018FE264756E2164756E21",
  "names": []
}