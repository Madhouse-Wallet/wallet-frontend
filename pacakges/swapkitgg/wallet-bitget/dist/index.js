import{a as A,c as G}from"./chunk-nm00d52v.js";import{Chain as Q,EVMChains as C,WalletOption as Y,filterSupportedChains as K,setRequestClientConfig as x}from"@swapkit/helpers";import{PublicKey as J}from"@solana/web3.js";import{Chain as S,ChainId as N,ChainToHexChainId as W,SwapKitError as B,getRPCUrl as L,pickEvmApiKey as E,prepareNetworkSwitch as U,switchEVMWalletNetwork as t}from"@swapkit/helpers";function V(u){return async({from:m,recipient:_,assetValue:R,memo:y})=>{let{getMsgSendDenom:O,createSigningStargateClient:n}=await import("@swapkit/toolbox-cosmos");if(!(window.bitkeep&&("keplr"in window.bitkeep)))throw new B("wallet_bitkeep_not_found");let{keplr:g}=window.bitkeep,f=g.getOfflineSignerOnlyAmino(N.Cosmos),T=await n(u||L(S.Cosmos),f),I=[{denom:O(R.symbol).toLowerCase(),amount:R.getBaseValue("string")}];try{let{transactionHash:s}=await T.sendTokens(m,_,I,2,y);return s}catch(s){throw new B("core_transaction_failed",{error:s})}}}async function X({chain:u,ethplorerApiKey:m,covalentApiKey:_,blockchairApiKey:R,rpcUrl:y,apis:O}){let n=window.bitkeep;switch(u){case S.Ethereum:case S.Base:case S.Avalanche:case S.Arbitrum:case S.Optimism:case S.Polygon:case S.BinanceSmartChain:{if(!(n&&("ethereum"in n)))throw new B("wallet_bitkeep_not_found");let g=O?.[u],f=E({chain:u,nonEthApiKey:_,ethApiKey:m}),T=n.ethereum,{getProvider:I}=await import("@swapkit/toolbox-evm"),s=await k({chain:u,apiKey:f,ethereumWindowProvider:T,api:g}),[q]=await T.send("eth_requestAccounts",[]);return{...s,getBalance:async(z,P=!0)=>s.getBalance(z||q,P,I(u)),address:q}}case S.Bitcoin:{if(!(n&&("unisat"in n)))throw new B("wallet_bitkeep_not_found");let g=O?.[u],{unisat:f}=n,{Psbt:T,BTCToolbox:I}=await import("@swapkit/toolbox-utxo"),[s]=await f.requestAccounts(),q=typeof g==="object"&&"getConfirmedBalance"in g?g:void 0,j=I({rpcUrl:y,apiKey:R,apiClient:q}),z=async(F)=>{let D=await f.signPsbt(F.toHex(),{autoFinalized:!1});return T.fromHex(D)};return{...j,transfer:(F)=>{return j.transfer({...F,signTransaction:z})},address:s}}case S.Cosmos:{if(!(n&&("keplr"in n)))throw new B("wallet_bitkeep_not_found");let g=O?.[u],{keplr:f}=n;await f.enable(N.Cosmos);let T=await f.getOfflineSignerOnlyAmino(N.Cosmos).getAccounts();if(!T?.[0])throw new Error("No cosmos account found");let{GaiaToolbox:I}=await import("@swapkit/toolbox-cosmos"),[{address:s}]=T;return{address:s,...I({server:typeof g==="string"?g:void 0}),transfer:V(y)}}case S.Solana:{if(!(n&&("solana"in n)))throw new B("wallet_bitkeep_not_found");let{SOLToolbox:g}=await import("@swapkit/toolbox-solana"),f=n?.solana,I=(await f.connect()).publicKey.toString(),s=g({rpcUrl:y});return{...s,transfer:async({recipient:j,assetValue:z,isProgramDerivedAddress:P,memo:F})=>{if(!(P||s.validateAddress(j)))throw new B("core_transaction_invalid_recipient_address");let D=new J(I),M=await s.createSolanaTransaction({recipient:j,assetValue:z,memo:F,fromPublicKey:D,isProgramDerivedAddress:P}),$=await s.connection.getLatestBlockhash();M.recentBlockhash=$.blockhash,M.feePayer=D;let H=await f.signTransaction(M);return s.broadcastTransaction(H)},address:I}}default:throw new B("wallet_chain_not_supported")}}var k=async({ethereumWindowProvider:u,chain:m,apiKey:_,api:R})=>{let{getToolboxByChain:y}=await import("@swapkit/toolbox-evm"),{BrowserProvider:O}=await import("./chunk-7r0bsnk5.js");if(!u)throw new B("wallet_provider_not_found");let n=new O(u,"any"),g=y(m)({provider:n,signer:await n.getSigner(),apiKey:_,api:R});try{if(m!==S.Ethereum&&"getNetworkParams"in g)await t(n,W[m],g.getNetworkParams())}catch(f){throw new Error(`Failed to add/switch ${m} network: ${m}`)}return U({toolbox:g,provider:n,chainId:W[m]})};var Z=[...C,Q.Cosmos,Q.Bitcoin,Q.Solana];function d({addChain:u,apis:m,config:{thorswapApiKey:_,covalentApiKey:R,ethplorerApiKey:y,blockchairApiKey:O}}){return async function n(g){x({apiKey:_});let T=K(g,Z,Y.BITGET).map(async(I)=>{let s=await X({chain:I,apis:m,covalentApiKey:R,ethplorerApiKey:y,blockchairApiKey:O});u({...s,chain:I,balance:[],walletType:Y.BITGET})});return await Promise.all(T),!0}}var v={connectBitget:d};export{v as bitgetWallet,Z as BITGET_SUPPORTED_CHAINS};

//# debugId=7B276D4D869EFF6364756E2164756E21
