{
  "version": 3,
  "sources": ["../src/bitgetWallet.ts", "../src/helpers.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ConnectWalletParams,\n  EVMChains,\n  WalletOption,\n  filterSupportedChains,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\n\nimport { getWalletForChain } from \"./helpers\";\n\nexport const BITGET_SUPPORTED_CHAINS = [\n  ...EVMChains,\n  Chain.Cosmos,\n  Chain.Bitcoin,\n  Chain.Solana,\n] as const;\n\nfunction connectBitget({\n  addChain,\n  apis,\n  config: { thorswapApiKey, covalentApiKey, ethplorerApiKey, blockchairApiKey },\n}: ConnectWalletParams) {\n  return async function connectBitget(chains: Chain[]) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const supportedChains = filterSupportedChains(\n      chains,\n      BITGET_SUPPORTED_CHAINS,\n      WalletOption.BITGET,\n    );\n\n    const promises = supportedChains.map(async (chain) => {\n      const walletMethods = await getWalletForChain({\n        chain,\n        apis,\n        covalentApiKey,\n        ethplorerApiKey,\n        blockchairApiKey,\n      });\n\n      addChain({\n        ...walletMethods,\n        chain,\n        balance: [],\n        walletType: WalletOption.BITGET,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const bitgetWallet = { connectBitget } as const;\n",
    "import { PublicKey } from \"@solana/web3.js\";\nimport {\n  type AssetValue,\n  Chain,\n  type ChainApis,\n  ChainId,\n  ChainToHexChainId,\n  type EVMChain,\n  SwapKitError,\n  type WalletTxParams,\n  getRPCUrl,\n  pickEvmApiKey,\n  prepareNetworkSwitch,\n  switchEVMWalletNetwork,\n} from \"@swapkit/helpers\";\nimport type { TransferParams } from \"@swapkit/toolbox-cosmos\";\nimport type { AlchemyApiType, CovalentApiType, EthplorerApiType } from \"@swapkit/toolbox-evm\";\nimport type { Psbt, UTXOTransferParams } from \"@swapkit/toolbox-utxo\";\nimport type { Eip1193Provider } from \"ethers\";\n\nexport function cosmosTransfer(rpcUrl?: string) {\n  return async ({ from, recipient, assetValue, memo }: TransferParams) => {\n    const { getMsgSendDenom, createSigningStargateClient } = await import(\n      \"@swapkit/toolbox-cosmos\"\n    );\n    if (!(window.bitkeep && \"keplr\" in window.bitkeep)) {\n      throw new SwapKitError(\"wallet_bitkeep_not_found\");\n    }\n\n    const { keplr: wallet } = window.bitkeep;\n\n    const offlineSigner = wallet.getOfflineSignerOnlyAmino(ChainId.Cosmos);\n    const cosmJS = await createSigningStargateClient(\n      rpcUrl || getRPCUrl(Chain.Cosmos),\n      offlineSigner,\n    );\n\n    const coins = [\n      {\n        denom: getMsgSendDenom(assetValue.symbol).toLowerCase(),\n        amount: assetValue.getBaseValue(\"string\"),\n      },\n    ];\n\n    try {\n      const { transactionHash } = await cosmJS.sendTokens(from, recipient, coins, 2, memo);\n      return transactionHash;\n    } catch (error) {\n      throw new SwapKitError(\"core_transaction_failed\", { error });\n    }\n  };\n}\n\n// biome-ignore lint/complexity/noExcessiveCognitiveComplexity:\nexport async function getWalletForChain({\n  chain,\n  ethplorerApiKey,\n  covalentApiKey,\n  blockchairApiKey,\n  rpcUrl,\n  apis,\n}: {\n  chain: Chain;\n  ethplorerApiKey?: string;\n  covalentApiKey?: string;\n  blockchairApiKey?: string;\n  rpcUrl?: string;\n  apis?: ChainApis;\n}) {\n  const bitget = window.bitkeep;\n\n  switch (chain) {\n    case Chain.Ethereum:\n    case Chain.Base:\n    case Chain.Avalanche:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.BinanceSmartChain: {\n      if (!(bitget && \"ethereum\" in bitget)) {\n        throw new SwapKitError(\"wallet_bitkeep_not_found\");\n      }\n\n      const api = apis?.[chain];\n\n      const apiKey = pickEvmApiKey({\n        chain,\n        nonEthApiKey: covalentApiKey,\n        ethApiKey: ethplorerApiKey,\n      });\n\n      const wallet = bitget.ethereum;\n\n      const { getProvider } = await import(\"@swapkit/toolbox-evm\");\n\n      const evmWallet = await getWeb3WalletMethods({\n        chain,\n        apiKey,\n        ethereumWindowProvider: wallet,\n        api,\n      });\n\n      const [address]: [string, ...string[]] = await wallet.send(\"eth_requestAccounts\", []);\n\n      const getBalance = async (addressOverwrite?: string, potentialScamFilter = true) =>\n        evmWallet.getBalance(addressOverwrite || address, potentialScamFilter, getProvider(chain));\n\n      return { ...evmWallet, getBalance, address };\n    }\n\n    case Chain.Bitcoin: {\n      if (!(bitget && \"unisat\" in bitget)) {\n        throw new SwapKitError(\"wallet_bitkeep_not_found\");\n      }\n\n      const api = apis?.[chain];\n\n      const { unisat: wallet } = bitget;\n\n      const { Psbt, BTCToolbox } = await import(\"@swapkit/toolbox-utxo\");\n\n      const [address] = await wallet.requestAccounts();\n      const apiClient = typeof api === \"object\" && \"getConfirmedBalance\" in api ? api : undefined;\n\n      const toolbox = BTCToolbox({ rpcUrl, apiKey: blockchairApiKey, apiClient });\n      const signTransaction = async (psbt: Psbt) => {\n        const signedPsbt = await wallet.signPsbt(psbt.toHex(), { autoFinalized: false });\n\n        return Psbt.fromHex(signedPsbt);\n      };\n\n      const transfer = (transferParams: UTXOTransferParams) => {\n        return toolbox.transfer({ ...transferParams, signTransaction });\n      };\n\n      return { ...toolbox, transfer, address };\n    }\n\n    case Chain.Cosmos: {\n      if (!(bitget && \"keplr\" in bitget)) {\n        throw new SwapKitError(\"wallet_bitkeep_not_found\");\n      }\n\n      const api = apis?.[chain];\n\n      const { keplr: wallet } = bitget;\n\n      await wallet.enable(ChainId.Cosmos);\n      const accounts = await wallet.getOfflineSignerOnlyAmino(ChainId.Cosmos).getAccounts();\n      if (!accounts?.[0]) throw new Error(\"No cosmos account found\");\n\n      const { GaiaToolbox } = await import(\"@swapkit/toolbox-cosmos\");\n      const [{ address }] = accounts;\n\n      return {\n        address,\n        ...GaiaToolbox({ server: typeof api === \"string\" ? api : undefined }),\n        transfer: cosmosTransfer(rpcUrl),\n      };\n    }\n\n    case Chain.Solana: {\n      if (!(bitget && \"solana\" in bitget)) {\n        throw new SwapKitError(\"wallet_bitkeep_not_found\");\n      }\n\n      const { SOLToolbox } = await import(\"@swapkit/toolbox-solana\");\n      const provider = bitget?.solana;\n\n      const providerConnection = await provider.connect();\n      const address: string = providerConnection.publicKey.toString();\n\n      const toolbox = SOLToolbox({ rpcUrl });\n\n      const transfer = async ({\n        recipient,\n        assetValue,\n        isProgramDerivedAddress,\n        memo,\n      }: WalletTxParams & { assetValue: AssetValue; isProgramDerivedAddress?: boolean }) => {\n        if (!(isProgramDerivedAddress || toolbox.validateAddress(recipient))) {\n          throw new SwapKitError(\"core_transaction_invalid_recipient_address\");\n        }\n        const fromPublicKey = new PublicKey(address);\n\n        const transaction = await toolbox.createSolanaTransaction({\n          recipient,\n          assetValue,\n          memo,\n          fromPublicKey,\n          isProgramDerivedAddress,\n        });\n\n        const blockHash = await toolbox.connection.getLatestBlockhash();\n        transaction.recentBlockhash = blockHash.blockhash;\n        transaction.feePayer = fromPublicKey;\n\n        const signedTransaction = await provider.signTransaction(transaction);\n\n        return toolbox.broadcastTransaction(signedTransaction);\n      };\n\n      return { ...toolbox, transfer, address };\n    }\n\n    default:\n      throw new SwapKitError(\"wallet_chain_not_supported\");\n  }\n}\n\nexport const getWeb3WalletMethods = async ({\n  ethereumWindowProvider,\n  chain,\n  apiKey,\n  api,\n}: {\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  chain: EVMChain;\n  apiKey?: string;\n  api?: EthplorerApiType | CovalentApiType | AlchemyApiType;\n}) => {\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n  const { BrowserProvider } = await import(\"ethers\");\n  if (!ethereumWindowProvider) throw new SwapKitError(\"wallet_provider_not_found\");\n\n  const provider = new BrowserProvider(ethereumWindowProvider, \"any\");\n\n  const toolbox = getToolboxByChain(chain)({\n    provider,\n    signer: await provider.getSigner(),\n    apiKey,\n    api,\n  });\n\n  try {\n    if (chain !== Chain.Ethereum && \"getNetworkParams\" in toolbox) {\n      await switchEVMWalletNetwork(provider, ChainToHexChainId[chain], toolbox.getNetworkParams());\n    }\n  } catch (_error) {\n    throw new Error(`Failed to add/switch ${chain} network: ${chain}`);\n  }\n\n  return prepareNetworkSwitch({ toolbox, provider, chainId: ChainToHexChainId[chain] });\n};\n"
  ],
  "mappings": "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",
  "debugId": "7B276D4D869EFF6364756E2164756E21",
  "names": []
}