import{a as d,c as y}from"./chunk-nm00d52v.js";import{Chain as l,WalletOption as C,filterSupportedChains as W,setRequestClientConfig as B}from"@swapkit/helpers";import{Chain as i,ChainId as h,ChainToHexChainId as b,getRPCUrl as P,pickEvmApiKey as S,prepareNetworkSwitch as T,switchEVMWalletNetwork as E}from"@swapkit/helpers";var O=(r)=>async({from:t,recipient:w,amount:p,asset:m,memo:c})=>{if(!(window.okxwallet&&("keplr"in window.okxwallet)))throw new Error("No cosmos okxwallet found");let{keplr:o}=window.okxwallet,e=o?.getOfflineSignerOnlyAmino(h.Cosmos),{createSigningStargateClient:s}=await import("@swapkit/toolbox-cosmos"),a=await s(r||P(i.Cosmos),e),n=[{denom:m?.symbol==="MUON"?"umuon":"uatom",amount:p.amount().toString()}],{transactionHash:g}=await a.sendTokens(t,w,n,1.6,c);return g},k=async({apis:r,chain:t,ethplorerApiKey:w,covalentApiKey:p,blockchairApiKey:m,rpcUrl:c})=>{switch(t){case i.Ethereum:case i.Base:case i.Avalanche:case i.Arbitrum:case i.Optimism:case i.Polygon:case i.BinanceSmartChain:{if(!(window.okxwallet&&("send"in window.okxwallet)))throw new Error("No okxwallet found");let{getProvider:o}=await import("@swapkit/toolbox-evm"),e=r?.[t],s=S({chain:t,nonEthApiKey:p,ethApiKey:w}),a=await v({chain:t,api:e,apiKey:s,ethereumWindowProvider:window.okxwallet}),n=(await window.okxwallet.send("eth_requestAccounts",[])).result[0];return{...a,getBalance:async(f,x=!0)=>a.getBalance(f||n,x,o(t)),address:n}}case i.Bitcoin:{if(!(window.okxwallet&&("bitcoin"in window.okxwallet)))throw new Error("No bitcoin okxwallet found");let{bitcoin:o}=window.okxwallet,{Psbt:e,BTCToolbox:s}=await import("@swapkit/toolbox-utxo"),a=r?.[t],n=(await o.connect()).address,g=s({rpcUrl:c,apiKey:m,apiClient:a}),f=async(u)=>{let A=await o.signPsbt(u.toHex(),{from:n,type:"list"});return e.fromHex(A)};return{...g,transfer:(u)=>{return g.transfer({...u,signTransaction:f})},address:n}}case i.Cosmos:{if(!(window.okxwallet&&("keplr"in window.okxwallet)))throw new Error("No bitcoin okxwallet found");let{keplr:o}=window.okxwallet,e=r?.[t];await o.enable(h.Cosmos);let s=await o.getOfflineSignerOnlyAmino(h.Cosmos).getAccounts();if(!s?.[0])throw new Error("No cosmos account found");let{GaiaToolbox:a}=await import("@swapkit/toolbox-cosmos"),[{address:n}]=s;return{address:n,...a({server:e}),transfer:O(c)}}default:throw new Error(`No wallet for chain ${t}`)}},v=async({ethereumWindowProvider:r,chain:t,api:w,apiKey:p})=>{let{getToolboxByChain:m}=await import("@swapkit/toolbox-evm"),{BrowserProvider:c}=await import("./chunk-7r0bsnk5.js");if(!r)throw new Error("Requested web3 wallet is not installed");let o=new c(r,"any"),e=m(t)({api:w,apiKey:p,provider:o,signer:await o.getSigner()});try{if(t!==i.Ethereum&&"getNetworkParams"in e)await E(o,b[t],e.getNetworkParams())}catch(s){throw new Error(`Failed to add/switch ${t} network: ${t}`)}return T({toolbox:e,provider:o,chainId:b[t]})};var K=[l.Arbitrum,l.Avalanche,l.Base,l.BinanceSmartChain,l.Bitcoin,l.Cosmos,l.Ethereum,l.Optimism,l.Polygon];function N({addChain:r,apis:t,config:{thorswapApiKey:w,covalentApiKey:p,ethplorerApiKey:m,blockchairApiKey:c}}){return async function o(e){B({apiKey:w});let a=W(e,K,C.OKX).map(async(n)=>{let g=await k({apis:t,chain:n,covalentApiKey:p,ethplorerApiKey:m,blockchairApiKey:c});r({...g,chain:n,balance:[],walletType:C.OKX})});return await Promise.all(a),!0}}var I={connectOkx:N};export{I as okxWallet};

//# debugId=5852D11D0576D7C864756E2164756E21
