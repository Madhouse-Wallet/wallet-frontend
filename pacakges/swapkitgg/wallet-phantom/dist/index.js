import{a as u,c as y}from"./chunk-nm00d52v.js";import{PublicKey as g,SystemProgram as v,Transaction as O}from"@solana/web3.js";import{Chain as c,SwapKitError as s,WalletOption as A,filterSupportedChains as k,pickEvmApiKey as H,setRequestClientConfig as K}from"@swapkit/helpers";var N=[c.Bitcoin,c.Ethereum,c.Solana];async function B({apis:f,chain:e,rpcUrl:d,covalentApiKey:P,ethplorerApiKey:_}){let p=window?.phantom;switch(e){case c.Bitcoin:{let a=p?.bitcoin;if(!a?.isPhantom)throw new s("wallet_phantom_not_found");let[{address:r}]=await a.requestAccounts(),{getToolboxByChain:o}=await import("@swapkit/toolbox-utxo");return{...o(e)({rpcUrl:d}),address:r}}case c.Ethereum:{let{getToolboxByChain:a}=await import("@swapkit/toolbox-evm"),{BrowserProvider:r}=await import("./chunk-7r0bsnk5.js"),o=f?.[e],t=new r(p?.ethereum,"any"),[i]=await t.send("eth_requestAccounts",[]),n=H({chain:e,nonEthApiKey:P,ethApiKey:_}),w=await t.getSigner();return{...a(e)({api:o,apiKey:n,signer:w,provider:t}),address:i}}case c.Solana:{let{createSolanaTokenTransaction:a,SOLToolbox:r}=await import("@swapkit/toolbox-solana"),o=p?.solana;if(!o?.isPhantom)throw new s("wallet_phantom_not_found");let i=(await o.connect()).publicKey.toString(),n=r({rpcUrl:d});return{...n,transfer:async({recipient:h,assetValue:l,isProgramDerivedAddress:C})=>{if(!(C||n.validateAddress(h)))throw new s("core_transaction_invalid_recipient_address");let b=new g(i),T=l.getBaseValue("number"),m=l.isGasAsset?new O().add(v.transfer({fromPubkey:b,lamports:T,toPubkey:new g(h)})):l.address?await a({amount:T,connection:n.connection,decimals:l.decimal,from:b,recipient:h,tokenAddress:l.address}):void 0;if(!m)throw new s("core_transaction_invalid_sender_address");let S=await n.connection.getLatestBlockhash();m.recentBlockhash=S.blockhash,m.feePayer=b;let x=await o.signTransaction(m);return await n.connection.sendRawTransaction(x.serialize())},address:i}}default:throw new s("wallet_chain_not_supported",{wallet:A.PHANTOM,chain:e})}}function E({addChain:f,config:{covalentApiKey:e,ethplorerApiKey:d,thorswapApiKey:P},rpcUrls:_}){return async function p(a){K({apiKey:P});let r=k(a,N,A.PHANTOM);async function o(t){let i=_[t],{address:n,...w}=await B({chain:t,covalentApiKey:e,ethplorerApiKey:d,rpcUrl:i});f({...w,chain:t,address:n,walletType:A.PHANTOM,balance:[]})}try{for(let t of r)await o(t);return!0}catch(t){if(t instanceof s)throw t;throw new s("wallet_connection_rejected_by_user")}}}var D={connectPhantom:E};export{D as phantomWallet,N as PHANTOM_SUPPORTED_CHAINS};

//# debugId=9B3249FA5313418164756E2164756E21
