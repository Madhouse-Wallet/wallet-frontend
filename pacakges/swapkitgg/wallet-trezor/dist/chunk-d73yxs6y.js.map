{
  "version": 3,
  "sources": ["../src/evmSigner.ts"],
  "sourcesContent": [
    "import {\n  type Chain,\n  ChainToChainId,\n  type DerivationPathArray,\n  SwapKitError,\n  SwapKitNumber,\n  WalletOption,\n  derivationPathToString,\n} from \"@swapkit/helpers\";\nimport type { JsonRpcProvider, Provider, TransactionRequest } from \"ethers\";\n\ntype TrezorEVMSignerParams = {\n  chain: Chain;\n  derivationPath: DerivationPathArray;\n  provider: Provider | JsonRpcProvider;\n};\n\nexport async function getEVMSigner({ chain, derivationPath, provider }: TrezorEVMSignerParams) {\n  const { AbstractSigner, Signature } = await import(\"ethers\");\n\n  class TrezorSigner extends AbstractSigner {\n    address: string;\n    chain: Chain;\n    derivationPath: DerivationPathArray;\n    readonly provider: Provider | JsonRpcProvider;\n\n    constructor({ chain, derivationPath, provider }: TrezorEVMSignerParams) {\n      super(provider);\n\n      this.address = \"\";\n      this.chain = chain;\n      this.derivationPath = derivationPath;\n      this.provider = provider;\n    }\n\n    getAddress = async () => {\n      if (!this.address) {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n\n        const result = await TrezorConnect.ethereumGetAddress({\n          path: derivationPathToString(this.derivationPath),\n          showOnTrezor: true,\n        });\n\n        if (!result.success) {\n          throw new SwapKitError({\n            errorKey: \"wallet_trezor_failed_to_get_address\",\n            info: { ...result, chain: this.chain, derivationPath: this.derivationPath },\n          });\n        }\n\n        this.address = result.payload.address;\n      }\n\n      return this.address;\n    };\n\n    signMessage = async (message: string) => {\n      const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n\n      const result = await TrezorConnect.ethereumSignMessage({\n        path: derivationPathToString(this.derivationPath),\n        message,\n      });\n\n      if (!result.success) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { ...result, message, chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      return result.payload.signature;\n    };\n\n    signTypedData(): Promise<string> {\n      throw new Error(\"Not implemented\");\n    }\n\n    signTransaction = async ({\n      to,\n      gasLimit,\n      value,\n      data,\n      nonce,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasPrice,\n      // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: any: refactor\n    }: TransactionRequest) => {\n      if (!to) throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { to } });\n      if (!gasLimit)\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { gasLimit } });\n\n      const isEIP1559 = maxFeePerGas && maxPriorityFeePerGas;\n\n      if (isEIP1559 && !maxFeePerGas) {\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { maxFeePerGas } });\n      }\n      if (isEIP1559 && !maxPriorityFeePerGas) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_params\",\n          info: { maxPriorityFeePerGas },\n        });\n      }\n      if (!(isEIP1559 || gasPrice)) {\n        throw new SwapKitError({ errorKey: \"wallet_missing_params\", info: { gasPrice } });\n      }\n\n      const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n      const { toHexString } = await import(\"@swapkit/toolbox-evm\");\n      const { Transaction } = await import(\"ethers\");\n\n      const additionalFields = isEIP1559\n        ? {\n            maxFeePerGas: toHexString(BigInt(maxFeePerGas?.toString() || 0)),\n            maxPriorityFeePerGas: toHexString(BigInt(maxPriorityFeePerGas?.toString() || 0)),\n          }\n        : (gasPrice && { gasPrice: toHexString(BigInt(gasPrice?.toString() || 0)) }) || {\n            gasPrice: \"0x0\",\n          };\n\n      const hexifiedNonce = toHexString(\n        BigInt(\n          nonce || (await this.provider.getTransactionCount(await this.getAddress(), \"pending\")),\n        ),\n      );\n\n      const formattedTx = {\n        chainId: Number.parseInt(ChainToChainId[this.chain]),\n        to: to.toString(),\n        value: toHexString(BigInt(value?.toString() || 0)),\n        gasLimit: toHexString(BigInt(gasLimit?.toString() || 0)),\n        nonce: hexifiedNonce,\n        data: data?.toString() || \"0x\",\n        ...additionalFields,\n      };\n\n      const { success, payload } = await TrezorConnect.ethereumSignTransaction({\n        path: derivationPathToString(this.derivationPath),\n        transaction: formattedTx,\n      });\n\n      if (!success) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { ...payload, chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      const { r, s, v } = payload;\n\n      const signature = Signature.from({\n        r,\n        s,\n        v: new SwapKitNumber(BigInt(v)).getBaseValue(\"number\"),\n      });\n\n      const serializedTx = Transaction.from({\n        ...formattedTx,\n        nonce: Number.parseInt(formattedTx.nonce, 16),\n        type: isEIP1559 ? 2 : 0,\n        signature,\n      }).serialized;\n\n      if (!serializedTx) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: { chain: this.chain, derivationPath: this.derivationPath },\n        });\n      }\n\n      return serializedTx;\n    };\n\n    connect = (provider: Provider | null) => {\n      if (!provider) {\n        throw new SwapKitError({\n          errorKey: \"wallet_provider_not_found\",\n          info: {\n            wallet: WalletOption.TREZOR,\n            chain: this.chain,\n            derivationPath: this.derivationPath,\n          },\n        });\n      }\n\n      return new TrezorSigner({\n        chain: this.chain,\n        derivationPath: this.derivationPath,\n        provider,\n      });\n    };\n  }\n\n  return new TrezorSigner({ chain, derivationPath, provider });\n}\n"
  ],
  "mappings": "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",
  "debugId": "D0E141C3555726B364756E2164756E21",
  "names": []
}