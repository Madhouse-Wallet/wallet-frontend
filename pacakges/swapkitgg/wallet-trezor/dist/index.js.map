{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ChainApis,\n  type ConnectWalletParams,\n  type DerivationPathArray,\n  FeeOption,\n  SwapKitError,\n  WalletOption,\n  derivationPathToString,\n  filterSupportedChains,\n  pickEvmApiKey,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport type { Psbt, UTXOTransferParams, UTXOType } from \"@swapkit/toolbox-utxo\";\n\nexport const TREZOR_SUPPORTED_CHAINS = [\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.Base,\n  Chain.BinanceSmartChain,\n  Chain.Bitcoin,\n  Chain.BitcoinCash,\n  Chain.Dash,\n  Chain.Dogecoin,\n  Chain.Ethereum,\n  Chain.Litecoin,\n  Chain.Optimism,\n  Chain.Polygon,\n] as const;\n\ntype TrezorOptions = {\n  ethplorerApiKey?: string;\n  blockchairApiKey?: string;\n  covalentApiKey?: string;\n  trezorManifest?: { appUrl: string; email: string };\n};\n\ntype Params = TrezorOptions & {\n  apis?: ChainApis;\n  chain: Chain;\n  derivationPath: DerivationPathArray;\n  rpcUrl?: string;\n};\n\nfunction getScriptType(derivationPath: DerivationPathArray) {\n  switch (derivationPath[0]) {\n    case 84:\n      return { input: \"SPENDWITNESS\", output: \"PAYTOWITNESS\" } as const;\n    case 49:\n      return { input: \"SPENDP2SHWITNESS\", output: \"PAYTOP2SHWITNESS\" } as const;\n    case 44:\n      return { input: \"SPENDADDRESS\", output: \"PAYTOADDRESS\" } as const;\n    default:\n      return null;\n  }\n}\n\nasync function getToolbox({\n  apis,\n  rpcUrl,\n  chain,\n  derivationPath,\n  blockchairApiKey,\n  ethplorerApiKey,\n  covalentApiKey,\n}: Params) {\n  switch (chain) {\n    case Chain.BinanceSmartChain:\n    case Chain.Avalanche:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Base:\n    case Chain.Ethereum: {\n      const { getProvider, getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n      const { getEVMSigner } = await import(\"./evmSigner\");\n\n      const api = apis?.[chain];\n\n      const apiKey = pickEvmApiKey({\n        chain,\n        ethApiKey: ethplorerApiKey,\n        nonEthApiKey: covalentApiKey,\n      });\n      const provider = getProvider(chain, rpcUrl);\n      const toolbox = getToolboxByChain(chain);\n\n      const signer = await getEVMSigner({ chain, derivationPath, provider });\n      const address = await signer.getAddress();\n\n      return { address, walletMethods: toolbox({ api, apiKey, provider, signer }) };\n    }\n\n    case Chain.Bitcoin:\n    case Chain.BitcoinCash:\n    case Chain.Dash:\n    case Chain.Dogecoin:\n    case Chain.Litecoin: {\n      const { toCashAddress, getToolboxByChain, BCHToolbox } = await import(\n        \"@swapkit/toolbox-utxo\"\n      );\n\n      const api = apis?.[chain];\n\n      if (!(blockchairApiKey || api)) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_api_key\",\n          info: { missingKey: \"blockchairApiKey\" },\n        });\n      }\n\n      const scriptType = getScriptType(derivationPath);\n\n      if (!scriptType) {\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_derivation_path_not_supported\",\n          info: { derivationPath },\n        });\n      }\n\n      const coin = chain.toLowerCase();\n      const params = { apiClient: api, apiKey: blockchairApiKey, rpcUrl };\n      const toolbox = getToolboxByChain(chain)(params);\n\n      const getAddress = async (path: DerivationPathArray = derivationPath) => {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n        const { success, payload } = await TrezorConnect.getAddress({\n          path: derivationPathToString(path),\n          coin,\n        });\n\n        if (!success) {\n          throw new SwapKitError({\n            errorKey: \"wallet_trezor_failed_to_get_address\",\n            info: {\n              chain,\n              error: (payload as { error: string; code?: string }).error || \"Unknown error\",\n            },\n          });\n        }\n\n        return chain === Chain.BitcoinCash\n          ? (toolbox as ReturnType<typeof BCHToolbox>).stripPrefix(payload.address)\n          : payload.address;\n      };\n\n      const address = await getAddress();\n\n      const signTransaction = async (psbt: Psbt, inputs: UTXOType[], memo = \"\") => {\n        const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n        const address_n = derivationPath.map((pathElement, index) =>\n          index < 3 ? ((pathElement as number) | 0x80000000) >>> 0 : (pathElement as number),\n        );\n\n        const result = await TrezorConnect.signTransaction({\n          coin,\n          inputs: inputs.map((input) => ({\n            // Hardens the first 3 elements of the derivation path - required by trezor\n            address_n,\n            prev_hash: input.hash,\n            prev_index: input.index,\n            // object needs amount but does not use it for signing\n            amount: input.value,\n            script_type: scriptType.input,\n          })),\n\n          // Lint is not happy with the type of txOutputs\n          // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO: refactor\n          outputs: psbt.txOutputs.map((output: any) => {\n            const outputAddress =\n              chain === Chain.BitcoinCash && output.address\n                ? toCashAddress(output.address)\n                : output.address;\n\n            // Strip prefix from BCH address to compare with stripped address from Trezor\n            const isChangeAddress =\n              chain === Chain.BitcoinCash && outputAddress\n                ? (toolbox as ReturnType<typeof BCHToolbox>).stripPrefix(outputAddress) === address\n                : outputAddress === address;\n\n            // OP_RETURN\n            if (!output.address) {\n              return {\n                amount: \"0\",\n                op_return_data: Buffer.from(memo).toString(\"hex\"),\n                script_type: \"PAYTOOPRETURN\",\n              };\n            }\n\n            // Change Address\n            if (isChangeAddress) {\n              return { address_n, amount: output.value, script_type: scriptType.output };\n            }\n\n            // Outgoing UTXO\n            return { address: outputAddress, amount: output.value, script_type: \"PAYTOADDRESS\" };\n          }),\n        });\n\n        if (result.success) {\n          return result.payload.serializedTx;\n        }\n\n        throw new SwapKitError({\n          errorKey: \"wallet_trezor_failed_to_sign_transaction\",\n          info: {\n            chain,\n            error: (result.payload as { error: string; code?: string }).error,\n          },\n        });\n      };\n\n      const transfer = async ({\n        from,\n        recipient,\n        feeOptionKey,\n        feeRate,\n        memo,\n        ...rest\n      }: UTXOTransferParams) => {\n        if (!from)\n          throw new SwapKitError({\n            errorKey: \"wallet_missing_params\",\n            info: { wallet: WalletOption.TREZOR, memo, from },\n          });\n        if (!recipient)\n          throw new SwapKitError({\n            errorKey: \"wallet_missing_params\",\n            info: { wallet: WalletOption.TREZOR, memo, recipient },\n          });\n\n        const { psbt, inputs } = await toolbox.buildTx({\n          ...rest,\n          memo,\n          recipient,\n          feeRate: feeRate || (await toolbox.getFeeRates())[feeOptionKey || FeeOption.Fast],\n          sender: from,\n          fetchTxHex: chain === Chain.Dogecoin,\n        });\n\n        const txHex = await signTransaction(psbt, inputs, memo);\n        return toolbox.broadcastTx(txHex);\n      };\n\n      return {\n        address,\n        walletMethods: {\n          ...toolbox,\n          transfer,\n          signTransaction,\n        },\n      };\n    }\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_chain_not_supported\",\n        info: { chain, wallet: WalletOption.TREZOR },\n      });\n  }\n}\n\nfunction connectTrezor({\n  apis,\n  rpcUrls,\n  addChain,\n  config: {\n    covalentApiKey,\n    ethplorerApiKey,\n    blockchairApiKey,\n    trezorManifest = { appUrl: \"\", email: \"\" },\n    thorswapApiKey,\n  },\n}: ConnectWalletParams) {\n  return async function connectTrezor(chains: Chain[], derivationPath: DerivationPathArray) {\n    const supportedChains = filterSupportedChains(\n      chains,\n      TREZOR_SUPPORTED_CHAINS,\n      WalletOption.TREZOR,\n    );\n\n    const chain = supportedChains[0];\n    if (!chain) return false;\n\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const { default: TrezorConnect } = await import(\"@trezor/connect-web\");\n    const { success } = await TrezorConnect.getDeviceState();\n\n    if (!success) {\n      TrezorConnect.init({ lazyLoad: true, manifest: trezorManifest });\n    }\n\n    const { address, walletMethods } = await getToolbox({\n      apis,\n      rpcUrl: rpcUrls[chain],\n      chain,\n      covalentApiKey,\n      ethplorerApiKey,\n      blockchairApiKey,\n      derivationPath,\n    });\n\n    addChain({\n      chain,\n      ...walletMethods,\n      address,\n      balance: [],\n      walletType: WalletOption.TREZOR,\n    });\n\n    return true;\n  };\n}\n\nexport const trezorWallet = { connectTrezor } as const;\n"
  ],
  "mappings": "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",
  "debugId": "8A72A9B754F5F01164756E2164756E21",
  "names": []
}