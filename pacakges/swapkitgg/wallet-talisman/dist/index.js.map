{
  "version": 3,
  "sources": ["../src/talisman.ts", "../src/helpers.ts"],
  "sourcesContent": [
    "import {\n  Chain,\n  type ConnectWalletParams,\n  WalletOption,\n  filterSupportedChains,\n  setRequestClientConfig,\n} from \"@swapkit/helpers\";\nimport { getWalletForChain } from \"./helpers\";\n\nconst TALISMAN_SUPPORTED_CHAINS = [\n  Chain.Ethereum,\n  Chain.Arbitrum,\n  Chain.Avalanche,\n  Chain.Base,\n  Chain.Polygon,\n  Chain.BinanceSmartChain,\n  Chain.Optimism,\n  Chain.Polkadot,\n  Chain.Chainflip,\n] as const;\n\nfunction connectTalisman({\n  addChain,\n  apis,\n  config: { thorswapApiKey, covalentApiKey, ethplorerApiKey },\n}: ConnectWalletParams) {\n  return async function connectTalisman(chains: Chain[]) {\n    setRequestClientConfig({ apiKey: thorswapApiKey });\n\n    const supportedChains = filterSupportedChains(\n      chains,\n      TALISMAN_SUPPORTED_CHAINS,\n      WalletOption.TALISMAN,\n    );\n\n    const promises = supportedChains.map(async (chain) => {\n      const { address, walletMethods } = await getWalletForChain({\n        apis,\n        chain,\n        covalentApiKey,\n        ethplorerApiKey,\n      });\n\n      addChain({\n        address,\n        ...walletMethods,\n        chain,\n        balance: [],\n        walletType: WalletOption.TALISMAN,\n      });\n    });\n\n    await Promise.all(promises);\n\n    return true;\n  };\n}\n\nexport const talismanWallet = { connectTalisman } as const;\n",
    "import { decodeAddress, encodeAddress } from \"@polkadot/util-crypto\";\nimport {\n  Chain,\n  type ChainApis,\n  ChainToHexChainId,\n  type EVMChain,\n  type EthereumWindowProvider,\n  SwapKitError,\n  WalletOption,\n  pickEvmApiKey,\n  prepareNetworkSwitch,\n  switchEVMWalletNetwork,\n} from \"@swapkit/helpers\";\nimport type { NonETHToolbox } from \"@swapkit/toolbox-evm\";\nimport { type InjectedWindow, Network } from \"@swapkit/toolbox-substrate\";\nimport type { Eip1193Provider } from \"ethers\";\n\ndeclare const window: {\n  talismanEth: EthereumWindowProvider;\n} & Window &\n  InjectedWindow;\n\nexport const convertAddress = (inputAddress: string, newPrefix: number): string => {\n  const decodedAddress = decodeAddress(inputAddress);\n  const convertedAddress = encodeAddress(decodedAddress, newPrefix);\n  return convertedAddress;\n};\n\nexport const getWeb3WalletMethods = async ({\n  apis,\n  ethereumWindowProvider,\n  chain,\n  covalentApiKey,\n  ethplorerApiKey,\n}: {\n  apis?: ChainApis;\n  ethereumWindowProvider: Eip1193Provider | undefined;\n  chain: EVMChain;\n  covalentApiKey?: string;\n  ethplorerApiKey?: string;\n}) => {\n  const { getToolboxByChain } = await import(\"@swapkit/toolbox-evm\");\n  const { BrowserProvider } = await import(\"ethers\");\n\n  if (!ethereumWindowProvider) {\n    throw new SwapKitError({\n      errorKey: \"wallet_provider_not_found\",\n      info: { wallet: WalletOption.TALISMAN, chain },\n    });\n  }\n\n  const api = apis?.[chain];\n\n  const apiKey = pickEvmApiKey({ chain, nonEthApiKey: covalentApiKey, ethApiKey: ethplorerApiKey });\n  const provider = new BrowserProvider(ethereumWindowProvider, \"any\");\n  const signer = await provider.getSigner();\n\n  const toolbox = getToolboxByChain(chain)({ api, apiKey, provider, signer });\n\n  try {\n    chain !== Chain.Ethereum &&\n      (await switchEVMWalletNetwork(\n        provider,\n        ChainToHexChainId[chain],\n        (toolbox as NonETHToolbox).getNetworkParams(),\n      ));\n  } catch (_error) {\n    throw new SwapKitError({\n      errorKey: \"wallet_failed_to_add_or_switch_network\",\n      info: { wallet: WalletOption.TALISMAN, chain },\n    });\n  }\n\n  return prepareNetworkSwitch<typeof toolbox>({\n    toolbox: { ...toolbox },\n    chainId: ChainToHexChainId[chain],\n    provider,\n  });\n};\n\nexport const getWalletForChain = async ({\n  apis,\n  chain,\n  ethplorerApiKey,\n  covalentApiKey,\n}: {\n  apis?: ChainApis;\n  chain: Chain;\n  ethplorerApiKey?: string;\n  covalentApiKey?: string;\n}) => {\n  switch (chain) {\n    case Chain.Ethereum:\n    case Chain.Arbitrum:\n    case Chain.Optimism:\n    case Chain.Polygon:\n    case Chain.Avalanche:\n    case Chain.BinanceSmartChain:\n    case Chain.Base: {\n      if (!(window.talismanEth && \"send\" in window.talismanEth)) {\n        throw new SwapKitError({ errorKey: \"wallet_talisman_not_found\", info: { chain } });\n      }\n\n      const { getProvider } = await import(\"@swapkit/toolbox-evm\");\n\n      const evmWallet = await getWeb3WalletMethods({\n        apis,\n        chain,\n        ethereumWindowProvider: window.talismanEth,\n        covalentApiKey,\n        ethplorerApiKey,\n      });\n\n      const address: string = (await window.talismanEth.send(\"eth_requestAccounts\", []))[0];\n\n      const getBalance = async (addressOverwrite?: string, potentialScamFilter = true) =>\n        evmWallet.getBalance(addressOverwrite || address, potentialScamFilter, getProvider(chain));\n\n      return { walletMethods: { ...evmWallet, getBalance }, address };\n    }\n\n    case Chain.Polkadot:\n    case Chain.Chainflip: {\n      const { getToolboxByChain } = await import(\"@swapkit/toolbox-substrate\");\n\n      const injectedWindow = window as Window & InjectedWindow;\n      const injectedExtension = injectedWindow?.injectedWeb3?.talisman;\n      const rawExtension = await injectedExtension?.enable?.(\"talisman\");\n\n      if (!rawExtension) {\n        throw new SwapKitError({\n          errorKey: \"wallet_talisman_not_enabled\",\n          info: { chain },\n        });\n      }\n\n      const toolbox = await getToolboxByChain(chain, { signer: rawExtension.signer });\n      const accounts = await rawExtension.accounts.get();\n\n      if (!accounts[0]?.address) {\n        throw new SwapKitError({\n          errorKey: \"wallet_missing_params\",\n          info: { wallet: WalletOption.TALISMAN, accounts, address: accounts[0]?.address },\n        });\n      }\n\n      const address = convertAddress(accounts[0].address, Network[chain].prefix);\n\n      return {\n        walletMethods: { ...toolbox, getAddress: () => address },\n        address,\n      };\n    }\n\n    default:\n      throw new SwapKitError({\n        errorKey: \"wallet_chain_not_supported\",\n        info: { chain, wallet: WalletOption.TALISMAN },\n      });\n  }\n};\n"
  ],
  "mappings": "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",
  "debugId": "3FCA331A2904D80964756E2164756E21",
  "names": []
}