import{a as A,c as y}from"./chunk-nm00d52v.js";import{Chain as a,WalletOption as C,filterSupportedChains as K,setRequestClientConfig as S}from"@swapkit/helpers";import{decodeAddress as E,encodeAddress as _}from"@polkadot/util-crypto";import{Chain as n,ChainToHexChainId as u,SwapKitError as m,WalletOption as f,pickEvmApiKey as W,prepareNetworkSwitch as v,switchEVMWalletNetwork as x}from"@swapkit/helpers";import{Network as T}from"@swapkit/toolbox-substrate";var b=(r,e)=>{let t=E(r);return _(t,e)},P=async({apis:r,ethereumWindowProvider:e,chain:t,covalentApiKey:c,ethplorerApiKey:i})=>{let{getToolboxByChain:w}=await import("@swapkit/toolbox-evm"),{BrowserProvider:s}=await import("./chunk-7r0bsnk5.js");if(!e)throw new m({errorKey:"wallet_provider_not_found",info:{wallet:f.TALISMAN,chain:t}});let l=r?.[t],d=W({chain:t,nonEthApiKey:c,ethApiKey:i}),o=new s(e,"any"),p=await o.getSigner(),h=w(t)({api:l,apiKey:d,provider:o,signer:p});try{t!==n.Ethereum&&await x(o,u[t],h.getNetworkParams())}catch(I){throw new m({errorKey:"wallet_failed_to_add_or_switch_network",info:{wallet:f.TALISMAN,chain:t}})}return v({toolbox:{...h},chainId:u[t],provider:o})},g=async({apis:r,chain:e,ethplorerApiKey:t,covalentApiKey:c})=>{switch(e){case n.Ethereum:case n.Arbitrum:case n.Optimism:case n.Polygon:case n.Avalanche:case n.BinanceSmartChain:case n.Base:{if(!(window.talismanEth&&("send"in window.talismanEth)))throw new m({errorKey:"wallet_talisman_not_found",info:{chain:e}});let{getProvider:i}=await import("@swapkit/toolbox-evm"),w=await P({apis:r,chain:e,ethereumWindowProvider:window.talismanEth,covalentApiKey:c,ethplorerApiKey:t}),s=(await window.talismanEth.send("eth_requestAccounts",[]))[0];return{walletMethods:{...w,getBalance:async(d,o=!0)=>w.getBalance(d||s,o,i(e))},address:s}}case n.Polkadot:case n.Chainflip:{let{getToolboxByChain:i}=await import("@swapkit/toolbox-substrate"),l=await window?.injectedWeb3?.talisman?.enable?.("talisman");if(!l)throw new m({errorKey:"wallet_talisman_not_enabled",info:{chain:e}});let d=await i(e,{signer:l.signer}),o=await l.accounts.get();if(!o[0]?.address)throw new m({errorKey:"wallet_missing_params",info:{wallet:f.TALISMAN,accounts:o,address:o[0]?.address}});let p=b(o[0].address,T[e].prefix);return{walletMethods:{...d,getAddress:()=>p},address:p}}default:throw new m({errorKey:"wallet_chain_not_supported",info:{chain:e,wallet:f.TALISMAN}})}};var M=[a.Ethereum,a.Arbitrum,a.Avalanche,a.Base,a.Polygon,a.BinanceSmartChain,a.Optimism,a.Polkadot,a.Chainflip];function N({addChain:r,apis:e,config:{thorswapApiKey:t,covalentApiKey:c,ethplorerApiKey:i}}){return async function w(s){S({apiKey:t});let d=K(s,M,C.TALISMAN).map(async(o)=>{let{address:p,walletMethods:h}=await g({apis:e,chain:o,covalentApiKey:c,ethplorerApiKey:i});r({address:p,...h,chain:o,balance:[],walletType:C.TALISMAN})});return await Promise.all(d),!0}}var V={connectTalisman:N};export{V as talismanWallet};

//# debugId=3FCA331A2904D80964756E2164756E21
