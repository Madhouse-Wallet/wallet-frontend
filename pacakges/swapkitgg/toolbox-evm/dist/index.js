var St=Object.create;var{getPrototypeOf:_t,defineProperty:et,getOwnPropertyNames:At}=Object;var Gt=Object.prototype.hasOwnProperty;var Lt=(t,n,o)=>{o=t!=null?St(_t(t)):{};let e=n||!t||!t.__esModule?et(o,"default",{value:t,enumerable:!0}):o;for(let y of At(t))if(!Gt.call(e,y))et(e,y,{get:()=>t[y],enumerable:!0});return e};var zt=((t)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(t,{get:(n,o)=>(typeof require!=="undefined"?require:n)[o]}):t)(function(t){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});import{AbstractSigner as Ro,BrowserProvider as Mo,HDNodeWallet as Co,JsonRpcProvider as ko,Signature as Jo,Transaction as Do}from"ethers";import{BaseDecimal as Pt,ChainId as D,ChainIdToChain as ot,EVMChains as Wt,RequestClient as yt,formatBigIntToSafeValue as Qt}from"@swapkit/helpers";var at={[D.Arbitrum]:"arb",[D.Avalanche]:"avax",[D.Base]:"base",[D.BinanceSmartChain]:"bnb",[D.Ethereum]:"eth",[D.Optimism]:"opt",[D.Polygon]:"polygon"},it=new Map;import("@swapkit/tokens").then((t)=>{for(let n of Object.values(t.tokenLists).filter((o)=>!["CAVIAR_V1","JUPITER"].includes(o.provider)))for(let{identifier:o,chain:e,...y}of n.tokens)if(Wt.includes(e)&&!!y.address)it.set(y.address.toUpperCase(),{symbol:o.split(".").slice(1).join("."),decimal:"decimals"in y?y.decimals:Pt[e]})});var ie=({apiKey:t})=>{return{getBalance:async(n,o)=>{if(!at[o])throw new Error(`Chain ${ot[o]} is not supported by Alchemy`);return(await yt.post(`https://${at[o]}-mainnet.g.alchemy.com/v2/${t}`,{json:{jsonrpc:"2.0",method:"alchemy_getTokenBalances",params:[n,"erc20"]}})).result.tokenBalances.map(({contractAddress:a,tokenBalance:p})=>{let l=it.get(a.toUpperCase());if(l)return{value:Qt({value:BigInt(p),decimal:l.decimal,bigIntDecimal:l.decimal}),decimal:l.decimal,chain:ot[o],symbol:l.symbol};return}).filter(Boolean)||[]}}};import{ChainIdToChain as Xt,RequestClient as Yt,formatBigIntToSafeValue as Zt}from"@swapkit/helpers";var f=({apiKey:t,chainId:n})=>({getBalance:async(o,e)=>{let{data:y}=await Yt.get(`https://api.covalenthq.com/v1/${n}/address/${o}/balances_v2/`,{searchParams:{key:t}});return(y?.items||[]).filter(({is_spam:i})=>!i).map(({balance:i,contract_decimals:a,contract_ticker_symbol:p,contract_address:l,native_token:r})=>({value:Zt({value:BigInt(i),decimal:a,bigIntDecimal:a}),decimal:a,chain:Xt[n],symbol:`${p||"Unknown"}${r?"":`-${l}`}`}))}});import{Chain as Ft,RequestClient as Nt,formatBigIntToSafeValue as jt}from"@swapkit/helpers";var Kt="https://api.ethplorer.io",pt=(t="freekey")=>({getBalance:async(n,o)=>{let{tokens:e=[]}=await Nt.get(`${Kt}/getAddressInfo/${n}`,{searchParams:{apiKey:t}});return e.filter(({tokenInfo:{symbol:y},rawBalance:i})=>y&&i!=="0").map(({tokenInfo:{symbol:y,decimals:i,address:a},rawBalance:p})=>({chain:Ft.Ethereum,symbol:a?`${y}-${a}`:y,value:jt({value:BigInt(p),decimal:Number.parseInt(i),bigIntDecimal:Number.parseInt(i)}),decimal:Number.parseInt(i)}))}});import{AssetValue as q,BaseDecimal as lt,ChainToChainId as Vt,FeeOption as ut,SwapKitNumber as j,filterAssets as vt,formatBigIntToSafeValue as Ot,isGasAsset as dt}from"@swapkit/helpers";var ce=async({toolbox:t,from:n,memo:o="",feeOptionKey:e=ut.Fastest,assetValue:y,abi:i,funcName:a,funcParams:p,contractAddress:l,txOverrides:r})=>{let u=(await t.getBalance(n)).find(({symbol:c,chain:J})=>y?c===y.symbol:c===q.from({chain:J})?.symbol),m=(await t.estimateGasPrices())[e];if(!u)return q.from({chain:y.chain});if(y&&(u.chain!==y.chain||u.symbol!==y?.symbol))return u;let T=i&&a&&p&&l?await t.estimateCall({contractAddress:l,abi:i,funcName:a,funcParams:p,txOverrides:r}):await t.estimateGasLimit({from:n,recipient:n,memo:o,assetValue:y}),B="maxFeePerGas"in m;if(!(("gasPrice"in m)||B))throw new Error("Could not fetch fee data");let w=T*(B?(m.maxFeePerGas||1n)+(m.maxPriorityFeePerGas||1n):m.gasPrice),M=j.fromBigInt(u.getBaseValue("bigint")).sub(w.toString());return q.from({chain:u.chain,value:M.getValue("string")})},L=(t)=>t>0n?`0x${t.toString(16)}`:"0x0",h=async({provider:t,api:n,address:o,chain:e,potentialScamFilter:y})=>{let i=await n.getBalance(o,Vt[e]),a=await t.getBalance(o),p=[{chain:e,symbol:q.from({chain:e}).symbol,value:Ot({value:BigInt(a),decimal:18,bigIntDecimal:18}),decimal:lt[e]},...i.filter((r)=>!dt(r))];return(y?vt(p):p).map(({symbol:r,value:u,decimal:m})=>new q({decimal:m||lt[e],value:u,identifier:`${e}.${r}`}))},R=async(t,n=ut.Fast,o,e,y=!0)=>{let i=(await $(e,y))[n],a=await e.estimateGas(t),p=q.from({chain:o});if(!y&&i.gasPrice)return p.set(j.fromBigInt(i.gasPrice*a,p.decimal));if(i.maxFeePerGas&&i.maxPriorityFeePerGas)return p.set(j.fromBigInt((i.maxFeePerGas+i.maxPriorityFeePerGas)*a,p.decimal));throw new Error("No gas price found")};import{ChainToRPC as tn}from"@swapkit/helpers";import{JsonRpcProvider as nn}from"ethers";var ge=(t,n)=>{return new nn(n||tn[t])};import{Chain as k,ContractAddress as U,FeeOption as C,SwapKitError as s,SwapKitNumber as rt,erc20ABI as H,isGasAsset as en}from"@swapkit/helpers";import{BrowserProvider as on,Contract as yn,Interface as an,MaxInt256 as pn,getAddress as z,hexlify as K,toUtf8Bytes as V}from"ethers";var v=pn,ln={[k.Arbitrum]:U.ARB,[k.Avalanche]:U.AVAX,[k.Base]:U.BASE,[k.BinanceSmartChain]:U.BSC,[k.Ethereum]:U.ETH,[k.Optimism]:U.OP,[k.Polygon]:U.MATIC},un=["payable","nonpayable"],rn=(t)=>t.type===2||!!t.maxFeePerGas||!!t.maxPriorityFeePerGas,P=(t)=>t instanceof on,W=(t,n,o)=>{return new yn(t,an.from(n),o)},mt=(t)=>{try{return z(t),!0}catch(n){return!1}},mn=(t,n)=>{let o=t.find((e)=>e.name===n);if(!o)throw new s("toolbox_evm_no_abi_fragment",{functionName:n});return o.stateMutability&&un.includes(o.stateMutability)},Q=async(t,n,{callProvider:o,signer:e,contractAddress:y,abi:i,funcName:a,funcParams:p=[],txOverrides:l={},feeOption:r=C.Fast})=>{let u=o||t;if(!y)throw new Error("contractAddress must be provided");let m=mn(i,a),T={...l,from:l?.from||await e?.getAddress()};if(m&&P(u)&&e){let w=await E(u,{contractAddress:y,abi:i,funcName:a,funcParams:p,txOverrides:T});return X(u,w)}let B=W(y,i,u);if(m){if(!e)throw new s("toolbox_evm_no_signer");let w=l?.from||await e.getAddress();if(!w)throw new s("toolbox_evm_no_signer_address");let M=B.connect(e),{maxFeePerGas:c,maxPriorityFeePerGas:J,gasPrice:I}=(await $(t,n))[r],nt=await B.getFunction(a).estimateGas(...p,l),N=await M[a](...p,{...l,gasLimit:nt,maxFeePerGas:c,maxPriorityFeePerGas:J,gasPrice:I,nonce:l?.nonce||await u.getTransactionCount(w)});return typeof N?.hash==="string"?N?.hash:N}let g=await B[a]?.(...p);return typeof g?.hash==="string"?g?.hash:g},E=async(t,{contractAddress:n,abi:o,funcName:e,funcParams:y=[],txOverrides:i})=>W(n,o,t).getFunction(e).populateTransaction(...y.concat(i).filter((a)=>typeof a!=="undefined")),st=async(t,{assetAddress:n,spenderAddress:o,from:e})=>await Q(t,!0,{contractAddress:n,abi:H,funcName:"allowance",funcParams:[e,o]}),sn=async(t,{assetAddress:n,spenderAddress:o,from:e,amount:y=v})=>{return rt.fromBigInt(await st(t,{assetAddress:n,spenderAddress:o,from:e})).gte(rt.fromBigInt(BigInt(y)))},Tn=async(t,{assetAddress:n,spenderAddress:o,feeOptionKey:e=C.Fast,amount:y,gasLimitFallback:i,from:a,nonce:p},l,r=!0)=>{let u=[o,BigInt(y||v)],T={contractAddress:n,abi:H,funcName:"approve",funcParams:u,signer:l,txOverrides:{from:a}};if(P(t))return X(t,await E(t,T));return Q(t,r,{...T,funcParams:u,txOverrides:{from:a,nonce:p,gasLimit:i?BigInt(i.toString()):void 0},feeOption:e})},cn=async(t,{assetValue:n,memo:o,recipient:e,feeOptionKey:y=C.Fast,data:i,from:a,maxFeePerGas:p,maxPriorityFeePerGas:l,gasPrice:r,...u},m,T=!0)=>{let B=n.getBaseValue("bigint"),g=n.chain,w=a||await m?.getAddress();if(!w)throw new s("toolbox_evm_no_from_address");if(!n.isGasAsset){let c=Y(n,g);if(!c)throw new s("toolbox_evm_no_contract_address");return Q(t,T,{signer:m,contractAddress:c,abi:H,funcName:"transfer",funcParams:[e,B],txOverrides:{from:w,maxFeePerGas:p,maxPriorityFeePerGas:l,gasPrice:r},feeOption:y})}let M={...u,from:w,to:e,value:B,data:i||K(V(o||""))};return ct(t,M,y,m,T)},$=async(t,n=!0)=>{try{let{maxFeePerGas:o,maxPriorityFeePerGas:e,gasPrice:y}=await t.getFeeData();if(n){if(o===null||e===null)throw new s("toolbox_evm_no_fee_data");return{[C.Average]:{maxFeePerGas:o,maxPriorityFeePerGas:e},[C.Fast]:{maxFeePerGas:o*15n/10n,maxPriorityFeePerGas:e*15n/10n},[C.Fastest]:{maxFeePerGas:o*2n,maxPriorityFeePerGas:e*2n}}}if(!y)throw new s("toolbox_evm_no_gas_price");return{[C.Average]:{gasPrice:y},[C.Fast]:{gasPrice:y*15n/10n},[C.Fastest]:{gasPrice:y*2n}}}catch(o){throw new Error(`Failed to estimate gas price: ${o.msg??o.toString()}`)}},Tt=(t,{signer:n,contractAddress:o,abi:e,funcName:y,funcParams:i=[],txOverrides:a})=>{if(!o)throw new s("toolbox_evm_no_contract_address");let p=W(o,e,t);return n?p.connect(n).getFunction(y).estimateGas(...i,a):p.getFunction(y).estimateGas(...i,a)},bn=(t,{assetValue:n,recipient:o,memo:e,from:y,funcName:i,funcParams:a,txOverrides:p,signer:l})=>{let r=n.bigIntValue,u=n.isGasAsset?null:Y(n,n.chain);if(u&&i)return Tt(t,{contractAddress:u,abi:H,funcName:i,funcParams:a,txOverrides:p,signer:l});return t.estimateGas({from:y,to:o,value:r,data:e?K(V(e)):void 0})},ct=async(t,n,o=C.Fast,e,y=!0)=>{if(!e)throw new s("toolbox_evm_no_signer");let{from:i,to:a,data:p,value:l,...r}=n;if(!a)throw new s("toolbox_evm_no_to_address");let u={...r,data:p||"0x",to:a,from:i,value:BigInt(l||0)};if(P(t))return X(t,u);let m=i||await e.getAddress(),T=n.nonce||await t.getTransactionCount(m),B=(await t.getNetwork()).chainId,g=rn(u)||y,w=g&&!(u.maxFeePerGas&&u.maxPriorityFeePerGas)||!u.gasPrice?Object.entries((await $(t,y))[o]).reduce((c,[J,I])=>({...c,[J]:L(BigInt(I))}),{}):{},M;try{M=L(u.gasLimit||await t.estimateGas(u)*11n/10n)}catch(c){throw new s("toolbox_evm_error_estimating_gas_limit",{error:c})}try{let c={...u,chainId:B,type:g?2:0,gasLimit:M,nonce:T,...w};try{return(await e.sendTransaction(c)).hash}catch(J){let I=await e.signTransaction({...c,from:m});return(await t.broadcastTransaction(I)).hash}}catch(c){throw new s("toolbox_evm_error_sending_transaction",{error:c})}},Ce=(t)=>z(t),X=(t,{from:n,to:o,data:e,value:y})=>{if(!P(t))throw new s("toolbox_evm_provider_not_eip1193_compatible");return t.send("eth_sendTransaction",[{value:L(BigInt(y||0)),from:n,to:o,data:e}])},ke=(t,n)=>{let o=Y(t,n);if(o)return z(o.toLowerCase());throw new s("toolbox_evm_invalid_gas_asset_address")},Y=({chain:t,symbol:n,ticker:o},e)=>{try{if(t===e&&n===e&&o===e||t===k.BinanceSmartChain&&n==="BNB"&&o==="BNB"||[k.Arbitrum,k.Base].includes(t)&&n==="ETH"&&o==="ETH")return ln[e];return z(n.slice(o.length+1).replace(/^0X/,""))}catch(y){return null}},hn=async(t,{assetValue:n,memo:o,recipient:e,feeOptionKey:y=C.Fast,data:i,from:a,maxFeePerGas:p,maxPriorityFeePerGas:l,gasPrice:r,...u},m)=>{let T=n.getBaseValue("bigint"),B=n.chain,g=a||await m?.getAddress();if(!g)throw new s("toolbox_evm_no_from_address");if(!en(n)){let M=Y(n,B);if(!M)throw new s("toolbox_evm_no_contract_address");return E(t,{contractAddress:M,abi:H,funcName:"transfer",funcParams:[e,T],txOverrides:{from:g,maxFeePerGas:p,maxPriorityFeePerGas:l,gasPrice:r}})}return{...u,from:g,to:e,value:T,data:i||K(V(o||""))}},Bn=async(t,{assetAddress:n,spenderAddress:o,amount:e,from:y},i)=>{let a=[o,BigInt(e||v)];return await E(t,{contractAddress:n,abi:H,funcName:"approve",funcParams:a,signer:i,txOverrides:{from:y}})};function gn(t){if(!t)throw new s("toolbox_evm_no_signer");return t.signMessage}var b=({provider:t,signer:n,isEIP1559Compatible:o=!0})=>({approve:(e)=>Tn(t,e,n,o),approvedAmount:(e)=>st(t,e),broadcastTransaction:t.broadcastTransaction,call:(e)=>Q(t,o,{...e,signer:n}),createContract:(e,y,i)=>W(e,y,i||t),createContractTxObject:(e)=>E(t,e),EIP1193SendTransaction:(e)=>X(t,e),estimateCall:(e)=>Tt(t,{...e,signer:n}),estimateGasLimit:({assetValue:e,recipient:y,memo:i})=>bn(t,{assetValue:e,recipient:y,memo:i,signer:n}),estimateGasPrices:()=>$(t,o),isApproved:(e)=>sn(t,e),sendTransaction:(e,y)=>ct(t,e,y,n,o),transfer:(e)=>cn(t,e,n,o),validateAddress:mt,createTransferTx:(e)=>hn(t,e,n),createApprovalTx:(e)=>Bn(t,e,n),signMessage:gn(n)}),Je=b,wn=({address:t})=>mt(t);var fn;((o)=>{o.Test="goerli";o.Main="homestead"})(fn||={});import{BaseDecimal as Rn,Chain as S,ChainId as bt,ChainToExplorerUrl as Mn,FeeOption as Z,SwapKitError as Cn,getRPCUrl as kn}from"@swapkit/helpers";var Jn=()=>({chainId:bt.ArbitrumHex,chainName:"Arbitrum One",nativeCurrency:{name:"Ethereum",symbol:S.Ethereum,decimals:Rn.ETH},rpcUrls:[kn(S.Arbitrum)],blockExplorerUrls:[Mn[S.Arbitrum]]}),Dn=async(t)=>{try{let{gasPrice:n}=await t.getFeeData();if(!n)throw new Error("No fee data available");return{[Z.Average]:{gasPrice:n},[Z.Fast]:{gasPrice:n},[Z.Fastest]:{gasPrice:n}}}catch(n){throw new Error(`Failed to estimate gas price: ${n.msg??n.toString()}`)}},ht=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new Cn({errorKey:"wallet_missing_api_key",info:{chain:S.Arbitrum}});let y=t||f({apiKey:e,chainId:bt.Arbitrum}),i=b({provider:n,signer:o,isEIP1559Compatible:!1}),a=S.Arbitrum;return{...i,getNetworkParams:Jn,estimateGasPrices:()=>Dn(n),estimateTransactionFee:(p)=>R(p,Z.Average,a,n,!1),getBalance:(p,l=!0,r)=>h({provider:r||n,api:y,address:p,chain:a,potentialScamFilter:l})}};import{BaseDecimal as Un,Chain as F,ChainId as Bt,ChainToExplorerUrl as xn,SwapKitError as qn}from"@swapkit/helpers";var Hn=()=>({chainId:Bt.AvalancheHex,chainName:"Avalanche Network",nativeCurrency:{name:"Avalanche",symbol:F.Avalanche,decimals:Un.AVAX},rpcUrls:["https://api.avax.network/ext/bc/C/rpc"],blockExplorerUrls:[xn[F.Avalanche]]}),gt=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new qn({errorKey:"wallet_missing_api_key",info:{chain:F.Avalanche}});let y=t||f({apiKey:e,chainId:Bt.Avalanche}),i=b({provider:n,signer:o}),a=F.Avalanche;return{...i,getNetworkParams:Hn,estimateTransactionFee:(p,l)=>R(p,l,a,n),getBalance:(p,l=!0,r)=>h({provider:r||n,api:y,address:p,chain:a,potentialScamFilter:l})}};import{BaseDecimal as In,Chain as O,ChainId as wt,ChainToExplorerUrl as $n,SwapKitError as En}from"@swapkit/helpers";var Sn=()=>({chainId:wt.BinanceSmartChainHex,chainName:"BNB Chain",nativeCurrency:{name:"Binance Coin",symbol:"BNB",decimals:In.BSC},rpcUrls:["https://bsc-dataseed.binance.org"],blockExplorerUrls:[$n[O.BinanceSmartChain]]}),ft=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new En({errorKey:"wallet_missing_api_key",info:{chain:O.BinanceSmartChain}});let y=t||f({apiKey:e,chainId:wt.BinanceSmartChain}),i=b({provider:n,signer:o,isEIP1559Compatible:!1}),a=O.BinanceSmartChain;return{...i,getNetworkParams:Sn,estimateTransactionFee:(p,l)=>R(p,l,a,n,!1),getBalance:(p,l=!0,r)=>h({provider:r||n,api:y,address:p,chain:a,potentialScamFilter:l})}};import{Chain as _n,FeeOption as An}from"@swapkit/helpers";var Rt=[{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"aggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes[]",name:"returnData",type:"bytes[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"blockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],name:"getBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"getBlockNumber",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockCoinbase",outputs:[{internalType:"address",name:"coinbase",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockDifficulty",outputs:[{internalType:"uint256",name:"difficulty",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockGasLimit",outputs:[{internalType:"uint256",name:"gaslimit",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getCurrentBlockTimestamp",outputs:[{internalType:"uint256",name:"timestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"getEthBalance",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLastBlockHash",outputs:[{internalType:"bytes32",name:"blockHash",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryAggregate",outputs:[{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bool",name:"requireSuccess",type:"bool"},{components:[{internalType:"address",name:"target",type:"address"},{internalType:"bytes",name:"callData",type:"bytes"}],internalType:"struct Multicall2.Call[]",name:"calls",type:"tuple[]"}],name:"tryBlockAndAggregate",outputs:[{internalType:"uint256",name:"blockNumber",type:"uint256"},{internalType:"bytes32",name:"blockHash",type:"bytes32"},{components:[{internalType:"bool",name:"success",type:"bool"},{internalType:"bytes",name:"returnData",type:"bytes"}],internalType:"struct Multicall2.Result[]",name:"returnData",type:"tuple[]"}],stateMutability:"nonpayable",type:"function"}];var Mt=({api:t,apiKey:n,signer:o,provider:e})=>{let y=t||pt(n),i=b({provider:e,signer:o}),a=_n.Ethereum;async function p(l,r="0x5ba1e12693dc8f9c48aad8770482f4739beed696",u="aggregate",m=An.Fast){let T=await i.createContractTxObject({contractAddress:r,abi:Rt,funcName:u,funcParams:[l]});return i.sendTransaction(T,m)}return{...i,estimateTransactionFee:(l,r)=>R(l,r,a,e),getBalance:(l,r=!0,u)=>h({provider:u||e,api:y,address:l,chain:a,potentialScamFilter:r}),multicall:p}};import{Chain as x}from"@swapkit/helpers";import{BaseDecimal as Gn,Chain as _,ChainId as Ct,ChainToExplorerUrl as Ln,SwapKitError as zn,getRPCUrl as Pn}from"@swapkit/helpers";var Wn=()=>({chainId:Ct.BaseHex,chainName:"Base Mainnet",nativeCurrency:{name:"Ethereum",symbol:_.Ethereum,decimals:Gn.ETH},rpcUrls:[Pn(_.Base)],blockExplorerUrls:[Ln[_.Base]]}),kt=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new zn({errorKey:"wallet_missing_api_key",info:{chain:_.Base}});let y=b({provider:n,signer:o}),i=_.Base;return{...y,getNetworkParams:Wn,estimateTransactionFee:(a,p)=>R(a,p,i,n),getBalance:async(a,p=!0,l)=>{return await h({provider:l||n,api:t||f({apiKey:e,chainId:Ct.Base}),address:a,chain:i,potentialScamFilter:p})}}};import{BaseDecimal as Qn,Chain as A,ChainId as Jt,ChainToExplorerUrl as Xn,SwapKitError as Yn,getRPCUrl as Zn}from"@swapkit/helpers";var Fn=()=>({chainId:Jt.PolygonHex,chainName:"Polygon Mainnet",nativeCurrency:{name:"Polygon",symbol:A.Polygon,decimals:Qn.MATIC},rpcUrls:[Zn(A.Polygon)],blockExplorerUrls:[Xn[A.Polygon]]}),Dt=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new Yn({errorKey:"wallet_missing_api_key",info:{chain:A.Polygon}});let y=t||f({apiKey:e,chainId:Jt.Polygon}),i=b({provider:n,signer:o}),a=A.Polygon;return{...i,getNetworkParams:Fn,estimateTransactionFee:(p,l)=>R(p,l,a,n),getBalance:(p,l=!0,r)=>h({provider:r||n,api:y,address:p,chain:a,potentialScamFilter:l})}};import{BaseDecimal as Nn,Chain as G,ChainId as xt,ChainToExplorerUrl as jn,FeeOption as d,SwapKitError as Kn,getRPCUrl as Vn}from"@swapkit/helpers";import{Contract as vn,Transaction as On}from"ethers";var Ut=[{inputs:[{internalType:"address",name:"_owner",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"DecimalsUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"GasPriceUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"L1BaseFeeUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"OverheadUpdated",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"ScalarUpdated",type:"event"},{inputs:[],name:"decimals",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"gasPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1Fee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes",name:"_data",type:"bytes"}],name:"getL1GasUsed",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"l1BaseFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"overhead",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"scalar",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_decimals",type:"uint256"}],name:"setDecimals",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_gasPrice",type:"uint256"}],name:"setGasPrice",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_baseFee",type:"uint256"}],name:"setL1BaseFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_overhead",type:"uint256"}],name:"setOverhead",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_scalar",type:"uint256"}],name:"setScalar",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}];var dn="0x420000000000000000000000000000000000000f",tt=(t)=>{return new vn(dn,Ut,t)},qt=(t)=>{let n=tt(t);if(n&&"l1BaseFee"in n)return n?.l1BaseFee();return},Ht=async(t,{data:n,from:o,to:e,gasPrice:y,type:i,gasLimit:a,nonce:p})=>{if(!e)throw new Error("Missing to address");return On.from({data:n,to:e,gasPrice:y,type:i,gasLimit:a,nonce:p?p:o?await t.getTransactionCount(o):0}).serialized},It=async(t,n)=>{let o=await tt(t),e=await Ht(t,n);if(o&&"getL1Fee"in o)return o.getL1Fee(e)},$t=async(t,n)=>{let o=await t.send("eth_gasPrice",[]),e=await t.estimateGas(n);return o.mul(e)},te=async(t,n)=>{let o=await It(t,n),e=await $t(t,n);return o.add(e)},ne=async(t,n)=>{let o=tt(t),e=await Ht(t,n);if(o&&"getL1GasUsed"in o)return o.getL1GasUsed(e)},ee=()=>({chainId:xt.OptimismHex,chainName:"Optimism",nativeCurrency:{name:"Ethereum",symbol:G.Ethereum,decimals:Nn.ETH},rpcUrls:[Vn(G.Optimism)],blockExplorerUrls:[jn[G.Optimism]]}),oe=async(t)=>{try{let{maxFeePerGas:n,maxPriorityFeePerGas:o,gasPrice:e}=await t.getFeeData(),y=await qt(t),i=e;if(!(n&&o))throw new Error("No fee data available");return{[d.Average]:{l1GasPrice:y,gasPrice:e,maxFeePerGas:n,maxPriorityFeePerGas:o},[d.Fast]:{l1GasPrice:(y||0n)*15n/10n,gasPrice:i*15n/10n,maxFeePerGas:n,maxPriorityFeePerGas:o*15n/10n},[d.Fastest]:{l1GasPrice:(y||0n)*2n,gasPrice:i*2n,maxFeePerGas:n,maxPriorityFeePerGas:o*2n}}}catch(n){throw new Error(`Failed to estimate gas price: ${n.msg??n.toString()}`)}},Et=({api:t,provider:n,signer:o,apiKey:e})=>{if(!(t||e))throw new Kn({errorKey:"wallet_missing_api_key",info:{chain:G.Optimism}});let y=t||f({apiKey:e,chainId:xt.Optimism});return{...b({provider:n,signer:o}),estimateTotalGasCost:(a)=>te(n,a),estimateL1GasCost:(a)=>It(n,a),estimateL2GasCost:(a)=>$t(n,a),getL1GasPrice:()=>qt(n),estimateL1Gas:(a)=>ne(n,a),getNetworkParams:ee,estimateGasPrices:()=>oe(n),getBalance:(a,p=!0,l)=>h({provider:l||n,api:y,address:a,chain:G.Optimism,potentialScamFilter:p})}};var ho=(t)=>{switch(t){case x.Avalanche:return gt;case x.Arbitrum:return ht;case x.Base:return kt;case x.Optimism:return Et;case x.Polygon:return Dt;case x.BinanceSmartChain:return ft;case x.Ethereum:return Mt;default:throw new Error(`Chain ${t} is not supported`)}};export{L as toHexString,Ce as toChecksumAddress,mn as isStateChangingCall,P as isBrowserProvider,ho as getToolboxByChain,Y as getTokenAddress,ge as getProvider,qt as getL1GasPrice,ke as getChecksumAddressFromAsset,h as getBalance,wn as evmValidateAddress,pt as ethplorerApi,R as estimateTransactionFee,te as estimateTotalGasCost,ce as estimateMaxSendableAmount,$t as estimateL2GasCost,It as estimateL1GasCost,ne as estimateL1Gas,$ as estimateGasPrices,E as createContractTxObject,W as createContract,f as covalentApi,tt as connectGasPriceOracle,ie as alchemyApi,Do as Transaction,Jo as Signature,Et as OPToolbox,v as MAX_APPROVAL,Dt as MATICToolbox,ko as JsonRpcProvider,Co as HDNodeWallet,fn as EthNetwork,b as EVMToolbox,Mt as ETHToolbox,X as EIP1193SendTransaction,Mo as BrowserProvider,Je as BaseEVMToolbox,ft as BSCToolbox,kt as BASEToolbox,Ro as AbstractSigner,gt as AVAXToolbox,ht as ARBToolbox};

//# debugId=3C34F5794523FFDA64756E2164756E21
