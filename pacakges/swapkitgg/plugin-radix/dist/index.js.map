{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": [
    "import type { QuoteResponseRoute } from \"@swapkit/api\";\nimport {\n  AssetValue,\n  Chain,\n  ProviderName,\n  SwapKitError,\n  type SwapKitPluginParams,\n  type SwapParams,\n} from \"@swapkit/helpers\";\n\nfunction plugin({ getWallet }: SwapKitPluginParams) {\n  async function swap({ route }: SwapParams<\"radix\", QuoteResponseRoute>) {\n    const { sellAmount, sellAsset } = route;\n\n    const assetValue = await AssetValue.from({\n      asset:\n        sellAsset === \"XRD.XRD\"\n          ? \"XRD.XRD-resource_rdx1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxradxrd\"\n          : sellAsset,\n      value: sellAmount,\n      asyncTokenLookup: true,\n    });\n\n    if (Chain.Radix !== assetValue.chain) throw new SwapKitError(\"core_swap_invalid_params\");\n\n    const wallet = getWallet(assetValue.chain);\n    try {\n      //   const manifest = (\n      //     await convertInstructionsToManifest({ network: RadixMainnet })(\n      //       route.transaction as Instructions,\n      //     )\n      //   ).value as string;c\n      return wallet.signAndBroadcast({\n        manifest: route.tx as string,\n      });\n    } catch (error) {\n      throw new SwapKitError(\"core_swap_invalid_params\", error);\n    }\n  }\n\n  return {\n    swap,\n    supportedSwapkitProviders: [ProviderName.CAVIAR_V1],\n  };\n}\n\nexport const RadixPlugin = { radix: { plugin } } as const;\n"
  ],
  "mappings": "AACA,qBACE,WACA,kBACA,kBACA,yBAKF,SAAS,CAAM,EAAG,aAAkC,CAClD,eAAe,CAAI,EAAG,SAAkD,CACtE,IAAQ,aAAY,aAAc,EAE5B,EAAa,MAAM,EAAW,KAAK,CACvC,MACE,IAAc,UACV,8EACA,EACN,MAAO,EACP,iBAAkB,EACpB,CAAC,EAED,GAAI,EAAM,QAAU,EAAW,MAAO,MAAM,IAAI,EAAa,0BAA0B,EAEvF,IAAM,EAAS,EAAU,EAAW,KAAK,EACzC,GAAI,CAMF,OAAO,EAAO,iBAAiB,CAC7B,SAAU,EAAM,EAClB,CAAC,QACM,EAAP,CACA,MAAM,IAAI,EAAa,2BAA4B,CAAK,GAI5D,MAAO,CACL,OACA,0BAA2B,CAAC,EAAa,SAAS,CACpD,EAGK,IAAM,EAAc,CAAE,MAAO,CAAE,QAAO,CAAE",
  "debugId": "4BD28CBB0059F26A64756E2164756E21",
  "names": []
}