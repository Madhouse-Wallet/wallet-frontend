var Z={networkId:1,networkName:"mainnet",dashboardBase:"https://dashboard.radixdlt.com"};import{GatewayApiClient as K}from"@radixdlt/babylon-gateway-api-sdk";import{RadixDappToolkit as L}from"@radixdlt/radix-dapp-toolkit";import{AssetValue as O,Chain as H}from"@swapkit/helpers";function Q(x){return x.startsWith("account_rdx1")&&x.length===66}function U({networkApi:x}){return async function M(R){let h=await V({address:R,networkApi:x});return X({resources:h,networkApi:x})}}async function V({address:x,networkApi:M}){let R=!0,h=void 0,T=[],N=await Y(M);while(R){let j={address:x,limit_per_page:100,cursor:h,at_ledger_state:{state_version:N}},W=await M.state.innerClient.entityFungiblesPage({stateEntityFungiblesPageRequest:j});if(T=T.concat(W.items),W.next_cursor)h=W.next_cursor;else R=!1}return T}async function X({resources:x,networkApi:M}){let R=[],h=50,T=[];for(let N=0;N<x.length;N+=50)T.push(x.slice(N,N+50));for(let N of T){let j=N.map((d)=>d.resource_address),W=await M.state.getEntityDetailsVaultAggregated(j),G=new Map;for(let d of W)if(d.details!==void 0){let f=d.metadata?.items.find((J)=>J.key==="symbol"),z=f?.value.typed.type==="String"?f.value.typed.value:"?";if(d.details.type==="FungibleResource")G.set(d.address,{decimals:d.details.divisibility,symbol:z})}for(let d of N)if(d.aggregation_level==="Global"){let f=G.get(d.resource_address)||{decimals:0,symbol:"?"},z=O.from({asset:f.symbol!==H.Radix?`${H.Radix}.${f.symbol}-${d.resource_address}`:"XRD.XRD",value:d.amount});R.push(z)}}return R}async function Y(x){return x.status.getCurrent().then((M)=>M.ledger_state.state_version)}var y=async({dappConfig:x})=>{let M=L({...x,networkId:x.network?.networkId||1}),R=K.initialize(M.gatewayApi.clientConfig);return{networkApi:R,getBalance:U({networkApi:R}),getAddress:()=>{return""},validateAddress:Q,signAndBroadcast:()=>{throw new Error("Not implemented")}}};export{Q as validateAddress,y as RadixToolbox,Z as RadixMainnet};

//# debugId=8DFC92C1B52E724E64756E2164756E21
